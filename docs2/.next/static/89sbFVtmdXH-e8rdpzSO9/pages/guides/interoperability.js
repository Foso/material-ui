(window.webpackJsonp=window.webpackJsonp||[]).push([[248],{"+UR7":function(n,e){n.exports="# Interoperabilidade da Biblioteca de Estilo\n\n<p class=\"description\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\n\nEste guia tem como objetivo documentar as alternativas mais populares, mas voc\xea deve descobrir que os princ\xedpios aplicados aqui podem ser adaptados para outras bibliotecas. There are examples for the following styling solutions:\n\n- [CSS puro](#plain-css)\n- [CSS global](#global-css)\n- [Styled Components](#global-css)\n- [M\xf3dulos CSS](#styled-components)\n- [Emotion](#css-modules)\n- [React JSS](#react-jss)\n\n## CSS puro\n\nNothing fancy, just plain CSS.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\n\n**PlainCssButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**PlainCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className=\"button\">Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Elementos mais profundos\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**PlainCssButtonDeep.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n.button-label {\n  color: #fff;\n}\n```\n\n**PlainCssButtonDeep.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={{ root: 'button', label: 'button-label' }}>\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n## CSS global\n\nExplicitly providing the class names to the component is too much effort? [You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\n\n**GlobalCssButton.css**\n\n```css\n.MuiButton-root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.MuiButton-root:hover {\n  background-color: #5469d4;\n}\n.MuiButton-label {\n  color: #fff;\n}\n```\n\n**GlobalCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function GlobalCssButton() {\n  return <Button>Customized</Button>;\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n## Styled Components\n\n![estrelas](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\n\nThe `styled()` method works perfectly on all of the components.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`. The best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\n\n### Elementos mais profundos\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself. It also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \"consuming\" properties that should not be passed on to the underlying component.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsDeep.js\"}}\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(({ color, ...other }) => (\n  <Button classes={{ label: 'label' }} {...other} />\n))`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\n### Tema\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\nconst StyledButton = styled(Button)`\n  ${({ theme }) => `\n  background-color: ${theme.palette.primary.main};\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n  ${theme.breakpoints.up('sm')} {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  `}\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsTheme.js\"}}\n\n### Portals\n\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Because of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\n\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. The following example shows a workaround:\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst StyledMenu = styled(({ className, ...props }) => (\n  <Menu {...props} classes={{ paper: className }} />\n))`\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsPortal.js\"}}\n\n## M\xf3dulos CSS\n\n![estrelas](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\n\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the bundling solution people are using.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\n\n**CssModulesButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**CssModulesButton.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButton.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className={styles.button}>Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Elementos mais profundos\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**CssModulesButtonDeep.css**\n\n```css\n.root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.root:hover {\n  background-color: #5469d4;\n}\n.label {\n  color: #fff;\n}\n```\n\n**CssModulesButtonDeep.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButtonDeep.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={styles}>Customized</Button>\n    </div>\n  );\n}\n```\n\n## Emotion\n\n![estrelas](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\n\n### The `css` prop\n\nEmotion's **css()** method works seamlessly with Material-UI.\n\n{{\"demo\": \"pages/guides/interoperability/EmotionCSS.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\n\n```jsx\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\n\nexport default function EmotionCSS() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button\n        css={css`\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        `}\n      >\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Tema\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\n<Button\n  css={theme => css`\n    background-color: ${theme.palette.primary.main};\n    color: #fff;\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n    padding: 4px 10px;\n    font-size: 13px;\n    &:hover {\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\n    }\n    ${theme.breakpoints.up('sm')} {\n      font-size: 14px;\n      padding: 7px 14px;\n    }\n  `}\n>\n  Customized\n</Button>\n```\n\n{{\"demo\": \"pages/guides/interoperability/EmotionTheme.js\"}}\n\n### The `styled()` API\n\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components)."},"+mgL":function(n,e){n.exports="import React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport NoSsr from '@material-ui/core/NoSsr';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <NoSsr>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </NoSsr>\n  );\n}\n"},"3IaU":function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return b}));var o=t("kGIj"),r=t("mXGw"),s=t.n(r),a=t("UutA"),i=t("WKBU"),l=t("mKyP"),d=t("cYeA"),c=t("h7Hf"),u=t("O8uh"),p=s.a.createElement;function m(){var n=Object(o.a)(["\n  ","\n"]);return m=function(){return n},n}var h=Object(l.a)({palette:{primary:{main:"#6772e5"}}}),f=Object(a.b)(u.a)(m(),(function(n){var e=n.theme;return"\n  background-color: ".concat(e.palette.primary.main,";\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ").concat(Object(d.darken)(e.palette.primary.main,.2),";\n  }\n  ").concat(e.breakpoints.up("sm")," {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  ")})),y=p(i.a,null,p(c.a,{theme:h},p(a.a,{theme:h},p(u.a,null,"Default"),p(f,null,"Customized"))));function b(){return y}},"3xmD":function(n,e,t){"use strict";t.d(e,"a",(function(){return o})),t.d(e,"b",(function(){return r}));function o(n,e,t){var o="";return t.split(" ").forEach((function(t){void 0!==n[t]?e.push(n[t]):o+=t+" "})),o}var r=function(n,e,t){var o=n.key+"-"+e.name;if(!1===t&&void 0===n.registered[o]&&(n.registered[o]=e.styles),void 0===n.inserted[e.name]){var r=e;do{n.insert("."+o,r,n.sheet,!0);r=r.next}while(void 0!==r)}}},5893:function(n,e,t){"use strict";t.d(e,"a",(function(){return u}));var o=t("OvAC"),r=t.n(o),s=t("mXGw"),a=t("aD51"),i=t("kgi3");t("8VmE"),t("GeWT");function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}var d=function(n,e){return"function"===typeof e?e(n):function(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(t,!0).forEach((function(e){r()(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(t).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}({},n,{},e)},c=Object(i.a)((function(n){return Object(i.a)((function(e){return d(n,e)}))})),u=function(n){return Object(s.createElement)(a.a.Consumer,null,(function(e){return n.theme!==e&&(e=c(e)(n.theme)),Object(s.createElement)(a.a.Provider,{value:e},n.children)}))}},"5IsQ":function(n,e){var t,o,r=n.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function i(n){if(t===setTimeout)return setTimeout(n,0);if((t===s||!t)&&setTimeout)return t=setTimeout,setTimeout(n,0);try{return t(n,0)}catch(e){try{return t.call(null,n,0)}catch(e){return t.call(this,n,0)}}}!function(){try{t="function"===typeof setTimeout?setTimeout:s}catch(n){t=s}try{o="function"===typeof clearTimeout?clearTimeout:a}catch(n){o=a}}();var l,d=[],c=!1,u=-1;function p(){c&&l&&(c=!1,l.length?d=l.concat(d):u=-1,d.length&&m())}function m(){if(!c){var n=i(p);c=!0;for(var e=d.length;e;){for(l=d,d=[];++u<e;)l&&l[u].run();u=-1,e=d.length}l=null,c=!1,function(n){if(o===clearTimeout)return clearTimeout(n);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(n);try{o(n)}catch(e){try{return o.call(null,n)}catch(e){return o.call(this,n)}}}(n)}}function h(n,e){this.fun=n,this.array=e}function f(){}r.nextTick=function(n){var e=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)e[t-1]=arguments[t];d.push(new h(n,e)),1!==d.length||c||i(m)},h.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(n){return[]},r.binding=function(n){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(n){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},"61z2":function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return f}));var o=t("kGIj"),r=t("mXGw"),s=t.n(r),a=t("aD51"),i=t("O8uh"),l=t("5893"),d=t("mKyP"),c=t("h7Hf"),u=t("cYeA");s.a.createElement;function p(){var n=Object(o.a)(["\n            background-color: ",";\n            color: #fff;\n            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n            padding: 4px 10px;\n            font-size: 13px;\n            &:hover {\n              background-color: ",";\n            }\n            "," {\n              font-size: 14px;\n              padding: 7px 14px;\n            }\n          "]);return p=function(){return n},n}var m=Object(d.a)({palette:{primary:{main:"#6772e5"}}}),h=Object(a.c)(i.a,null,"Default");function f(){return Object(a.c)(c.a,{theme:m},Object(a.c)(l.a,{theme:m},h,Object(a.c)(i.a,{css:function(n){return Object(a.b)(p(),n.palette.primary.main,Object(u.darken)(n.palette.primary.main,.2),n.breakpoints.up("sm"))}},"Customized")))}},"81nG":function(n,e,t){n.exports=t("xLO/")},"8S9M":function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return c}));var o=t("kGIj"),r=t("mXGw"),s=t.n(r),a=t("aD51"),i=t("O8uh");s.a.createElement;function l(){var n=Object(o.a)(["\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        "]);return l=function(){return n},n}var d=Object(a.c)(i.a,null,"Default");function c(){return Object(a.c)("div",null,d,Object(a.c)(i.a,{css:Object(a.b)(l())},"Customized"))}},"8VmE":function(n,e){function t(){return n.exports=t=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n},t.apply(this,arguments)}n.exports=t},"A/oB":function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return m}));var o=t("kGIj"),r=t("mXGw"),s=t.n(r),a=t("UutA"),i=t("O8uh"),l=t("WKBU"),d=s.a.createElement;function c(){var n=Object(o.a)(["\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n"]);return c=function(){return n},n}var u=Object(a.b)(i.a)(c()),p=d(l.a,null,d(i.a,null,"Default"),d(u,null,"Customized"));function m(){return p}},CQ1A:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return c}));var o=t("kGIj"),r=t("mXGw"),s=t.n(r),a=t("aD51"),i=t("O8uh");s.a.createElement;function l(){var n=Object(o.a)(["\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        "]);return l=function(){return n},n}var d=Object(a.c)(i.a,null,"Default");function c(){return Object(a.c)("div",null,d,Object(a.c)(i.a,{css:Object(a.b)(l())},"Customized"))}},CalN:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/interoperability",function(){return t("hpSN")}])},E1Do:function(n,e){n.exports="import React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport NoSsr from '@material-ui/core/NoSsr';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <NoSsr>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </NoSsr>\n  );\n}\n"},EcaT:function(n,e){n.exports="import React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst StyledMenu = styled(({ className, ...props }) => (\n  <Menu {...props} classes={{ paper: className }} />\n))`\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nexport default function StyledComponentsPortal() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <Button\n        aria-owns={anchorEl ? 'simple-menu' : undefined}\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleClick}\n      >\n        Open Menu\n      </Button>\n      <StyledMenu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        getContentAnchorEl={null}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <MenuItem onClick={handleClose}>Profile</MenuItem>\n        <MenuItem onClick={handleClose}>My account</MenuItem>\n        <MenuItem onClick={handleClose}>Logout</MenuItem>\n      </StyledMenu>\n    </div>\n  );\n}\n"},F56x:function(n,e){n.exports=function(n,e,t,o){var r=t?t.call(o,n,e):void 0;if(void 0!==r)return!!r;if(n===e)return!0;if("object"!==typeof n||!n||"object"!==typeof e||!e)return!1;var s=Object.keys(n),a=Object.keys(e);if(s.length!==a.length)return!1;for(var i=Object.prototype.hasOwnProperty.bind(e),l=0;l<s.length;l++){var d=s[l];if(!i(d))return!1;var c=n[d],u=e[d];if(!1===(r=t?t.call(o,c,u,d):void 0)||void 0===r&&c!==u)return!1}return!0}},FhD9:function(n,e,t){"use strict";e.a=function(n){function e(n,e,o){var r=e.trim().split(h);e=r;var s=r.length,a=n.length;switch(a){case 0:case 1:var i=0;for(n=0===a?"":n[0]+" ";i<s;++i)e[i]=t(n,e[i],o).trim();break;default:var l=i=0;for(e=[];i<s;++i)for(var d=0;d<a;++d)e[l++]=t(n[d]+" ",r[i],o).trim()}return e}function t(n,e,t){var o=e.charCodeAt(0);switch(33>o&&(o=(e=e.trim()).charCodeAt(0)),o){case 38:return e.replace(f,"$1"+n.trim());case 58:return n.trim()+e.replace(f,"$1"+n.trim());default:if(0<1*t&&0<e.indexOf("\f"))return e.replace(f,(58===n.charCodeAt(0)?"":"$1")+n.trim())}return n+e}function o(n,e,t,s){var a=n+";",i=2*e+3*t+4*s;if(944===i){n=a.indexOf(":",9)+1;var l=a.substring(n,a.length-1).trim();return l=a.substring(0,n).trim()+l+";",1===P||2===P&&r(l,1)?"-webkit-"+l+l:l}if(0===P||2===P&&!r(a,1))return a;switch(i){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(j,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(l=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+l+a;case 1005:return p.test(a)?a.replace(u,":-webkit-")+a.replace(u,":-moz-")+a:a;case 1e3:switch(e=(l=a.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(e)){case 226:l=a.replace(x,"tb");break;case 232:l=a.replace(x,"tb-rl");break;case 220:l=a.replace(x,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+l+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(e=(a=n).length-10,i=(l=(33===a.charCodeAt(e)?a.substring(0,e):a).substring(n.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:a=a.replace(l,"-webkit-"+l)+";"+a;break;case 207:case 102:a=a.replace(l,"-webkit-"+(102<i?"inline-":"")+"box")+";"+a.replace(l,"-webkit-"+l)+";"+a.replace(l,"-ms-"+l+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return l=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+l+"-ms-flex-"+l+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(S,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(S,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===C.test(n))return 115===(l=n.substring(n.indexOf(":")+1)).charCodeAt(0)?o(n.replace("stretch","fill-available"),e,t,s).replace(":fill-available",":stretch"):a.replace(l,"-webkit-"+l)+a.replace(l,"-moz-"+l.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===t+s&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(m,"$1-webkit-$2")+a}return a}function r(n,e){var t=n.indexOf(1===e?":":"{"),o=n.substring(0,3!==e?t:10);return t=n.substring(t+1,n.length-1),A(2!==e?o:o.replace(B,"$1"),t,e)}function s(n,e){var t=o(e,e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2));return t!==e+";"?t.replace(w," or ($1)").substring(4):"("+e+")"}function a(n,e,t,o,r,s,a,i,d,c){for(var u,p=0,m=e;p<E;++p)switch(u=T[p].call(l,n,m,t,o,r,s,a,i,d,c)){case void 0:case!1:case!0:case null:break;default:m=u}if(m!==e)return m}function i(n){return void 0!==(n=n.prefix)&&(A=null,n?"function"!==typeof n?P=1:(P=2,A=n):P=0),i}function l(n,t){var i=n;if(33>i.charCodeAt(0)&&(i=i.trim()),i=[i],0<E){var l=a(-1,t,i,i,M,k,0,0,0,0);void 0!==l&&"string"===typeof l&&(t=l)}var u=function n(t,i,l,u,p){for(var m,h,f,x,w,S=0,B=0,C=0,j=0,T=0,A=0,O=f=m=0,N=0,U=0,R=0,H=0,Y=l.length,$=Y-1,G="",F="",_="",J="";N<Y;){if(h=l.charCodeAt(N),N===$&&0!==B+j+C+S&&(0!==B&&(h=47===B?10:47),j=C=S=0,Y++,$++),0===B+j+C+S){if(N===$&&(0<U&&(G=G.replace(c,"")),0<G.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:G+=l.charAt(N)}h=59}switch(h){case 123:for(m=(G=G.trim()).charCodeAt(0),f=1,H=++N;N<Y;){switch(h=l.charCodeAt(N)){case 123:f++;break;case 125:f--;break;case 47:switch(h=l.charCodeAt(N+1)){case 42:case 47:n:{for(O=N+1;O<$;++O)switch(l.charCodeAt(O)){case 47:if(42===h&&42===l.charCodeAt(O-1)&&N+2!==O){N=O+1;break n}break;case 10:if(47===h){N=O+1;break n}}N=O}}break;case 91:h++;case 40:h++;case 34:case 39:for(;N++<$&&l.charCodeAt(N)!==h;);}if(0===f)break;N++}switch(f=l.substring(H,N),0===m&&(m=(G=G.replace(d,"").trim()).charCodeAt(0)),m){case 64:switch(0<U&&(G=G.replace(c,"")),h=G.charCodeAt(1)){case 100:case 109:case 115:case 45:U=i;break;default:U=D}if(H=(f=n(i,U,f,h,p+1)).length,0<E&&(w=a(3,f,U=e(D,G,R),i,M,k,H,h,p,u),G=U.join(""),void 0!==w&&0===(H=(f=w.trim()).length)&&(h=0,f="")),0<H)switch(h){case 115:G=G.replace(v,s);case 100:case 109:case 45:f=G+"{"+f+"}";break;case 107:f=(G=G.replace(y,"$1 $2"))+"{"+f+"}",f=1===P||2===P&&r("@"+f,3)?"@-webkit-"+f+"@"+f:"@"+f;break;default:f=G+f,112===u&&(F+=f,f="")}else f="";break;default:f=n(i,e(i,G,R),f,u,p+1)}_+=f,f=R=U=O=m=0,G="",h=l.charCodeAt(++N);break;case 125:case 59:if(1<(H=(G=(0<U?G.replace(c,""):G).trim()).length))switch(0===O&&(m=G.charCodeAt(0),45===m||96<m&&123>m)&&(H=(G=G.replace(" ",":")).length),0<E&&void 0!==(w=a(1,G,i,t,M,k,F.length,u,p,u))&&0===(H=(G=w.trim()).length)&&(G="\0\0"),m=G.charCodeAt(0),h=G.charCodeAt(1),m){case 0:break;case 64:if(105===h||99===h){J+=G+l.charAt(N);break}default:58!==G.charCodeAt(H-1)&&(F+=o(G,m,h,G.charCodeAt(2)))}R=U=O=m=0,G="",h=l.charCodeAt(++N)}}switch(h){case 13:case 10:47===B?B=0:0===1+m&&107!==u&&0<G.length&&(U=1,G+="\0"),0<E*z&&a(0,G,i,t,M,k,F.length,u,p,u),k=1,M++;break;case 59:case 125:if(0===B+j+C+S){k++;break}default:switch(k++,x=l.charAt(N),h){case 9:case 32:if(0===j+S+B)switch(T){case 44:case 58:case 9:case 32:x="";break;default:32!==h&&(x=" ")}break;case 0:x="\\0";break;case 12:x="\\f";break;case 11:x="\\v";break;case 38:0===j+B+S&&(U=R=1,x="\f"+x);break;case 108:if(0===j+B+S+I&&0<O)switch(N-O){case 2:112===T&&58===l.charCodeAt(N-3)&&(I=T);case 8:111===A&&(I=A)}break;case 58:0===j+B+S&&(O=N);break;case 44:0===B+C+j+S&&(U=1,x+="\r");break;case 34:case 39:0===B&&(j=j===h?0:0===j?h:j);break;case 91:0===j+B+C&&S++;break;case 93:0===j+B+C&&S--;break;case 41:0===j+B+S&&C--;break;case 40:if(0===j+B+S){if(0===m)switch(2*T+3*A){case 533:break;default:m=1}C++}break;case 64:0===B+C+j+S+O+f&&(f=1);break;case 42:case 47:if(!(0<j+S+C))switch(B){case 0:switch(2*h+3*l.charCodeAt(N+1)){case 235:B=47;break;case 220:H=N,B=42}break;case 42:47===h&&42===T&&H+2!==N&&(33===l.charCodeAt(H+2)&&(F+=l.substring(H,N+1)),x="",B=0)}}0===B&&(G+=x)}A=T,T=h,N++}if(0<(H=F.length)){if(U=i,0<E&&(void 0!==(w=a(2,F,U,t,M,k,H,u,p,u))&&0===(F=w).length))return J+F+_;if(F=U.join(",")+"{"+F+"}",0!==P*I){switch(2!==P||r(F,2)||(I=0),I){case 111:F=F.replace(g,":-moz-$1")+F;break;case 112:F=F.replace(b,"::-webkit-input-$1")+F.replace(b,"::-moz-$1")+F.replace(b,":-ms-input-$1")+F}I=0}}return J+F+_}(D,i,t,0,0);return 0<E&&(void 0!==(l=a(-2,u,i,i,M,k,u.length,0,0,0))&&(u=l)),"",I=0,k=M=1,u}var d=/^\0+/g,c=/[\0\r\f]/g,u=/: */g,p=/zoo|gra/,m=/([,: ])(transform)/g,h=/,\r+?/g,f=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,b=/::(place)/g,g=/:(read-only)/g,x=/[svh]\w+-[tblr]{2}/,v=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,S=/-self|flex-/g,B=/[^]*?(:[rp][el]a[\w-]+)[^]*/,C=/stretch|:\s*\w+\-(?:conte|avail)/,j=/([^-])(image-set\()/,k=1,M=1,I=0,P=1,D=[],T=[],E=0,A=null,z=0;return l.use=function n(e){switch(e){case void 0:case null:E=T.length=0;break;default:if("function"===typeof e)T[E++]=e;else if("object"===typeof e)for(var t=0,o=e.length;t<o;++t)n(e[t]);else z=0|!!e}return n},l.set=i,void 0!==n&&i(n),l}},HP4X:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return m}));var o=t("kGIj"),r=t("mXGw"),s=t.n(r),a=t("UutA"),i=t("O8uh"),l=t("WKBU"),d=s.a.createElement;function c(){var n=Object(o.a)(["\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n"]);return c=function(){return n},n}var u=Object(a.b)(i.a)(c()),p=d(l.a,null,d(i.a,null,"Default"),d(u,null,"Customized"));function m(){return p}},"Hlp+":function(n,e){n.exports="# Interop\xe9rabilit\xe9 de la biblioth\xe8que de styles\n\n<p class=\"description\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\n\nThis guide aims to document the most popular alternatives, but you should find that the principals applied here can be adapted to other libraries. There are examples for the following styling solutions:\n\n- [Plain CSS](#plain-css)\n- [CSS global](#global-css)\n- [Styled Components](#styled-components)\n- [CSS Modules](#css-modules)\n- [Emotion](#emotion)\n- [React JSS](#react-jss)\n\n## Plain CSS\n\nNothing fancy, just plain CSS.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\n\n**PlainCssButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**PlainCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className=\"button\">Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**PlainCssButtonDeep.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n.button-label {\n  color: #fff;\n}\n```\n\n**PlainCssButtonDeep.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={{ root: 'button', label: 'button-label' }}>\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n## CSS global\n\nExplicitly providing the class names to the component is too much effort? [You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\n\n**GlobalCssButton.css**\n\n```css\n.MuiButton-root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.MuiButton-root:hover {\n  background-color: #5469d4;\n}\n.MuiButton-label {\n  color: #fff;\n}\n```\n\n**GlobalCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function GlobalCssButton() {\n  return <Button>Customized</Button>;\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n## Styled Components\n\n![stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\n\nThe `styled()` method works perfectly on all of the components.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`. The best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself. It also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \"consuming\" properties that should not be passed on to the underlying component.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsDeep.js\"}}\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(({ color, ...other }) => (\n  <Button classes={{ label: 'label' }} {...other} />\n))`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\n### Th\xe8me\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\nconst StyledButton = styled(Button)`\n  ${({ theme }) => `\n  background-color: ${theme.palette.primary.main};\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n  ${theme.breakpoints.up('sm')} {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  `}\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsTheme.js\"}}\n\n### Portals\n\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Because of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\n\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. The following example shows a workaround:\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst StyledMenu = styled(({ className, ...props }) => (\n  <Menu {...props} classes={{ paper: className }} />\n))`\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsPortal.js\"}}\n\n## CSS Modules\n\n![stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\n\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the bundling solution people are using.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\n\n**CssModulesButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**CssModulesButton.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButton.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className={styles.button}>Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**CssModulesButtonDeep.css**\n\n```css\n.root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.root:hover {\n  background-color: #5469d4;\n}\n.label {\n  color: #fff;\n}\n```\n\n**CssModulesButtonDeep.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButtonDeep.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={styles}>Customized</Button>\n    </div>\n  );\n}\n```\n\n## Emotion\n\n![stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\n\n### The `css` prop\n\nEmotion's **css()** method works seamlessly with Material-UI.\n\n{{\"demo\": \"pages/guides/interoperability/EmotionCSS.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\n\n```jsx\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\n\nexport default function EmotionCSS() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button\n        css={css`\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        `}\n      >\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Th\xe8me\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\n<Button\n  css={theme => css`\n    background-color: ${theme.palette.primary.main};\n    color: #fff;\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n    padding: 4px 10px;\n    font-size: 13px;\n    &:hover {\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\n    }\n    ${theme.breakpoints.up('sm')} {\n      font-size: 14px;\n      padding: 7px 14px;\n    }\n  `}\n>\n  Customized\n</Button>\n```\n\n{{\"demo\": \"pages/guides/interoperability/EmotionTheme.js\"}}\n\n### The `styled()` API\n\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components)."},HwHs:function(n,e,t){"use strict";var o=function(n){for(var e,t=n.length,o=t^t,r=0;t>=4;)e=1540483477*(65535&(e=255&n.charCodeAt(r)|(255&n.charCodeAt(++r))<<8|(255&n.charCodeAt(++r))<<16|(255&n.charCodeAt(++r))<<24))+((1540483477*(e>>>16)&65535)<<16),o=1540483477*(65535&o)+((1540483477*(o>>>16)&65535)<<16)^(e=1540483477*(65535&(e^=e>>>24))+((1540483477*(e>>>16)&65535)<<16)),t-=4,++r;switch(t){case 3:o^=(255&n.charCodeAt(r+2))<<16;case 2:o^=(255&n.charCodeAt(r+1))<<8;case 1:o=1540483477*(65535&(o^=255&n.charCodeAt(r)))+((1540483477*(o>>>16)&65535)<<16)}return o=1540483477*(65535&(o^=o>>>13))+((1540483477*(o>>>16)&65535)<<16),((o^=o>>>15)>>>0).toString(36)},r=t("Zxfz"),s=t("M8e6");t.d(e,"a",(function(){return f}));var a=/[A-Z]|^ms/g,i=/_EMO_([^_]+?)_([^]*?)_EMO_/g,l=function(n){return 45===n.charCodeAt(1)},d=function(n){return null!=n&&"boolean"!==typeof n},c=Object(s.a)((function(n){return l(n)?n:n.replace(a,"-$&").toLowerCase()})),u=function(n,e){switch(n){case"animation":case"animationName":if("string"===typeof e)return e.replace(i,(function(n,e,t){return m={name:e,styles:t,next:m},e}))}return 1===r.a[n]||l(n)||"number"!==typeof e||0===e?e:e+"px"};function p(n,e,t,o){if(null==t)return"";if(void 0!==t.__emotion_styles)return t;switch(typeof t){case"boolean":return"";case"object":if(1===t.anim)return m={name:t.name,styles:t.styles,next:m},t.name;if(void 0!==t.styles){var r=t.next;if(void 0!==r)for(;void 0!==r;)m={name:r.name,styles:r.styles,next:m},r=r.next;return t.styles+";"}return function(n,e,t){var o="";if(Array.isArray(t))for(var r=0;r<t.length;r++)o+=p(n,e,t[r],!1);else for(var s in t){var a=t[s];if("object"!==typeof a)null!=e&&void 0!==e[a]?o+=s+"{"+e[a]+"}":d(a)&&(o+=c(s)+":"+u(s,a)+";");else if(!Array.isArray(a)||"string"!==typeof a[0]||null!=e&&void 0!==e[a[0]]){var i=p(n,e,a,!1);switch(s){case"animation":case"animationName":o+=c(s)+":"+i+";";break;default:o+=s+"{"+i+"}"}}else for(var l=0;l<a.length;l++)d(a[l])&&(o+=c(s)+":"+u(s,a[l])+";")}return o}(n,e,t);case"function":if(void 0!==n){var s=m,a=t(n);return m=s,p(n,e,a,o)}break;case"string":}if(null==e)return t;var i=e[t];return void 0===i||o?t:i}var m,h=/label:\s*([^\s;\n{]+)\s*;/g;var f=function(n,e,t){if(1===n.length&&"object"===typeof n[0]&&null!==n[0]&&void 0!==n[0].styles)return n[0];var r=!0,s="";m=void 0;var a=n[0];null==a||void 0===a.raw?(r=!1,s+=p(t,e,a,!1)):s+=a[0];for(var i=1;i<n.length;i++)s+=p(t,e,n[i],46===s.charCodeAt(s.length-1)),r&&(s+=a[i]);h.lastIndex=0;for(var l,d="";null!==(l=h.exec(s));)d+="-"+l[1];return{name:o(s)+d,styles:s,next:m}}},"Jq+A":function(n,e,t){var o={"./EmotionCSS.js":"CQ1A","./EmotionCSS.tsx":"8S9M","./EmotionTheme.js":"61z2","./EmotionTheme.tsx":"yWcT","./StyledComponents.js":"A/oB","./StyledComponents.tsx":"pfvL","./StyledComponentsDeep.js":"HP4X","./StyledComponentsDeep.tsx":"Wd+q","./StyledComponentsPortal.js":"LuWk","./StyledComponentsPortal.tsx":"nBrM","./StyledComponentsTheme.js":"3IaU","./StyledComponentsTheme.tsx":"whv5","./interoperability-aa.md":"r02S","./interoperability-de.md":"TFNv","./interoperability-es.md":"LKX5","./interoperability-fr.md":"Hlp+","./interoperability-ja.md":"r3IF","./interoperability-pt.md":"+UR7","./interoperability-ru.md":"OzmB","./interoperability-zh.md":"w0+M","./interoperability.md":"UIBU"};function r(n){var e=s(n);return t(e)}function s(n){if(!t.o(o,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return o[n]}r.keys=function(){return Object.keys(o)},r.resolve=s,n.exports=r,r.id="Jq+A"},LKX5:function(n,e){n.exports="# Interoperabilidad de la biblioteca de estilos\n\n<p class=\"description\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\n\nThis guide aims to document the most popular alternatives, but you should find that the principals applied here can be adapted to other libraries. There are examples for the following styling solutions:\n\n- [Plain CSS](#plain-css)\n- [Global CSS](#global-css)\n- [Styled Components](#styled-components)\n- [CSS Modules](#css-modules)\n- [Emotion](#emotion)\n- [React JSS](#react-jss)\n\n## Plain CSS\n\nNothing fancy, just plain CSS.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\n\n**PlainCssButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**PlainCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className=\"button\">Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**PlainCssButtonDeep.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n.button-label {\n  color: #fff;\n}\n```\n\n**PlainCssButtonDeep.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={{ root: 'button', label: 'button-label' }}>\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n## Global CSS\n\nExplicitly providing the class names to the component is too much effort? [You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\n\n**GlobalCssButton.css**\n\n```css\n.MuiButton-root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.MuiButton-root:hover {\n  background-color: #5469d4;\n}\n.MuiButton-label {\n  color: #fff;\n}\n```\n\n**GlobalCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function GlobalCssButton() {\n  return <Button>Customized</Button>;\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n## Styled Components\n\n![estrellas](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\n\nThe `styled()` method works perfectly on all of the components.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`. The best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself. It also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \"consuming\" properties that should not be passed on to the underlying component.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsDeep.js\"}}\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(({ color, ...other }) => (\n  <Button classes={{ label: 'label' }} {...other} />\n))`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\n### Tema\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\nconst StyledButton = styled(Button)`\n  ${({ theme }) => `\n  background-color: ${theme.palette.primary.main};\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n  ${theme.breakpoints.up('sm')} {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  `}\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsTheme.js\"}}\n\n### Portals\n\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Because of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\n\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. The following example shows a workaround:\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst StyledMenu = styled(({ className, ...props }) => (\n  <Menu {...props} classes={{ paper: className }} />\n))`\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsPortal.js\"}}\n\n## CSS Modules\n\n![estrellas](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\n\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the bundling solution people are using.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\n\n**CssModulesButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**CssModulesButton.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButton.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className={styles.button}>Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**CssModulesButtonDeep.css**\n\n```css\n.root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.root:hover {\n  background-color: #5469d4;\n}\n.label {\n  color: #fff;\n}\n```\n\n**CssModulesButtonDeep.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButtonDeep.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={styles}>Customized</Button>\n    </div>\n  );\n}\n```\n\n## Emotion\n\n![estrellas](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\n\n### The `css` prop\n\nEmotion's **css()** method works seamlessly with Material-UI.\n\n{{\"demo\": \"pages/guides/interoperability/EmotionCSS.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\n\n```jsx\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\n\nexport default function EmotionCSS() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button\n        css={css`\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        `}\n      >\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Tema\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\n<Button\n  css={theme => css`\n    background-color: ${theme.palette.primary.main};\n    color: #fff;\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n    padding: 4px 10px;\n    font-size: 13px;\n    &:hover {\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\n    }\n    ${theme.breakpoints.up('sm')} {\n      font-size: 14px;\n      padding: 7px 14px;\n    }\n  `}\n>\n  Customized\n</Button>\n```\n\n{{\"demo\": \"pages/guides/interoperability/EmotionTheme.js\"}}\n\n### The `styled()` API\n\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components)."},LURK:function(n,e){n.exports="/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\nimport { ThemeProvider } from 'emotion-theming';\nimport {\n  createMuiTheme,\n  ThemeProvider as MuiThemeProvider,\n  darken,\n} from '@material-ui/core/styles';\n\nconst customTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#6772e5',\n    },\n  },\n});\n\nexport default function EmotionTheme() {\n  return (\n    <MuiThemeProvider theme={customTheme}>\n      <ThemeProvider theme={customTheme}>\n        <Button>Default</Button>\n        <Button\n          css={theme => css`\n            background-color: ${theme.palette.primary.main};\n            color: #fff;\n            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n            padding: 4px 10px;\n            font-size: 13px;\n            &:hover {\n              background-color: ${darken(theme.palette.primary.main, 0.2)};\n            }\n            ${theme.breakpoints.up('sm')} {\n              font-size: 14px;\n              padding: 7px 14px;\n            }\n          `}\n        >\n          Customized\n        </Button>\n      </ThemeProvider>\n    </MuiThemeProvider>\n  );\n}\n"},LuWk:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return f}));var o=t("z3IF"),r=t("2Fjn"),s=t("kGIj"),a=t("mXGw"),i=t.n(a),l=t("UutA"),d=t("O8uh"),c=t("DmyM"),u=t("2zfq"),p=i.a.createElement;function m(){var n=Object(s.a)(["\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n"]);return m=function(){return n},n}var h=Object(l.b)((function(n){var e=n.className,t=Object(r.a)(n,["className"]);return p(c.a,Object(o.a)({},t,{classes:{paper:e}}))}))(m());function f(){var n=i.a.useState(null),e=n[0],t=n[1],o=function(){t(null)};return p("div",null,p(d.a,{"aria-owns":e?"simple-menu":void 0,"aria-haspopup":"true",variant:"contained",color:"primary",onClick:function(n){t(n.currentTarget)}},"Open Menu"),p(h,{id:"simple-menu",anchorEl:e,open:Boolean(e),onClose:o,getContentAnchorEl:null,anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},p(u.a,{onClick:o},"Profile"),p(u.a,{onClick:o},"My account"),p(u.a,{onClick:o},"Logout")))}},M8e6:function(n,e,t){"use strict";e.a=function(n){var e={};return function(t){return void 0===e[t]&&(e[t]=n(t)),e[t]}}},NrWm:function(n,e,t){"use strict";var o=t("M8e6"),r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,s=Object(o.a)((function(n){return r.test(n)||111===n.charCodeAt(0)&&110===n.charCodeAt(1)&&n.charCodeAt(2)<91}));e.a=s},OvAC:function(n,e){n.exports=function(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}},OzmB:function(n,e){n.exports="# Style Library Interoperability\n\n<p class=\"description\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\n\nThis guide aims to document the most popular alternatives, but you should find that the principals applied here can be adapted to other libraries. There are examples for the following styling solutions:\n\n- [Plain CSS](#plain-css)\n- [\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 CSS](#global-css)\n- [Styled Components](#styled-components)\n- [CSS Modules](#css-modules)\n- [Emotion](#emotion)\n- [React JSS](#react-jss)\n\n## Plain CSS\n\nNothing fancy, just plain CSS.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\n\n**PlainCssButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**PlainCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className=\"button\">Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**PlainCssButtonDeep.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n.button-label {\n  color: #fff;\n}\n```\n\n**PlainCssButtonDeep.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={{ root: 'button', label: 'button-label' }}>\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n## \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 CSS\n\nExplicitly providing the class names to the component is too much effort? [You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\n\n**GlobalCssButton.css**\n\n```css\n.MuiButton-root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.MuiButton-root:hover {\n  background-color: #5469d4;\n}\n.MuiButton-label {\n  color: #fff;\n}\n```\n\n**GlobalCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function GlobalCssButton() {\n  return <Button>Customized</Button>;\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n## Styled Components\n\n![stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\n\nThe `styled()` method works perfectly on all of the components.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`. The best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself. It also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \"consuming\" properties that should not be passed on to the underlying component.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsDeep.js\"}}\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(({ color, ...other }) => (\n  <Button classes={{ label: 'label' }} {...other} />\n))`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\n### Theme\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\nconst StyledButton = styled(Button)`\n  ${({ theme }) => `\n  background-color: ${theme.palette.primary.main};\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n  ${theme.breakpoints.up('sm')} {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  `}\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsTheme.js\"}}\n\n### Portals\n\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Because of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\n\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. The following example shows a workaround:\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst StyledMenu = styled(({ className, ...props }) => (\n  <Menu {...props} classes={{ paper: className }} />\n))`\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsPortal.js\"}}\n\n## CSS Modules\n\n![stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\n\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the bundling solution people are using.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\n\n**CssModulesButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**CssModulesButton.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButton.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className={styles.button}>Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**CssModulesButtonDeep.css**\n\n```css\n.root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.root:hover {\n  background-color: #5469d4;\n}\n.label {\n  color: #fff;\n}\n```\n\n**CssModulesButtonDeep.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButtonDeep.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={styles}>Customized</Button>\n    </div>\n  );\n}\n```\n\n## Emotion\n\n![stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\n\n### The `css` prop\n\nEmotion's **css()** method works seamlessly with Material-UI.\n\n{{\"demo\": \"pages/guides/interoperability/EmotionCSS.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\n\n```jsx\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\n\nexport default function EmotionCSS() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button\n        css={css`\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        `}\n      >\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Theme\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\n<Button\n  css={theme => css`\n    background-color: ${theme.palette.primary.main};\n    color: #fff;\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n    padding: 4px 10px;\n    font-size: 13px;\n    &:hover {\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\n    }\n    ${theme.breakpoints.up('sm')} {\n      font-size: 14px;\n      padding: 7px 14px;\n    }\n  `}\n>\n  Customized\n</Button>\n```\n\n{{\"demo\": \"pages/guides/interoperability/EmotionTheme.js\"}}\n\n### The `styled()` API\n\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components)."},QKC2:function(n,e){n.exports=function(n,e){n.prototype=Object.create(e.prototype),n.prototype.constructor=n,n.__proto__=e}},SPFu:function(n,e){n.exports="import React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport NoSsr from '@material-ui/core/NoSsr';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <NoSsr>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </NoSsr>\n  );\n}\n"},TFNv:function(n,e){n.exports="# Interoperabilit\xe4t der Stilbibliothek\n\n<p class=\"description\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\n\nIn diesem Handbuch sollen die beliebtesten Alternativen dokumentiert werden, aber Sie sollten sich merken, dass die hier vorgestellten Anwendungen an andere Bibliotheken angepasst werden k\xf6nnen. There are examples for the following styling solutions:\n\n- [Einfaches CSS](#plain-css)\n- [Globales CSS](#global-css)\n- [Styled Components](#styled-components)\n- [CSS Modules](#styled-components)\n- [Emotion](#css-modules)\n- [React JSS](#emotion)\n\n## Einfaches CSS\n\nNothing fancy, just plain CSS.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\n\n**PlainCssButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**PlainCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className=\"button\">Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Tiefere Elemente\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**PlainCssButtonDeep.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n.button-label {\n  color: #fff;\n}\n```\n\n**PlainCssButtonDeep.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={{ root: 'button', label: 'button-label' }}>\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n## Globales CSS\n\nExplicitly providing the class names to the component is too much effort? [You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\n\n**GlobalCssButton.css**\n\n```css\n.MuiButton-root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.MuiButton-root:hover {\n  background-color: #5469d4;\n}\n.MuiButton-label {\n  color: #fff;\n}\n```\n\n**GlobalCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function GlobalCssButton() {\n  return <Button>Customized</Button>;\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n## Styled Components\n\n![stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\n\nThe `styled()` method works perfectly on all of the components.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`. The best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\n\n### Tiefere Elemente\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself. It also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \"consuming\" properties that should not be passed on to the underlying component.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsDeep.js\"}}\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(({ color, ...other }) => (\n  <Button classes={{ label: 'label' }} {...other} />\n))`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\n### Theme\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\nconst StyledButton = styled(Button)`\n  ${({ theme }) => `\n  background-color: ${theme.palette.primary.main};\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n  ${theme.breakpoints.up('sm')} {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  `}\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsTheme.js\"}}\n\n### Portals\n\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Because of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\n\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. The following example shows a workaround:\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst StyledMenu = styled(({ className, ...props }) => (\n  <Menu {...props} classes={{ paper: className }} />\n))`\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsPortal.js\"}}\n\n## CSS Modules\n\n![stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\n\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the bundling solution people are using.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\n\n**CssModulesButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**CssModulesButton.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButton.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className={styles.button}>Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Tiefere Elemente\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**CssModulesButtonDeep.css**\n\n```css\n.root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.root:hover {\n  background-color: #5469d4;\n}\n.label {\n  color: #fff;\n}\n```\n\n**CssModulesButtonDeep.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButtonDeep.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={styles}>Customized</Button>\n    </div>\n  );\n}\n```\n\n## Emotion\n\n![stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\n\n### The `css` prop\n\nEmotion's **css()** method works seamlessly with Material-UI.\n\n{{\"demo\": \"pages/guides/interoperability/EmotionCSS.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\n\n```jsx\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\n\nexport default function EmotionCSS() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button\n        css={css`\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        `}\n      >\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Theme\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\n<Button\n  css={theme => css`\n    background-color: ${theme.palette.primary.main};\n    color: #fff;\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n    padding: 4px 10px;\n    font-size: 13px;\n    &:hover {\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\n    }\n    ${theme.breakpoints.up('sm')} {\n      font-size: 14px;\n      padding: 7px 14px;\n    }\n  `}\n>\n  Customized\n</Button>\n```\n\n{{\"demo\": \"pages/guides/interoperability/EmotionTheme.js\"}}\n\n### The `styled()` API\n\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components)."},UIBU:function(n,e){n.exports="# Style Library Interoperability\n\n<p class=\"description\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\n\nThis guide aims to document the most popular alternatives,\nbut you should find that the principals applied here can be adapted to other libraries.\nThere are examples for the following styling solutions:\n\n- [Plain CSS](#plain-css)\n- [Global CSS](#global-css)\n- [Styled Components](#styled-components)\n- [CSS Modules](#css-modules)\n- [Emotion](#emotion)\n- [React JSS](#react-jss)\n\n## Plain CSS\n\nNothing fancy, just plain CSS.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\n\n**PlainCssButton.css**\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**PlainCssButton.js**\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className=\"button\">Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent,\nyou will likely need to affect the Drawer's child paper element.\nHowever, the paper is not the root element of Drawer and therefore styled-components customization as above will not work.\nYou need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**PlainCssButtonDeep.css**\n```css\n.button {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n.button-label {\n  color: #fff;\n}\n```\n\n**PlainCssButtonDeep.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={{ root: 'button', label: 'button-label' }}>\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n## Global CSS\n\nExplicitly providing the class names to the component is too much effort?\n[You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\n\n**GlobalCssButton.css**\n```css\n.MuiButton-root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.MuiButton-root:hover {\n  background-color: #5469d4;\n}\n.MuiButton-label {\n  color: #fff;\n}\n```\n\n**GlobalCssButton.js**\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function GlobalCssButton() {\n  return <Button>Customized</Button>;\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n## Styled Components\n\n![stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star)\n![npm](https://img.shields.io/npm/dm/styled-components.svg?)\n\nThe `styled()` method works perfectly on all of the components.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`.\nThe best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent,\nyou will likely need to affect the Drawer's child paper element.\nHowever, the paper is not the root element of Drawer and therefore styled-components customization as above will not work.\nYou need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\nIt also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \"consuming\" properties that should not be passed on to the underlying component.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsDeep.js\"}}\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(({ color, ...other }) => (\n  <Button classes={{ label: 'label' }} {...other} />\n))`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\n### Theme\n\nMaterial-UI has a rich theme structure that you can leverage for\nthe color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\nconst StyledButton = styled(Button)`\n  ${({ theme }) => `\n  background-color: ${theme.palette.primary.main};\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n  ${theme.breakpoints.up('sm')} {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  `}\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsTheme.js\"}}\n\n### Portals\n\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\nBecause of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\n\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`,\nyou will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy.\nThe following example shows a workaround:\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst StyledMenu = styled(({ className, ...props }) => (\n  <Menu {...props} classes={{ paper: className }} />\n))`\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsPortal.js\"}}\n\n## CSS Modules\n\n![stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\n\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the\nbundling solution people are using.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\n\n**CssModulesButton.css**\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**CssModulesButton.js**\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButton.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className={styles.button}>Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent,\nyou will likely need to affect the Drawer's child paper element.\nHowever, the paper is not the root element of Drawer and therefore styled-components customization as above will not work.\nYou need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**CssModulesButtonDeep.css**\n```css\n.root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.root:hover {\n  background-color: #5469d4;\n}\n.label {\n  color: #fff;\n}\n```\n\n**CssModulesButtonDeep.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButtonDeep.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={styles}>Customized</Button>\n    </div>\n  );\n}\n```\n\n## Emotion\n\n![stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star)\n![npm](https://img.shields.io/npm/dm/emotion.svg?)\n\n### The `css` prop\n\nEmotion's **css()** method works seamlessly with Material-UI.\n\n{{\"demo\": \"pages/guides/interoperability/EmotionCSS.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\n\n```jsx\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\n\nexport default function EmotionCSS() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button\n        css={css`\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        `}\n      >\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Theme\n\nMaterial-UI has a rich theme structure that you can leverage for\nthe color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\n<Button\n  css={theme => css`\n    background-color: ${theme.palette.primary.main};\n    color: #fff;\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n    padding: 4px 10px;\n    font-size: 13px;\n    &:hover {\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\n    }\n    ${theme.breakpoints.up('sm')} {\n      font-size: 14px;\n      padding: 7px 14px;\n    }\n  `}\n>\n  Customized\n</Button>\n```\n\n{{\"demo\": \"pages/guides/interoperability/EmotionTheme.js\"}}\n\n### The `styled()` API\n\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components).\n"},UutA:function(n,e,t){"use strict";(function(n){t.d(e,"a",(function(){return Cn}));var o=t("xVO4"),r=t("mXGw"),s=t.n(r),a=(t("F56x"),t("FhD9")),i=t("Zxfz"),l=t("NrWm"),d=t("GeWT"),c=t.n(d);function u(){return(u=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}var p=function(n,e){for(var t=[n[0]],o=0,r=e.length;o<r;o+=1)t.push(e[o],n[o+1]);return t},m=function(n){return"object"===typeof n&&n.constructor===Object},h=Object.freeze([]),f=Object.freeze({});function y(n){return"function"===typeof n}function b(n){return n.displayName||n.name||"Component"}function g(n){return n&&"string"===typeof n.styledComponentId}var x="undefined"!==typeof n&&(Object({ENABLE_AD:void 0,GITHUB_AUTH:void 0,LIB_VERSION:"4.9.5",REACT_MODE:"legacy"}).REACT_APP_SC_ATTR||Object({ENABLE_AD:void 0,GITHUB_AUTH:void 0,LIB_VERSION:"4.9.5",REACT_MODE:"legacy"}).SC_ATTR)||"data-styled",v="undefined"!==typeof window&&"HTMLElement"in window,w="boolean"===typeof SC_DISABLE_SPEEDY&&SC_DISABLE_SPEEDY||"undefined"!==typeof n&&(Object({ENABLE_AD:void 0,GITHUB_AUTH:void 0,LIB_VERSION:"4.9.5",REACT_MODE:"legacy"}).REACT_APP_SC_DISABLE_SPEEDY||Object({ENABLE_AD:void 0,GITHUB_AUTH:void 0,LIB_VERSION:"4.9.5",REACT_MODE:"legacy"}).SC_DISABLE_SPEEDY)||!1,S=function(){return t.nc};function B(n){for(var e=arguments.length,t=new Array(e>1?e-1:0),o=1;o<e;o++)t[o-1]=arguments[o];throw new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/utils/errors.md#"+n+" for more information."+(t.length>0?" Additional arguments: "+t.join(", "):""))}var C=function(n){var e=document.head,t=n||e,o=document.createElement("style"),r=function(n){for(var e=n.childNodes,t=e.length;t>=0;t--){var o=e[t];if(o&&1===o.nodeType&&o.hasAttribute(x))return o}}(t),s=void 0!==r?r.nextSibling:null;o.setAttribute(x,"active"),o.setAttribute("data-styled-version","5.0.1");var a=S();return a&&o.setAttribute("nonce",a),t.insertBefore(o,s),o},j=function(){function n(n){var e=this.element=C(n);e.appendChild(document.createTextNode("")),this.sheet=function(n){if(n.sheet)return n.sheet;for(var e=document.styleSheets,t=0,o=e.length;t<o;t++){var r=e[t];if(r.ownerNode===n)return r}B(17)}(e),this.length=0}var e=n.prototype;return e.insertRule=function(n,e){try{return this.sheet.insertRule(e,n),this.length++,!0}catch(t){return!1}},e.deleteRule=function(n){this.sheet.deleteRule(n),this.length--},e.getRule=function(n){var e=this.sheet.cssRules[n];return void 0!==e&&"string"===typeof e.cssText?e.cssText:""},n}(),k=function(){function n(n){var e=this.element=C(n);this.nodes=e.childNodes,this.length=0}var e=n.prototype;return e.insertRule=function(n,e){if(n<=this.length&&n>=0){var t=document.createTextNode(e),o=this.nodes[n];return this.element.insertBefore(t,o||null),this.length++,!0}return!1},e.deleteRule=function(n){this.element.removeChild(this.nodes[n]),this.length--},e.getRule=function(n){return n<this.length?this.nodes[n].textContent:""},n}(),M=function(){function n(n){this.rules=[],this.length=0}var e=n.prototype;return e.insertRule=function(n,e){return n<=this.length&&(this.rules.splice(n,0,e),this.length++,!0)},e.deleteRule=function(n){this.rules.splice(n,1),this.length--},e.getRule=function(n){return n<this.length?this.rules[n]:""},n}(),I=function(){function n(n){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=n}var e=n.prototype;return e.indexOfGroup=function(n){for(var e=0,t=0;t<n;t++)e+=this.groupSizes[t];return e},e.insertRules=function(n,e){if(n>=this.groupSizes.length){for(var t=this.groupSizes,o=t.length,r=o;n>=r;)(r<<=1)<0&&B(16,""+n);this.groupSizes=new Uint32Array(r),this.groupSizes.set(t),this.length=r;for(var s=o;s<r;s++)this.groupSizes[s]=0}for(var a=this.indexOfGroup(n+1),i=0,l=e.length;i<l;i++)this.tag.insertRule(a,e[i])&&(this.groupSizes[n]++,a++)},e.clearGroup=function(n){if(n<this.length){var e=this.groupSizes[n],t=this.indexOfGroup(n),o=t+e;this.groupSizes[n]=0;for(var r=t;r<o;r++)this.tag.deleteRule(t)}},e.getGroup=function(n){var e="";if(n>=this.length||0===this.groupSizes[n])return e;for(var t=this.groupSizes[n],o=this.indexOfGroup(n),r=o+t,s=o;s<r;s++)e+=this.tag.getRule(s)+"\n";return e},n}(),P=new Map,D=new Map,T=1,E=function(n){if(P.has(n))return P.get(n);var e=T++;return P.set(n,e),D.set(e,n),e},A=function(n){return D.get(n)},z=function(n,e){e>=T&&(T=e+1),P.set(n,e),D.set(e,n)},O="style["+x+'][data-styled-version="5.0.1"]',N=/(?:\s*)?(.*?){((?:{[^}]*}|(?!{).*?)*)}/g,U=new RegExp("^"+x+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\]'),R=function(n,e,t){for(var o,r=t.split(","),s=0,a=r.length;s<a;s++)(o=r[s])&&n.registerName(e,o)},H=function(n,e){for(var t,o=e.innerHTML,r=[];t=N.exec(o);){var s=t[1].match(U);if(s){var a=0|parseInt(s[1],10),i=s[2];0!==a&&(z(i,a),R(n,i,t[2].split('"')[1]),n.getTag().insertRules(a,r)),r.length=0}else r.push(t[0].trim())}},Y=v,$={isServer:!v,useCSSOMInjection:!w},G=function(){function n(n,e,t){void 0===n&&(n=$),void 0===e&&(e={}),this.options=u({},$,{},n),this.gs=e,this.names=new Map(t),!this.options.isServer&&v&&Y&&(Y=!1,function(n){for(var e=document.querySelectorAll(O),t=0,o=e.length;t<o;t++){var r=e[t];r&&"active"!==r.getAttribute(x)&&(H(n,r),r.parentNode&&r.parentNode.removeChild(r))}}(this))}n.registerId=function(n){return E(n)};var e=n.prototype;return e.reconstructWithOptions=function(e){return new n(u({},this.options,{},e),this.gs,this.names)},e.allocateGSInstance=function(n){return this.gs[n]=(this.gs[n]||0)+1},e.getTag=function(){return this.tag||(this.tag=(n=function(n){var e=n.isServer,t=n.useCSSOMInjection,o=n.target;return e?new M(o):t?new j(o):new k(o)}(this.options),new I(n)));var n},e.hasNameForId=function(n,e){return this.names.has(n)&&this.names.get(n).has(e)},e.registerName=function(n,e){if(E(n),this.names.has(n))this.names.get(n).add(e);else{var t=new Set;t.add(e),this.names.set(n,t)}},e.insertRules=function(n,e,t){this.registerName(n,e),this.getTag().insertRules(E(n),t)},e.clearNames=function(n){this.names.has(n)&&this.names.get(n).clear()},e.clearRules=function(n){this.getTag().clearGroup(E(n)),this.clearNames(n)},e.clearTag=function(){this.tag=void 0},e.toString=function(){return function(n){for(var e=n.getTag(),t=e.length,o="",r=0;r<t;r++){var s=A(r);if(void 0!==s){var a=n.names.get(s),i=e.getGroup(r);if(void 0!==a&&0!==i.length){var l=x+".g"+r+'[id="'+s+'"]',d="";void 0!==a&&a.forEach((function(n){n.length>0&&(d+=n+",")})),o+=""+i+l+'{content:"'+d+'"}\n'}}}return o}(this)},n}(),F=function(n,e){for(var t=e.length;t;)n=33*n^e.charCodeAt(--t);return n},_=function(n){return F(5381,n)};var J=/^\s*\/\/.*$/gm;function L(n){var e,t,o,r=void 0===n?f:n,s=r.options,i=void 0===s?f:s,l=r.plugins,d=void 0===l?h:l,c=new a.a(i),u=[],p=function(n){function e(e){if(e)try{n(e+"}")}catch(t){}}return function(t,o,r,s,a,i,l,d,c,u){switch(t){case 1:if(0===c&&64===o.charCodeAt(0))return n(o+";"),"";break;case 2:if(0===d)return o+"/*|*/";break;case 3:switch(d){case 102:case 112:return n(r[0]+o),"";default:return o+(0===u?"/*|*/":"")}case-2:o.split("/*|*/}").forEach(e)}}}((function(n){u.push(n)})),m=function(n,o,r){return o>0&&-1!==r.slice(0,o).indexOf(t)&&r.slice(o-t.length,o)!==t?"."+e:n};function y(n,r,s,a){void 0===a&&(a="&");var i=n.replace(J,""),l=r&&s?s+" "+r+" { "+i+" }":i;return e=a,t=r,o=new RegExp("\\"+t+"\\b","g"),c(s||!r?"":r,l)}return c.use([].concat(d,[function(n,e,r){2===n&&r.length&&r[0].lastIndexOf(t)>0&&(r[0]=r[0].replace(o,m))},p,function(n){if(-2===n){var e=u;return u=[],e}}])),y.hash=d.length?d.reduce((function(n,e){return e.name||B(15),F(n,e.name)}),5381).toString():"",y}var W=s.a.createContext(),q=(W.Consumer,s.a.createContext()),X=(q.Consumer,new G),K=L();function V(){return Object(r.useContext)(W)||X}function Q(){return Object(r.useContext)(q)||K}var Z=function(){function n(n,e){var t=this;this.inject=function(n){n.hasNameForId(t.id,t.name)||n.insertRules(t.id,t.name,K.apply(void 0,t.stringifyArgs))},this.toString=function(){return B(12,String(t.name))},this.name=n,this.id="sc-keyframes-"+n,this.stringifyArgs=e}return n.prototype.getName=function(){return this.name},n}(),nn=/([A-Z])/g,en=/^ms-/;function tn(n){return n.replace(nn,"-$1").toLowerCase().replace(en,"-ms-")}var on=function(n){return void 0===n||null===n||!1===n||""===n},rn=function n(e,t){var o=[];return Object.keys(e).forEach((function(t){if(!on(e[t])){if(m(e[t]))return o.push.apply(o,n(e[t],t)),o;if(y(e[t]))return o.push(tn(t)+":",e[t],";"),o;o.push(tn(t)+": "+(r=t,null==(s=e[t])||"boolean"===typeof s||""===s?"":"number"!==typeof s||0===s||r in i.a?String(s).trim():s+"px")+";")}var r,s;return o})),t?[t+" {"].concat(o,["}"]):o};function sn(n,e,t){if(Array.isArray(n)){for(var o,r=[],s=0,a=n.length;s<a;s+=1)""!==(o=sn(n[s],e,t))&&(Array.isArray(o)?r.push.apply(r,o):r.push(o));return r}return on(n)?"":g(n)?"."+n.styledComponentId:y(n)?"function"!==typeof(i=n)||i.prototype&&i.prototype.isReactComponent||!e?n:sn(n(e),e,t):n instanceof Z?t?(n.inject(t),n.getName()):n:m(n)?rn(n):n.toString();var i}function an(n){for(var e=arguments.length,t=new Array(e>1?e-1:0),o=1;o<e;o++)t[o-1]=arguments[o];return y(n)||m(n)?sn(p(h,[n].concat(t))):0===t.length&&1===n.length&&"string"===typeof n[0]?n:sn(p(n,t))}var ln=function(n){return"function"===typeof n||"object"===typeof n&&null!==n&&!Array.isArray(n)},dn=function(n){return"__proto__"!==n&&"constructor"!==n&&"prototype"!==n};function cn(n,e,t){var o=n[t];ln(e)&&ln(o)?un(o,e):n[t]=e}function un(n){for(var e=arguments.length,t=new Array(e>1?e-1:0),o=1;o<e;o++)t[o-1]=arguments[o];for(var r=0,s=t;r<s.length;r++){var a=s[r];if(ln(a))for(var i in a)dn(i)&&cn(n,a[i],i)}return n}var pn=/(a)(d)/gi,mn=function(n){return String.fromCharCode(n+(n>25?39:97))};function hn(n){var e,t="";for(e=Math.abs(n);e>52;e=e/52|0)t=mn(e%52)+t;return(mn(e%52)+t).replace(pn,"$1-$2")}function fn(n){for(var e=0;e<n.length;e+=1){var t=n[e];if(y(t)&&!g(t))return!1}return!0}var yn=function(){function n(n,e){this.rules=n,this.staticRulesId="",this.isStatic=fn(n),this.componentId=e,this.baseHash=_(e),G.registerId(e)}return n.prototype.generateAndInjectStyles=function(n,e,t){var o=this.componentId;if(this.isStatic&&!t.hash){if(this.staticRulesId&&e.hasNameForId(o,this.staticRulesId))return this.staticRulesId;var r=sn(this.rules,n,e).join(""),s=hn(F(this.baseHash,r.length)>>>0);if(!e.hasNameForId(o,s)){var a=t(r,"."+s,void 0,o);e.insertRules(o,s,a)}return this.staticRulesId=s,s}for(var i=this.rules.length,l=F(this.baseHash,t.hash),d="",c=0;c<i;c++){var u=this.rules[c];if("string"===typeof u)d+=u;else{var p=sn(u,n,e),m=Array.isArray(p)?p.join(""):p;l=F(l,m+c),d+=m}}var h=hn(l>>>0);if(!e.hasNameForId(o,h)){var f=t(d,"."+h,void 0,o);e.insertRules(o,h,f)}return h},n}(),bn=(new Set,function(n,e,t){return void 0===t&&(t=f),n.theme!==t.theme&&n.theme||e||t.theme}),gn=/[[\].#*$><+~=|^:(),"'`-]+/g,xn=/(^-|-$)/g;function vn(n){return n.replace(gn,"-").replace(xn,"")}function wn(n){return"string"===typeof n&&!0}var Sn=function(n){return hn(_(n)>>>0)};var Bn=s.a.createContext();Bn.Consumer;function Cn(n){var e=Object(r.useContext)(Bn),t=Object(r.useMemo)((function(){return function(n,e){return n?y(n)?n(e):Array.isArray(n)||"object"!==typeof n?B(8):e?u({},e,{},n):n:B(14)}(n.theme,e)}),[n.theme,e]);return n.children?s.a.createElement(Bn.Provider,{value:t},n.children):null}var jn={};function kn(n,e,t){var o=n.attrs,s=n.componentStyle,a=n.defaultProps,i=n.foldedComponentIds,d=n.styledComponentId,c=n.target;Object(r.useDebugValue)(d);var p=function(n,e,t){void 0===n&&(n=f);var o=u({},e,{theme:n}),r={};return t.forEach((function(n){var e,t,s,a=n;for(e in y(a)&&(a=a(o)),a)o[e]=r[e]="className"===e?(t=r[e],s=a[e],t&&s?t+" "+s:t||s):a[e]})),[o,r]}(bn(e,Object(r.useContext)(Bn),a)||f,e,o),m=p[0],h=p[1],b=function(n,e,t,o){var s=V(),a=Q(),i=n.isStatic&&!e?n.generateAndInjectStyles(f,s,a):n.generateAndInjectStyles(t,s,a);return Object(r.useDebugValue)(i),i}(s,o.length>0,m),g=t,x=h.as||e.as||c,v=wn(x),w=h!==e?u({},e,{},h):e,S=v||"as"in w||"forwardedAs"in w,B=S?{}:u({},w);if(S)for(var C in w)"forwardedAs"===C?B.as=w[C]:"as"===C||"forwardedAs"===C||v&&!Object(l.a)(C)||(B[C]=w[C]);return e.style&&h.style!==e.style&&(B.style=u({},e.style,{},h.style)),B.className=Array.prototype.concat(i,d,b!==d?b:null,e.className,h.className).filter(Boolean).join(" "),B.ref=g,Object(r.createElement)(x,B)}function Mn(n,e,t){var o,r=g(n),a=!wn(n),i=e.displayName,l=void 0===i?function(n){return wn(n)?"styled."+n:"Styled("+b(n)+")"}(n):i,d=e.componentId,p=void 0===d?function(n,e){var t="string"!==typeof n?"sc":vn(n);jn[t]=(jn[t]||0)+1;var o=t+"-"+Sn(t+jn[t]);return e?e+"-"+o:o}(e.displayName,e.parentComponentId):d,m=e.attrs,f=void 0===m?h:m,y=e.displayName&&e.componentId?vn(e.displayName)+"-"+e.componentId:e.componentId||p,x=r&&n.attrs?Array.prototype.concat(n.attrs,f).filter(Boolean):f,v=new yn(r?n.componentStyle.rules.concat(t):t,y),w=function(n,e){return kn(o,n,e)};return w.displayName=l,(o=s.a.forwardRef(w)).attrs=x,o.componentStyle=v,o.displayName=l,o.foldedComponentIds=r?Array.prototype.concat(n.foldedComponentIds,n.styledComponentId):h,o.styledComponentId=y,o.target=r?n.target:n,o.withComponent=function(n){var o=e.componentId,r=function(n,e){if(null==n)return{};var t,o,r={},s=Object.keys(n);for(o=0;o<s.length;o++)t=s[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(e,["componentId"]),s=o&&o+"-"+(wn(n)?n:vn(b(n)));return Mn(n,u({},r,{attrs:x,componentId:s}),t)},Object.defineProperty(o,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=r?un({},n.defaultProps,e):e}}),o.toString=function(){return"."+o.styledComponentId},a&&c()(o,n,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,self:!0,styledComponentId:!0,target:!0,withComponent:!0}),o}var In=function(n){return function n(e,t,r){if(void 0===r&&(r=f),!Object(o.isValidElementType)(t))return B(1,String(t));var s=function(){return e(t,r,an.apply(void 0,arguments))};return s.withConfig=function(o){return n(e,t,u({},r,{},o))},s.attrs=function(o){return n(e,t,u({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},s}(Mn,n)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(n){In[n]=In(n)}));e.b=In}).call(this,t("5IsQ"))},"Wd+q":function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return m}));var o=t("kGIj"),r=t("mXGw"),s=t.n(r),a=t("UutA"),i=t("O8uh"),l=t("WKBU"),d=s.a.createElement;function c(){var n=Object(o.a)(["\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n"]);return c=function(){return n},n}var u=Object(a.b)(i.a)(c()),p=d(l.a,null,d(i.a,null,"Default"),d(u,null,"Customized"));function m(){return p}},Zxfz:function(n,e,t){"use strict";e.a={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1}},aD51:function(n,e,t){"use strict";var o=t("QKC2"),r=t.n(o),s=t("mXGw");var a=function(){function n(n){this.isSpeedy=void 0===n.speedy||n.speedy,this.tags=[],this.ctr=0,this.nonce=n.nonce,this.key=n.key,this.container=n.container,this.before=null}var e=n.prototype;return e.insert=function(n){if(this.ctr%(this.isSpeedy?65e3:1)===0){var e,t=function(n){var e=document.createElement("style");return e.setAttribute("data-emotion",n.key),void 0!==n.nonce&&e.setAttribute("nonce",n.nonce),e.appendChild(document.createTextNode("")),e}(this);e=0===this.tags.length?this.before:this.tags[this.tags.length-1].nextSibling,this.container.insertBefore(t,e),this.tags.push(t)}var o=this.tags[this.tags.length-1];if(this.isSpeedy){var r=function(n){if(n.sheet)return n.sheet;for(var e=0;e<document.styleSheets.length;e++)if(document.styleSheets[e].ownerNode===n)return document.styleSheets[e]}(o);try{var s=105===n.charCodeAt(1)&&64===n.charCodeAt(0);r.insertRule(n,s?0:r.cssRules.length)}catch(a){0}}else o.appendChild(document.createTextNode(n));this.ctr++},e.flush=function(){this.tags.forEach((function(n){return n.parentNode.removeChild(n)})),this.tags=[],this.ctr=0},n}(),i=t("FhD9");t("kgi3");function l(n){n&&d.current.insert(n+"}")}var d={current:null},c=function(n,e,t,o,r,s,a,i,c,u){switch(n){case 1:switch(e.charCodeAt(0)){case 64:return d.current.insert(e+";"),"";case 108:if(98===e.charCodeAt(2))return""}break;case 2:if(0===i)return e+"/*|*/";break;case 3:switch(i){case 102:case 112:return d.current.insert(t[0]+e),"";default:return e+(0===u?"/*|*/":"")}case-2:e.split("/*|*/}").forEach(l)}},u=function(n){void 0===n&&(n={});var e,t=n.key||"css";void 0!==n.prefix&&(e={prefix:n.prefix});var o=new i.a(e);var r,s={};r=n.container||document.head;var l,u=document.querySelectorAll("style[data-emotion-"+t+"]");Array.prototype.forEach.call(u,(function(n){n.getAttribute("data-emotion-"+t).split(" ").forEach((function(n){s[n]=!0})),n.parentNode!==r&&r.appendChild(n)})),o.use(n.stylisPlugins)(c),l=function(n,e,t,r){var s=e.name;d.current=t,o(n,e.styles),r&&(p.inserted[s]=!0)};var p={key:t,sheet:new a({key:t,container:r,nonce:n.nonce,speedy:n.speedy}),nonce:n.nonce,inserted:s,registered:{},insert:l};return p},p=t("3xmD"),m=t("HwHs");var h=function(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Object(m.a)(e)};t.d(e,"a",(function(){return y})),t.d(e,"c",(function(){return S})),t.d(e,"d",(function(){return b})),t.d(e,"b",(function(){return h}));var f=Object(s.createContext)("undefined"!==typeof HTMLElement?u():null),y=Object(s.createContext)({}),b=(f.Provider,function(n){return Object(s.forwardRef)((function(e,t){return Object(s.createElement)(f.Consumer,null,(function(o){return n(e,o,t)}))}))}),g="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",x=Object.prototype.hasOwnProperty,v=function(n,e,t,o){var r=null===t?e.css:e.css(t);"string"===typeof r&&void 0!==n.registered[r]&&(r=n.registered[r]);var a=e[g],i=[r],l="";"string"===typeof e.className?l=Object(p.a)(n.registered,i,e.className):null!=e.className&&(l=e.className+" ");var d=Object(m.a)(i);Object(p.b)(n,d,"string"===typeof a);l+=n.key+"-"+d.name;var c={};for(var u in e)x.call(e,u)&&"css"!==u&&u!==g&&(c[u]=e[u]);return c.ref=o,c.className=l,Object(s.createElement)(a,c)},w=b((function(n,e,t){return"function"===typeof n.css?Object(s.createElement)(y.Consumer,null,(function(o){return v(e,n,o,t)})):v(e,n,null,t)}));var S=function(n,e){var t=arguments;if(null==e||!x.call(e,"css"))return s.createElement.apply(void 0,t);var o=t.length,r=new Array(o);r[0]=w;var a={};for(var i in e)x.call(e,i)&&(a[i]=e[i]);a[g]=n,r[1]=a;for(var l=2;l<o;l++)r[l]=t[l];return s.createElement.apply(null,r)},B=(s.Component,function n(e){for(var t=e.length,o=0,r="";o<t;o++){var s=e[o];if(null!=s){var a=void 0;switch(typeof s){case"boolean":break;case"object":if(Array.isArray(s))a=n(s);else for(var i in a="",s)s[i]&&i&&(a&&(a+=" "),a+=i);break;default:a=s}a&&(r&&(r+=" "),r+=a)}}return r});function C(n,e,t){var o=[],r=Object(p.a)(n,o,t);return o.length<2?t:r+e(o)}b((function(n,e){return Object(s.createElement)(y.Consumer,null,(function(t){var o=function(){for(var n=arguments.length,t=new Array(n),o=0;o<n;o++)t[o]=arguments[o];var r=Object(m.a)(t,e.registered);return Object(p.b)(e,r,!1),e.key+"-"+r.name},r={css:o,cx:function(){for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return C(e.registered,o,B(t))},theme:t},s=n.children(r);return!0,s}))}))},aKhZ:function(n,e){n.exports="import React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport NoSsr from '@material-ui/core/NoSsr';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <NoSsr>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </NoSsr>\n  );\n}\n"},aSwL:function(n,e){n.exports="/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\nimport { ThemeProvider } from 'emotion-theming';\nimport {\n  createMuiTheme,\n  ThemeProvider as MuiThemeProvider,\n  darken,\n} from '@material-ui/core/styles';\n\nconst customTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#6772e5',\n    },\n  },\n});\n\nexport default function EmotionTheme() {\n  return (\n    <MuiThemeProvider theme={customTheme}>\n      <ThemeProvider theme={customTheme}>\n        <Button>Default</Button>\n        <Button\n          css={theme => css`\n            background-color: ${theme.palette.primary.main};\n            color: #fff;\n            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n            padding: 4px 10px;\n            font-size: 13px;\n            &:hover {\n              background-color: ${darken(theme.palette.primary.main, 0.2)};\n            }\n            ${theme.breakpoints.up('sm')} {\n              font-size: 14px;\n              padding: 7px 14px;\n            }\n          `}\n        >\n          Customized\n        </Button>\n      </ThemeProvider>\n    </MuiThemeProvider>\n  );\n}\n"},hpSN:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return c}));var o=t("mXGw"),r=t.n(o),s=t("e+1t"),a=r.a.createElement,i=t("Jq+A"),l=t("nj+6"),d=a(s.a,{req:i,reqSource:l,reqPrefix:"pages/guides/interoperability"});function c(){return d}},kGIj:function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));var o=t("wuQJ"),r=t.n(o),s=t("81nG"),a=t.n(s);function i(n,e){return e||(e=n.slice(0)),a()(r()(n,{raw:{value:a()(e)}}))}},kgi3:function(n,e,t){"use strict";e.a=function(n){var e=new WeakMap;return function(t){if(e.has(t))return e.get(t);var o=n(t);return e.set(t,o),o}}},lPUU:function(n,e,t){var o=t("fGh/"),r=t("hYpR").onFreeze;t("qNvu")("freeze",(function(n){return function(e){return n&&o(e)?n(r(e)):e}}))},luQv:function(n,e){n.exports="import React from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport {\n  createMuiTheme,\n  ThemeProvider as MuiThemeProvider,\n  darken,\n} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst customTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#6772e5',\n    },\n  },\n});\n\nconst StyledButton = styled(Button)`\n  ${({ theme }) => `\n  background-color: ${theme.palette.primary.main};\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n  ${theme.breakpoints.up('sm')} {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  `}\n`;\n\nexport default function StyledComponentsTheme() {\n  return (\n    <NoSsr>\n      <MuiThemeProvider theme={customTheme}>\n        <ThemeProvider theme={customTheme}>\n          <Button>Default</Button>\n          <StyledButton>Customized</StyledButton>\n        </ThemeProvider>\n      </MuiThemeProvider>\n    </NoSsr>\n  );\n}\n"},nBrM:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return f}));var o=t("z3IF"),r=t("2Fjn"),s=t("kGIj"),a=t("mXGw"),i=t.n(a),l=t("UutA"),d=t("O8uh"),c=t("DmyM"),u=t("2zfq"),p=i.a.createElement;function m(){var n=Object(s.a)(["\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n"]);return m=function(){return n},n}var h=Object(l.b)((function(n){var e=n.className,t=Object(r.a)(n,["className"]);return p(c.a,Object(o.a)({},t,{classes:{paper:e}}))}))(m());function f(){var n=i.a.useState(null),e=n[0],t=n[1],o=function(){t(null)};return p("div",null,p(d.a,{"aria-owns":e?"simple-menu":void 0,"aria-haspopup":"true",variant:"contained",color:"primary",onClick:function(n){t(n.currentTarget)}},"Open Menu"),p(h,{id:"simple-menu",anchorEl:e,open:Boolean(e),onClose:o,getContentAnchorEl:null,anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},p(u.a,{onClick:o},"Profile"),p(u.a,{onClick:o},"My account"),p(u.a,{onClick:o},"Logout")))}},"nj+6":function(n,e,t){var o={"./EmotionCSS.js":"w/mS","./EmotionCSS.tsx":"zKiH","./EmotionTheme.js":"LURK","./EmotionTheme.tsx":"aSwL","./StyledComponents.js":"aKhZ","./StyledComponents.tsx":"E1Do","./StyledComponentsDeep.js":"SPFu","./StyledComponentsDeep.tsx":"+mgL","./StyledComponentsPortal.js":"EcaT","./StyledComponentsPortal.tsx":"yqa6","./StyledComponentsTheme.js":"luQv","./StyledComponentsTheme.tsx":"pRGK"};function r(n){var e=s(n);return t(e)}function s(n){if(!t.o(o,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return o[n]}r.keys=function(){return Object.keys(o)},r.resolve=s,n.exports=r,r.id="nj+6"},pRGK:function(n,e){n.exports="import React from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport {\n  createMuiTheme,\n  ThemeProvider as MuiThemeProvider,\n  darken,\n} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst customTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#6772e5',\n    },\n  },\n});\n\nconst StyledButton = styled(Button)`\n  ${({ theme }) => `\n  background-color: ${theme.palette.primary.main};\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n  ${theme.breakpoints.up('sm')} {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  `}\n`;\n\nexport default function StyledComponentsTheme() {\n  return (\n    <NoSsr>\n      <MuiThemeProvider theme={customTheme}>\n        <ThemeProvider theme={customTheme}>\n          <Button>Default</Button>\n          <StyledButton>Customized</StyledButton>\n        </ThemeProvider>\n      </MuiThemeProvider>\n    </NoSsr>\n  );\n}\n"},pfvL:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return m}));var o=t("kGIj"),r=t("mXGw"),s=t.n(r),a=t("UutA"),i=t("O8uh"),l=t("WKBU"),d=s.a.createElement;function c(){var n=Object(o.a)(["\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n"]);return c=function(){return n},n}var u=Object(a.b)(i.a)(c()),p=d(l.a,null,d(i.a,null,"Default"),d(u,null,"Customized"));function m(){return p}},r02S:function(n,e){n.exports="# crwdns95514:0crwdne95514:0\n\n<p class=\"description\">crwdns108505:0crwdne108505:0</p>\n\ncrwdns95518:0crwdne95518:0 crwdns101262:0crwdne101262:0\n\n- [crwdns95524:0crwdne95524:0](crwdns95522:0crwdne95522:0)\n- [crwdns95528:0crwdne95528:0](crwdns95526:0crwdne95526:0)\n- [crwdns95532:0crwdne95532:0](crwdns95530:0crwdne95530:0)\n- [crwdns95536:0crwdne95536:0](crwdns95534:0crwdne95534:0)\n- [crwdns95540:0crwdne95540:0](crwdns95538:0crwdne95538:0)\n- [crwdns95544:0crwdne95544:0](crwdns95542:0crwdne95542:0)\n\n## crwdns95550:0crwdne95550:0\n\ncrwdns108507:0crwdne108507:0\n\ncrwdns108509:0crwdne108509:0\n\n[![crwdns108515:0crwdne108515:0](crwdns108513:0crwdne108513:0)](crwdns108511:0crwdne108511:0)\n\n**crwdns108517:0crwdne108517:0**\n\n```css\ncrwdns108519:0crwdne108519:0\n```\n\n**crwdns108521:0crwdne108521:0**\n\n```jsx\ncrwdns108523:0crwdne108523:0\n```\n\n### crwdns108525:0crwdne108525:0\n\ncrwdns108527:0crwdne108527:0 crwdns108529:0crwdne108529:0\n\n```jsx\ncrwdns108531:0{ StylesProvider }crwdne108531:0\n      crwdns108533:0crwdne108533:0 crwdns108535:0crwdne108535:0\n```\n\n### crwdns95636:0crwdne95636:0\n\ncrwdns108537:0crwdne108537:0 crwdns108539:0crwdne108539:0 crwdns108541:0crwdne108541:0\n\ncrwdns108543:0crwdne108543:0\n\ncrwdns108545:0crwdne108545:0\n\n**crwdns108547:0crwdne108547:0**\n\n```css\ncrwdns108549:0crwdne108549:0\n```\n\n**crwdns108551:0crwdne108551:0**\n\n```jsx\ncrwdns108553:0{{ root: 'button', label: 'button-label' }}crwdne108553:0\n```\n\n## crwdns95574:0crwdne95574:0\n\ncrwdns108555:0crwdne108555:0 crwdns108557:0crwdne108557:0\n\n[![crwdns108563:0crwdne108563:0](crwdns108561:0crwdne108561:0)](crwdns108559:0crwdne108559:0)\n\n**crwdns108565:0crwdne108565:0**\n\n```css\ncrwdns108567:0crwdne108567:0\n```\n\n**crwdns108569:0crwdne108569:0**\n\n```jsx\ncrwdns108571:0crwdne108571:0\n```\n\n### crwdns108573:0crwdne108573:0\n\ncrwdns108575:0crwdne108575:0 crwdns108577:0crwdne108577:0\n\n```jsx\ncrwdns108579:0{ StylesProvider }crwdne108579:0\n      crwdns108581:0crwdne108581:0 crwdns108583:0crwdne108583:0\n```\n\n## crwdns95598:0crwdne95598:0\n\n![crwdns108587:0crwdne108587:0](crwdns108585:0crwdne108585:0) ![crwdns108591:0crwdne108591:0](crwdns108589:0crwdne108589:0)\n\ncrwdns108593:0crwdne108593:0\n\ncrwdns108595:0crwdne108595:0\n\n[![crwdns108601:0crwdne108601:0](crwdns108599:0crwdne108599:0)](crwdns108597:0crwdne108597:0)\n\n```jsx\ncrwdns108603:0crwdne108603:0\n\n```\n\n### crwdns108605:0crwdne108605:0\n\ncrwdns108607:0crwdne108607:0 crwdns108609:0crwdne108609:0\n\n```jsx\ncrwdns108611:0{ StylesProvider }crwdne108611:0\n      crwdns108613:0crwdne108613:0 crwdns108615:0crwdne108615:0\n```\n\ncrwdns108617:0crwdne108617:0 crwdns108619:0crwdne108619:0\n\n### crwdns108621:0crwdne108621:0\n\ncrwdns108623:0crwdne108623:0 crwdns108625:0crwdne108625:0 crwdns108627:0crwdne108627:0\n\ncrwdns108629:0crwdne108629:0 crwdns108631:0crwdne108631:0\n\ncrwdns108633:0crwdne108633:0\n\n```jsx\ncrwdns108635:0crwdne108635:0\n```\n\ncrwdns108637:0crwdne108637:0\n\n```jsx\ncrwdns108639:0{ color, ...other }crwdnd108639:0{{ label: 'label' }}crwdnd108639:0{...other}crwdne108639:0\n```\n\n### crwdns108641:0crwdne108641:0\n\ncrwdns108643:0crwdne108643:0\n\ncrwdns108645:0crwdne108645:0\n\n```jsx\ncrwdns108647:0{ theme }crwdnd108647:0${theme.palette.primary.main}crwdne108647:0\n```\n\ncrwdns108649:0crwdne108649:0\n\n### crwdns108651:0crwdne108651:0\n\ncrwdns108653:0crwdne108653:0 crwdns108655:0crwdne108655:0\n\ncrwdns108657:0crwdne108657:0 crwdns108659:0crwdne108659:0\n\n```jsx\ncrwdns108661:0{ className, ...props }crwdnd108661:0{...props}crwdnd108661:0{{ paper: className }}crwdne108661:0\n```\n\ncrwdns108663:0crwdne108663:0\n\n## crwdns95676:0crwdne95676:0\n\n![crwdns108667:0crwdne108667:0](crwdns108665:0crwdne108665:0)\n\ncrwdns108669:0crwdne108669:0\n\ncrwdns108671:0crwdne108671:0\n\n[![crwdns108677:0crwdne108677:0](crwdns108675:0crwdne108675:0)](crwdns108673:0crwdne108673:0)\n\n**crwdns108679:0crwdne108679:0**\n\n```css\ncrwdns108681:0crwdne108681:0\n```\n\n**crwdns108683:0crwdne108683:0**\n\n```jsx\ncrwdns108685:0{styles.button}crwdne108685:0\n```\n\n### crwdns108687:0crwdne108687:0\n\ncrwdns108689:0crwdne108689:0 crwdns108691:0crwdne108691:0\n\n```jsx\ncrwdns108693:0{ StylesProvider }crwdne108693:0\n      crwdns108695:0crwdne108695:0 crwdns108697:0crwdne108697:0\n```\n\n### crwdns108699:0crwdne108699:0\n\ncrwdns108701:0crwdne108701:0 crwdns108703:0crwdne108703:0 crwdns108705:0crwdne108705:0\n\ncrwdns108707:0crwdne108707:0\n\ncrwdns108709:0crwdne108709:0\n\n**crwdns108711:0crwdne108711:0**\n\n```css\ncrwdns108713:0crwdne108713:0\n```\n\n**crwdns108715:0crwdne108715:0**\n\n```jsx\ncrwdns108717:0{styles}crwdne108717:0\n```\n\n## crwdns95702:0crwdne95702:0\n\n![crwdns108721:0crwdne108721:0](crwdns108719:0crwdne108719:0) ![crwdns108725:0crwdne108725:0](crwdns108723:0crwdne108723:0)\n\n### crwdns108727:0crwdne108727:0\n\ncrwdns108729:0crwdne108729:0\n\ncrwdns108731:0crwdne108731:0\n\n[![crwdns108737:0crwdne108737:0](crwdns108735:0crwdne108735:0)](crwdns108733:0crwdne108733:0)\n\n```jsx\ncrwdns108739:0{ jsx, css }crwdne108739:0\n```\n\n### crwdns108741:0crwdne108741:0\n\ncrwdns108743:0crwdne108743:0 crwdns108745:0crwdne108745:0\n\n```jsx\ncrwdns108747:0{ StylesProvider }crwdne108747:0\n      crwdns108749:0crwdne108749:0 crwdns108751:0crwdne108751:0\n```\n\n### crwdns108753:0crwdne108753:0\n\ncrwdns108755:0crwdne108755:0\n\ncrwdns108757:0crwdne108757:0\n\n```jsx\ncrwdns108759:0${theme.palette.primary.main}crwdne108759:0\n```\n\ncrwdns108761:0crwdne108761:0\n\n### crwdns108763:0crwdne108763:0\n\ncrwdns108765:0crwdne108765:0 crwdns108767:0crwdne108767:0"},r3IF:function(n,e){n.exports="# \u30b9\u30bf\u30a4\u30eb\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u76f8\u4e92\u904b\u7528\u6027\n\n<p class=\"description\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\n\nThis guide aims to document the most popular alternatives, but you should find that the principals applied here can be adapted to other libraries. There are examples for the following styling solutions:\n\n- [Plain CSS](#plain-css)\n- [Global CSS](#global-css)\n- [Styled Components](#styled-components)\n- [CSS Modules](#css-modules)\n- [Emotion](#emotion)\n- [React JSS](#react-jss)\n\n## Plain CSS\n\nNothing fancy, just plain CSS.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\n\n**PlainCssButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**PlainCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className=\"button\">Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**PlainCssButtonDeep.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n.button-label {\n  color: #fff;\n}\n```\n\n**PlainCssButtonDeep.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={{ root: 'button', label: 'button-label' }}>\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n## Global CSS\n\nExplicitly providing the class names to the component is too much effort? [You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\n\n**GlobalCssButton.css**\n\n```css\n.MuiButton-root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.MuiButton-root:hover {\n  background-color: #5469d4;\n}\n.MuiButton-label {\n  color: #fff;\n}\n```\n\n**GlobalCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function GlobalCssButton() {\n  return <Button>Customized</Button>;\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n## Styled Components\n\n![Stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\n\nThe `styled()` method works perfectly on all of the components.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`. The best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself. It also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \"consuming\" properties that should not be passed on to the underlying component.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsDeep.js\"}}\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(({ color, ...other }) => (\n  <Button classes={{ label: 'label' }} {...other} />\n))`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\n### \u30c6\u30fc\u30de\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\nconst StyledButton = styled(Button)`\n  ${({ theme }) => `\n  background-color: ${theme.palette.primary.main};\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n  ${theme.breakpoints.up('sm')} {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  `}\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsTheme.js\"}}\n\n### Portals\n\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Because of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\n\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. The following example shows a workaround:\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst StyledMenu = styled(({ className, ...props }) => (\n  <Menu {...props} classes={{ paper: className }} />\n))`\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsPortal.js\"}}\n\n## CSS Modules\n\n![Stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\n\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the bundling solution people are using.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\n\n**CssModulesButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**CssModulesButton.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButton.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className={styles.button}>Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### Deeper elements\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**CssModulesButtonDeep.css**\n\n```css\n.root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.root:hover {\n  background-color: #5469d4;\n}\n.label {\n  color: #fff;\n}\n```\n\n**CssModulesButtonDeep.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButtonDeep.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={styles}>Customized</Button>\n    </div>\n  );\n}\n```\n\n## Emotion\n\n![Stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\n\n### The `css` prop\n\nEmotion's **css()** method works seamlessly with Material-UI.\n\n{{\"demo\": \"pages/guides/interoperability/EmotionCSS.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\n\n```jsx\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\n\nexport default function EmotionCSS() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button\n        css={css`\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        `}\n      >\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### \u30c6\u30fc\u30de\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\n<Button\n  css={theme => css`\n    background-color: ${theme.palette.primary.main};\n    color: #fff;\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n    padding: 4px 10px;\n    font-size: 13px;\n    &:hover {\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\n    }\n    ${theme.breakpoints.up('sm')} {\n      font-size: 14px;\n      padding: 7px 14px;\n    }\n  `}\n>\n  Customized\n</Button>\n```\n\n{{\"demo\": \"pages/guides/interoperability/EmotionTheme.js\"}}\n\n### The `styled()` API\n\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components)."},"w/mS":function(n,e){n.exports="/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\n\nexport default function EmotionCSS() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button\n        css={css`\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        `}\n      >\n        Customized\n      </Button>\n    </div>\n  );\n}\n"},"w0+M":function(n,e){n.exports="# \u6837\u5f0f\u5e93\u7684\u4e92\u901a\u6027\n\n<p class=\"description\">While you can use the JSS based styling solution provided by Material-UI to style your application, you can also use the one you already know and love (from plain CSS to styled-components).</p>\n\n\u672c\u6307\u5357\u65e8\u5728\u5f52\u6863\u5f53\u524d\u6bd4\u8f83\u6d41\u884c\u7684\u4e00\u4e9b\u66ff\u4ee3\u65b9\u6848\uff0c\u4f46\u662f\u60a8\u5e94\u8be5\u53ef\u4ee5\u53d1\u73b0\u5728\u8fd9\u91cc\u8fd0\u7528\u7684\u6cd5\u5219\u4e5f\u53ef\u4ee5\u5728\u5176\u4ed6\u5e93\u91cc\u9002\u7528\u3002 There are examples for the following styling solutions:\n\n- [\u7eaf CSS](#plain-css)\n- [\u5168\u5c40 CSS](#global-css)\n- [Styled Components](#styled-components)\n- [CSS Modules](#css-modules)\n- [Emotion](#css-modules)\n- [React JSS](#emotion)\n\n## \u7eaf CSS\n\nNothing fancy, just plain CSS.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/plain-css-mtzri)\n\n**PlainCssButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**PlainCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className=\"button\">Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### \u66f4\u6df1\u5c42\u7684\u5143\u7d20\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**PlainCssButtonDeep.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n.button-label {\n  color: #fff;\n}\n```\n\n**PlainCssButtonDeep.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function PlainCssButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={{ root: 'button', label: 'button-label' }}>\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n## \u5168\u5c40 CSS\n\nExplicitly providing the class names to the component is too much effort? [You can target the class names generated by Material-UI](/styles/advanced/#with-material-ui-core).\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/global-css-bir9e)\n\n**GlobalCssButton.css**\n\n```css\n.MuiButton-root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.MuiButton-root:hover {\n  background-color: #5469d4;\n}\n.MuiButton-label {\n  color: #fff;\n}\n```\n\n**GlobalCssButton.js**\n\n```jsx\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\n\nexport default function GlobalCssButton() {\n  return <Button>Customized</Button>;\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n## Styled Components\n\n![stars](https://img.shields.io/github/stars/styled-components/styled-components.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/styled-components.svg?)\n\nThe `styled()` method works perfectly on all of the components.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/styled-components-r1fsr)\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n`;\n\nexport default function StyledComponents() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** Both styled-components and JSS inject their styles at the bottom of the `<head>`. The best approach to ensuring styled-components styles are loaded last is to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\nAnother approach is to use the `&&` characters in styled-components to [bump up specificity](https://www.styled-components.com/docs/advanced#issues-with-specificity) by repeating the class name. Avoid the usage of `!important`.\n\n### \u66f4\u6df1\u5c42\u7684\u5143\u7d20\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself. It also works around [this styled-components issue](https://github.com/styled-components/styled-components/issues/439) by \"consuming\" properties that should not be passed on to the underlying component.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsDeep.js\"}}\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(Button)`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .MuiButton-label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\nThe above demo relies on the [default `classes` values](/styles/advanced/#with-material-ui-core) but you can provide your own class name: `.label`.\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst StyledButton = styled(({ color, ...other }) => (\n  <Button classes={{ label: 'label' }} {...other} />\n))`\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n  &:hover {\n    background-color: #5469d4;\n  }\n  & .label {\n    color: #fff;\n  }\n`;\n\nexport default function StyledComponentsDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <StyledButton>Customized</StyledButton>\n    </div>\n  );\n}\n```\n\n### \u4e3b\u9898\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\nconst StyledButton = styled(Button)`\n  ${({ theme }) => `\n  background-color: ${theme.palette.primary.main};\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n  ${theme.breakpoints.up('sm')} {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  `}\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsTheme.js\"}}\n\n### Portals\n\nThe [Portal](/components/portal/) provides a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Because of the way styled-components scopes its CSS, you may run into issues where styling is not applied.\n\nFor example, if you attempt to style the [Menu](/components/menus/) of a [Select](/components/selects/) component using the property `MenuProps`, you will need to pass along the `className` property to the element being rendered outside of it's DOM hierarchy. The following example shows a workaround:\n\n```jsx\nimport React from 'react';\nimport styled from 'styled-components';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst StyledMenu = styled(({ className, ...props }) => (\n  <Menu {...props} classes={{ paper: className }} />\n))`\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n```\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponentsPortal.js\"}}\n\n## CSS Modules\n\n![stars](https://img.shields.io/github/stars/css-modules/css-modules.svg?style=social&label=Star)\n\nIt's hard to know the market share of [this styling solution](https://github.com/css-modules/css-modules) as it's dependent on the bundling solution people are using.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/css-modules-3j29h)\n\n**CssModulesButton.css**\n\n```css\n.button {\n  background-color: #6772e5;\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.button:hover {\n  background-color: #5469d4;\n}\n```\n\n**CssModulesButton.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButton.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButton() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button className={styles.button}>Customized</Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### \u66f4\u6df1\u5c42\u7684\u5143\u7d20\n\nIf you attempt to style a Drawer with variant permanent, you will likely need to affect the Drawer's child paper element. However, the paper is not the root element of Drawer and therefore styled-components customization as above will not work. You need to use the [`classes`](/styles/advanced/#overriding-styles-classes-prop) API of Material-UI.\n\nThe following example overrides the `label` style of `Button` in addition to the custom styles on the button itself.\n\n{{\"demo\": \"pages/guides/interoperability/StyledComponents.js\", \"hideHeader\": true}}\n\n**CssModulesButtonDeep.css**\n\n```css\n.root {\n  background-color: #6772e5;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 7px 14px;\n}\n.root:hover {\n  background-color: #5469d4;\n}\n.label {\n  color: #fff;\n}\n```\n\n**CssModulesButtonDeep.js**\n\n```jsx\nimport React from 'react';\n// webpack, parcel or else will inject the CSS into the page\nimport styles from './CssModulesButtonDeep.css';\nimport Button from '@material-ui/core/Button';\n\nexport default function CssModulesButtonDeep() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button classes={styles}>Customized</Button>\n    </div>\n  );\n}\n```\n\n## Emotion\n\n![stars](https://img.shields.io/github/stars/emotion-js/emotion.svg?style=social&label=Star) ![npm](https://img.shields.io/npm/dm/emotion.svg?)\n\n### The `css` prop\n\nEmotion's **css()** method works seamlessly with Material-UI.\n\n{{\"demo\": \"pages/guides/interoperability/EmotionCSS.js\", \"hideHeader\": true}}\n\n[![Edit Button](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/emotion-bgfxj)\n\n```jsx\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\n\nexport default function EmotionCSS() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button\n        css={css`\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        `}\n      >\n        Customized\n      </Button>\n    </div>\n  );\n}\n```\n\n### Controlling priority \u26a0\ufe0f\n\n**Note:** JSS injects its styles at the bottom of the `<head>`. If you don't want to mark style attributes with **!important**, you need to change [the CSS injection order](/styles/advanced/#css-injection-order), as in the demo:\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Now, you can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### \u4e3b\u9898\n\nMaterial-UI has a rich theme structure that you can leverage for the color manipulations, the transitions, the media queries, and more.\n\nWe encourage to share the same theme object between Material-UI and your styles.\n\n```jsx\n<Button\n  css={theme => css`\n    background-color: ${theme.palette.primary.main};\n    color: #fff;\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n    padding: 4px 10px;\n    font-size: 13px;\n    &:hover {\n      background-color: ${darken(theme.palette.primary.main, 0.2)};\n    }\n    ${theme.breakpoints.up('sm')} {\n      font-size: 14px;\n      padding: 7px 14px;\n    }\n  `}\n>\n  Customized\n</Button>\n```\n\n{{\"demo\": \"pages/guides/interoperability/EmotionTheme.js\"}}\n\n### The `styled()` API\n\nIt works exactly like styled components. You can [use the same guide](/guides/interoperability/#styled-components)."},whv5:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return b}));var o=t("kGIj"),r=t("mXGw"),s=t.n(r),a=t("UutA"),i=t("WKBU"),l=t("mKyP"),d=t("cYeA"),c=t("h7Hf"),u=t("O8uh"),p=s.a.createElement;function m(){var n=Object(o.a)(["\n  ","\n"]);return m=function(){return n},n}var h=Object(l.a)({palette:{primary:{main:"#6772e5"}}}),f=Object(a.b)(u.a)(m(),(function(n){var e=n.theme;return"\n  background-color: ".concat(e.palette.primary.main,";\n  color: #fff;\n  box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n  padding: 4px 10px;\n  font-size: 13px;\n  &:hover {\n    background-color: ").concat(Object(d.darken)(e.palette.primary.main,.2),";\n  }\n  ").concat(e.breakpoints.up("sm")," {\n    font-size: 14px;\n    padding: 7px 14px;\n  }\n  ")})),y=p(i.a,null,p(c.a,{theme:h},p(a.a,{theme:h},p(u.a,null,"Default"),p(f,null,"Customized"))));function b(){return y}},"xLO/":function(n,e,t){t("lPUU"),n.exports=t("TaGV").Object.freeze},yWcT:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return f}));var o=t("kGIj"),r=t("mXGw"),s=t.n(r),a=t("aD51"),i=t("O8uh"),l=t("5893"),d=t("mKyP"),c=t("h7Hf"),u=t("cYeA");s.a.createElement;function p(){var n=Object(o.a)(["\n            background-color: ",";\n            color: #fff;\n            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n            padding: 4px 10px;\n            font-size: 13px;\n            &:hover {\n              background-color: ",";\n            }\n            "," {\n              font-size: 14px;\n              padding: 7px 14px;\n            }\n          "]);return p=function(){return n},n}var m=Object(d.a)({palette:{primary:{main:"#6772e5"}}}),h=Object(a.c)(i.a,null,"Default");function f(){return Object(a.c)(c.a,{theme:m},Object(a.c)(l.a,{theme:m},h,Object(a.c)(i.a,{css:function(n){return Object(a.b)(p(),n.palette.primary.main,Object(u.darken)(n.palette.primary.main,.2),n.breakpoints.up("sm"))}},"Customized")))}},yqa6:function(n,e){n.exports="import React from 'react';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst StyledMenu = styled(({ className, ...props }) => (\n  <Menu {...props} classes={{ paper: className }} />\n))`\n  box-shadow: none;\n  border: 1px solid #d3d4d5;\n\n  li {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nexport default function StyledComponentsPortal() {\n  const [anchorEl, setAnchorEl] = React.useState<EventTarget | null>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <Button\n        aria-owns={anchorEl ? 'simple-menu' : undefined}\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleClick}\n      >\n        Open Menu\n      </Button>\n      <StyledMenu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        getContentAnchorEl={null}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <MenuItem onClick={handleClose}>Profile</MenuItem>\n        <MenuItem onClick={handleClose}>My account</MenuItem>\n        <MenuItem onClick={handleClose}>Logout</MenuItem>\n      </StyledMenu>\n    </div>\n  );\n}\n"},zKiH:function(n,e){n.exports="/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport Button from '@material-ui/core/Button';\n\nexport default function EmotionCSS() {\n  return (\n    <div>\n      <Button>Default</Button>\n      <Button\n        css={css`\n          background-color: #6772e5;\n          color: #fff;\n          box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n          padding: 7px 14px;\n          &:hover {\n            background-color: #5469d4;\n          }\n        `}\n      >\n        Customized\n      </Button>\n    </div>\n  );\n}\n"}},[["CalN",0,1]]]);