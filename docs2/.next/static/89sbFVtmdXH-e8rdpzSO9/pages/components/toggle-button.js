(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{"/LkE":function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return h}));var o=t("mXGw"),a=t.n(o),l=t("NbUR"),i=t("pa6t"),r=t("rXVv"),s=t("hYlH"),u=t("pQ8Y"),g=t("eou5"),c=t("THuk"),m=a.a.createElement,d=m(g.a,{key:1,value:"left"},m(l.a,null)),p=m(g.a,{key:2,value:"center"},m(i.a,null)),f=m(g.a,{key:3,value:"right"},m(r.a,null)),b=m(g.a,{key:4,value:"justify",disabled:!0},m(s.a,null));function h(){var n=a.a.useState("left"),e=n[0],t=n[1],o=function(n,e){t(e)},l=[d,p,f,b];return m(u.a,{container:!0,spacing:2,direction:"column",alignItems:"center"},m(u.a,{item:!0},m(c.a,{size:"small",value:e,exclusive:!0,onChange:o},l)),m(u.a,{item:!0},m(c.a,{size:"medium",value:e,exclusive:!0,onChange:o},l)),m(u.a,{item:!0},m(c.a,{size:"large",value:e,exclusive:!0,onChange:o},l)))}},"1+eU":function(n,e){n.exports='import React from \'react\';\nimport { makeStyles } from \'@material-ui/core/styles\';\nimport FormatAlignLeftIcon from \'@material-ui/icons/FormatAlignLeft\';\nimport FormatAlignCenterIcon from \'@material-ui/icons/FormatAlignCenter\';\nimport FormatAlignRightIcon from \'@material-ui/icons/FormatAlignRight\';\nimport FormatAlignJustifyIcon from \'@material-ui/icons/FormatAlignJustify\';\nimport FormatBoldIcon from \'@material-ui/icons/FormatBold\';\nimport FormatItalicIcon from \'@material-ui/icons/FormatItalic\';\nimport FormatUnderlinedIcon from \'@material-ui/icons/FormatUnderlined\';\nimport FormatColorFillIcon from \'@material-ui/icons/FormatColorFill\';\nimport ArrowDropDownIcon from \'@material-ui/icons/ArrowDropDown\';\nimport Typography from \'@material-ui/core/Typography\';\nimport Grid from \'@material-ui/core/Grid\';\nimport ToggleButton from \'@material-ui/lab/ToggleButton\';\nimport ToggleButtonGroup from \'@material-ui/lab/ToggleButtonGroup\';\n\nconst useStyles = makeStyles(theme => ({\n  toggleContainer: {\n    margin: theme.spacing(2, 0),\n  },\n}));\n\nexport default function ToggleButtons() {\n  const [alignment, setAlignment] = React.useState<string | null>(\'left\');\n  const [formats, setFormats] = React.useState(() => [\'bold\']);\n\n  const handleFormat = (event: React.MouseEvent<HTMLElement>, newFormats: string[]) => {\n    setFormats(newFormats);\n  };\n\n  const handleAlignment = (event: React.MouseEvent<HTMLElement>, newAlignment: string | null) => {\n    setAlignment(newAlignment);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item sm={12} md={6}>\n        <div className={classes.toggleContainer}>\n          <ToggleButtonGroup\n            value={alignment}\n            exclusive\n            onChange={handleAlignment}\n            aria-label="text alignment"\n          >\n            <ToggleButton value="left" aria-label="left aligned">\n              <FormatAlignLeftIcon />\n            </ToggleButton>\n            <ToggleButton value="center" aria-label="centered">\n              <FormatAlignCenterIcon />\n            </ToggleButton>\n            <ToggleButton value="right" aria-label="right aligned">\n              <FormatAlignRightIcon />\n            </ToggleButton>\n            <ToggleButton value="justify" aria-label="justified" disabled>\n              <FormatAlignJustifyIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n        <Typography gutterBottom>Exclusive Selection</Typography>\n        <Typography>\n          Text justification toggle buttons present options for left, right, center, full, and\n          justified text with only one item available for selection at a time. Selecting one option\n          deselects any other.\n        </Typography>\n      </Grid>\n      <Grid item sm={12} md={6}>\n        <div className={classes.toggleContainer}>\n          <ToggleButtonGroup value={formats} onChange={handleFormat} aria-label="text formatting">\n            <ToggleButton value="bold" aria-label="bold">\n              <FormatBoldIcon />\n            </ToggleButton>\n            <ToggleButton value="italic" aria-label="italic">\n              <FormatItalicIcon />\n            </ToggleButton>\n            <ToggleButton value="underlined" aria-label="underlined">\n              <FormatUnderlinedIcon />\n            </ToggleButton>\n            <ToggleButton value="color" aria-label="color" disabled>\n              <FormatColorFillIcon />\n              <ArrowDropDownIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n        <Typography gutterBottom>Multiple Selection</Typography>\n        <Typography>\n          Logically-grouped options, like Bold, Italic, and Underline, allow multiple options to be\n          selected.\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n'},"1TIb":function(n,e){n.exports='import React from \'react\';\nimport { makeStyles } from \'@material-ui/core/styles\';\nimport FormatAlignLeftIcon from \'@material-ui/icons/FormatAlignLeft\';\nimport FormatAlignCenterIcon from \'@material-ui/icons/FormatAlignCenter\';\nimport FormatAlignRightIcon from \'@material-ui/icons/FormatAlignRight\';\nimport FormatAlignJustifyIcon from \'@material-ui/icons/FormatAlignJustify\';\nimport FormatBoldIcon from \'@material-ui/icons/FormatBold\';\nimport FormatItalicIcon from \'@material-ui/icons/FormatItalic\';\nimport FormatUnderlinedIcon from \'@material-ui/icons/FormatUnderlined\';\nimport FormatColorFillIcon from \'@material-ui/icons/FormatColorFill\';\nimport ArrowDropDownIcon from \'@material-ui/icons/ArrowDropDown\';\nimport Typography from \'@material-ui/core/Typography\';\nimport Grid from \'@material-ui/core/Grid\';\nimport ToggleButton from \'@material-ui/lab/ToggleButton\';\nimport ToggleButtonGroup from \'@material-ui/lab/ToggleButtonGroup\';\n\nconst useStyles = makeStyles(theme => ({\n  toggleContainer: {\n    margin: theme.spacing(2, 0),\n  },\n}));\n\nexport default function ToggleButtons() {\n  const [alignment, setAlignment] = React.useState(\'left\');\n  const [formats, setFormats] = React.useState(() => [\'bold\']);\n\n  const handleFormat = (event, newFormats) => {\n    setFormats(newFormats);\n  };\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item sm={12} md={6}>\n        <div className={classes.toggleContainer}>\n          <ToggleButtonGroup\n            value={alignment}\n            exclusive\n            onChange={handleAlignment}\n            aria-label="text alignment"\n          >\n            <ToggleButton value="left" aria-label="left aligned">\n              <FormatAlignLeftIcon />\n            </ToggleButton>\n            <ToggleButton value="center" aria-label="centered">\n              <FormatAlignCenterIcon />\n            </ToggleButton>\n            <ToggleButton value="right" aria-label="right aligned">\n              <FormatAlignRightIcon />\n            </ToggleButton>\n            <ToggleButton value="justify" aria-label="justified" disabled>\n              <FormatAlignJustifyIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n        <Typography gutterBottom>Exclusive Selection</Typography>\n        <Typography>\n          Text justification toggle buttons present options for left, right, center, full, and\n          justified text with only one item available for selection at a time. Selecting one option\n          deselects any other.\n        </Typography>\n      </Grid>\n      <Grid item sm={12} md={6}>\n        <div className={classes.toggleContainer}>\n          <ToggleButtonGroup value={formats} onChange={handleFormat} aria-label="text formatting">\n            <ToggleButton value="bold" aria-label="bold">\n              <FormatBoldIcon />\n            </ToggleButton>\n            <ToggleButton value="italic" aria-label="italic">\n              <FormatItalicIcon />\n            </ToggleButton>\n            <ToggleButton value="underlined" aria-label="underlined">\n              <FormatUnderlinedIcon />\n            </ToggleButton>\n            <ToggleButton value="color" aria-label="color" disabled>\n              <FormatColorFillIcon />\n              <ArrowDropDownIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n        <Typography gutterBottom>Multiple Selection</Typography>\n        <Typography>\n          Logically-grouped options, like Bold, Italic, and Underline, allow multiple options to be\n          selected.\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n'},"28Ad":function(n,e){n.exports='---\ntitle: Toggle Button React component\ncomponents: ToggleButton, ToggleButtonGroup\n---\n\n# Toggle Buttons\n\n<p class="description">Toggle buttons can be used to group related options.</p>\n\nTo emphasize groups of related [Toggle buttons](https://material.io/design/components/buttons.html#toggle-button), a group should share a common container.\n\nThe `ToggleButtonGroup` will control the selected state of its child buttons when given its own `value` prop.\n\n{{"demo": "pages/components/toggle-button/ToggleButtons.js"}}\n\n## \u0420\u0430\u0437\u043c\u0435\u0440\u044b\n\nFancy larger or smaller buttons? Use the `size` property.\n\n{{"demo": "pages/components/toggle-button/ToggleButtonSizes.js"}}\n\n## Enforce value set\n\nIf you want to enforce at least one button to be active, you can adapt your handleChange function.\n\n```jsx\nconst handleFormat = (event, newFormats) => {\n  if (newFormats.length) {\n    setFormats(newFormats);\n  }\n};\n\nconst handleAlignment = (event, newAlignment) => {\n  if (newAlignment !== null) {\n    setAlignment(newAlignment);\n  }\n};\n```\n\n{{"demo": "pages/components/toggle-button/ToggleButtonNotEmpty.js"}}\n\n## Standalone toggle button\n\n{{"demo": "pages/components/toggle-button/StandaloneToggleButton.js"}}\n\n## Customized toggle button\n\n\u041d\u0438\u0436\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430. You can learn more about this in the [overrides documentation page](/customization/components/).\n\n{{"demo": "pages/components/toggle-button/CustomizedDividers.js", "bg": true}}\n\n## \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u044c\n\nToggleButtonGroup has `role="group"`. You should provide an accessible label with `aria-label="label"`, `aria-labelledby="id"` or `<label>`.\n\nToggleButton sets `aria-pressed="<bool>"` according to the button state. You should label each button with `aria-label`.'},"39hq":function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z"}),"FormatUnderlined")},"8GMO":function(n,e){n.exports='---\ntitle: Toggle Button React component\ncomponents: ToggleButton, ToggleButtonGroup\n---\n\n# Toggle Buttons\n\n<p class="description">Toggle buttons can be used to group related options.</p>\n\nTo emphasize groups of related [Toggle buttons](https://material.io/design/components/buttons.html#toggle-button), a group should share a common container.\n\nThe `ToggleButtonGroup` will control the selected state of its child buttons when given its own `value` prop.\n\n{{"demo": "pages/components/toggle-button/ToggleButtons.js"}}\n\n## Tailles\n\nFancy larger or smaller buttons? Use the `size` property.\n\n{{"demo": "pages/components/toggle-button/ToggleButtonSizes.js"}}\n\n## Enforce value set\n\nIf you want to enforce at least one button to be active, you can adapt your handleChange function.\n\n```jsx\nconst handleFormat = (event, newFormats) => {\n  if (newFormats.length) {\n    setFormats(newFormats);\n  }\n};\n\nconst handleAlignment = (event, newAlignment) => {\n  if (newAlignment !== null) {\n    setAlignment(newAlignment);\n  }\n};\n```\n\n{{"demo": "pages/components/toggle-button/ToggleButtonNotEmpty.js"}}\n\n## Standalone toggle button\n\n{{"demo": "pages/components/toggle-button/StandaloneToggleButton.js"}}\n\n## Customized toggle button\n\nVoici un exemple de personnalisation du composant. Vous pouvez en savoir plus dans la [page de documentation des overrides](/customization/components/).\n\n{{"demo": "pages/components/toggle-button/CustomizedDividers.js", "bg": true}}\n\n## Accessibilit\xe9\n\nToggleButtonGroup has `role="group"`. You should provide an accessible label with `aria-label="label"`, `aria-labelledby="id"` or `<label>`.\n\nToggleButton sets `aria-pressed="<bool>"` according to the button state. You should label each button with `aria-label`.'},HEeb:function(n,e,t){var o={"./CustomizedDividers.js":"Shd2","./CustomizedDividers.tsx":"J48j","./StandaloneToggleButton.js":"NMsM","./StandaloneToggleButton.tsx":"OGmN","./ToggleButtonNotEmpty.js":"blrr","./ToggleButtonNotEmpty.tsx":"sXBx","./ToggleButtonSizes.js":"TEbH","./ToggleButtonSizes.tsx":"iJ6Y","./ToggleButtons.js":"1TIb","./ToggleButtons.tsx":"1+eU"};function a(n){var e=l(n);return t(e)}function l(n){if(!t.o(o,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return o[n]}a.keys=function(){return Object.keys(o)},a.resolve=l,n.exports=a,a.id="HEeb"},J0AO:function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown")},J48j:function(n,e){n.exports="import React from 'react';\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport Divider from '@material-ui/core/Divider';\nimport Paper from '@material-ui/core/Paper';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      display: 'flex',\n      border: `1px solid ${theme.palette.divider}`,\n      flexWrap: 'wrap',\n    },\n    divider: {\n      alignSelf: 'stretch',\n      height: 'auto',\n      margin: theme.spacing(1, 0.5),\n    },\n  }),\n);\n\nconst StyledToggleButtonGroup = withStyles(theme => ({\n  grouped: {\n    margin: theme.spacing(0.5),\n    border: 'none',\n    padding: theme.spacing(0, 1),\n    '&:not(:first-child)': {\n      borderRadius: theme.shape.borderRadius,\n    },\n    '&:first-child': {\n      borderRadius: theme.shape.borderRadius,\n    },\n  },\n}))(ToggleButtonGroup);\n\nexport default function CustomizedDividers() {\n  const [alignment, setAlignment] = React.useState('left');\n  const [formats, setFormats] = React.useState(() => ['italic']);\n\n  const handleFormat = (event: React.MouseEvent<HTMLElement>, newFormats: string[]) => {\n    setFormats(newFormats);\n  };\n\n  const handleAlignment = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {\n    setAlignment(newAlignment);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Paper elevation={0} className={classes.paper}>\n        <StyledToggleButtonGroup\n          size=\"small\"\n          value={alignment}\n          exclusive\n          onChange={handleAlignment}\n          aria-label=\"text alignment\"\n        >\n          <ToggleButton value=\"left\" aria-label=\"left aligned\">\n            <FormatAlignLeftIcon />\n          </ToggleButton>\n          <ToggleButton value=\"center\" aria-label=\"centered\">\n            <FormatAlignCenterIcon />\n          </ToggleButton>\n          <ToggleButton value=\"right\" aria-label=\"right aligned\">\n            <FormatAlignRightIcon />\n          </ToggleButton>\n          <ToggleButton value=\"justify\" aria-label=\"justified\" disabled>\n            <FormatAlignJustifyIcon />\n          </ToggleButton>\n        </StyledToggleButtonGroup>\n        <Divider orientation=\"vertical\" className={classes.divider} />\n        <StyledToggleButtonGroup\n          size=\"small\"\n          value={formats}\n          onChange={handleFormat}\n          aria-label=\"text formatting\"\n        >\n          <ToggleButton value=\"bold\" aria-label=\"bold\">\n            <FormatBoldIcon />\n          </ToggleButton>\n          <ToggleButton value=\"italic\" aria-label=\"italic\">\n            <FormatItalicIcon />\n          </ToggleButton>\n          <ToggleButton value=\"underlined\" aria-label=\"underlined\">\n            <FormatUnderlinedIcon />\n          </ToggleButton>\n          <ToggleButton value=\"color\" aria-label=\"color\" disabled>\n            <FormatColorFillIcon />\n            <ArrowDropDownIcon />\n          </ToggleButton>\n        </StyledToggleButtonGroup>\n      </Paper>\n    </div>\n  );\n}\n"},JAbg:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return x}));var o=t("mXGw"),a=t.n(o),l=t("yZEQ"),i=t("NbUR"),r=t("pa6t"),s=t("rXVv"),u=t("hYlH"),g=t("ScAB"),c=t("dkt1"),m=t("y6lT"),d=t("pQ8Y"),p=t("eou5"),f=t("THuk"),b=a.a.createElement,h=Object(l.a)((function(n){return{toggleContainer:{margin:n.spacing(2,0)}}})),v=b(p.a,{value:"left","aria-label":"left aligned"},b(i.a,null)),T=b(p.a,{value:"center","aria-label":"centered"},b(r.a,null)),B=b(p.a,{value:"right","aria-label":"right aligned"},b(s.a,null)),w=b(p.a,{value:"justify","aria-label":"justified",disabled:!0},b(u.a,null)),F=b(p.a,{value:"laptop","aria-label":"laptop"},b(g.a,null)),y=b(p.a,{value:"tv","aria-label":"tv"},b(c.a,null)),A=b(p.a,{value:"phone","aria-label":"phone"},b(m.a,null));function x(){var n=a.a.useState("left"),e=n[0],t=n[1],o=a.a.useState((function(){return["phone"]})),l=o[0],i=o[1],r=h();return b(d.a,{container:!0,spacing:2},b(d.a,{item:!0,sm:12,md:6},b("div",{className:r.toggleContainer},b(f.a,{value:e,exclusive:!0,onChange:function(n,e){null!==e&&t(e)},"aria-label":"text alignment"},v,T,B,w))),b(d.a,{item:!0,sm:12,md:6},b("div",{className:r.toggleContainer},b(f.a,{value:l,onChange:function(n,e){e.length&&i(e)},"aria-label":"device"},F,y,A))))}},NMsM:function(n,e){n.exports="import React from 'react';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\n\nexport default function StandaloneToggleButton() {\n  const [selected, setSelected] = React.useState(false);\n\n  return (\n    <ToggleButton\n      value=\"check\"\n      selected={selected}\n      onChange={() => {\n        setSelected(!selected);\n      }}\n    >\n      <CheckIcon />\n    </ToggleButton>\n  );\n}\n"},NbUR:function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M15 15H3v2h12v-2zm0-8H3v2h12V7zM3 13h18v-2H3v2zm0 8h18v-2H3v2zM3 3v2h18V3H3z"}),"FormatAlignLeft")},OGmN:function(n,e){n.exports="import React from 'react';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\n\nexport default function StandaloneToggleButton() {\n  const [selected, setSelected] = React.useState(false);\n\n  return (\n    <ToggleButton\n      value=\"check\"\n      selected={selected}\n      onChange={() => {\n        setSelected(!selected);\n      }}\n    >\n      <CheckIcon />\n    </ToggleButton>\n  );\n}\n"},PCDN:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return E}));var o=t("mXGw"),a=t.n(o),l=t("yZEQ"),i=t("NbUR"),r=t("pa6t"),s=t("rXVv"),u=t("hYlH"),g=t("xi/j"),c=t("YmQZ"),m=t("39hq"),d=t("tu/a"),p=t("J0AO"),f=t("Oy88"),b=t("pQ8Y"),h=t("eou5"),v=t("THuk"),T=a.a.createElement,B=Object(l.a)((function(n){return{toggleContainer:{margin:n.spacing(2,0)}}})),w=T(h.a,{value:"left","aria-label":"left aligned"},T(i.a,null)),F=T(h.a,{value:"center","aria-label":"centered"},T(r.a,null)),y=T(h.a,{value:"right","aria-label":"right aligned"},T(s.a,null)),A=T(h.a,{value:"justify","aria-label":"justified",disabled:!0},T(u.a,null)),x=T(f.a,{gutterBottom:!0},"Exclusive Selection"),G=T(f.a,null,"Text justification toggle buttons present options for left, right, center, full, and justified text with only one item available for selection at a time. Selecting one option deselects any other."),C=T(h.a,{value:"bold","aria-label":"bold"},T(g.a,null)),I=T(h.a,{value:"italic","aria-label":"italic"},T(c.a,null)),S=T(h.a,{value:"underlined","aria-label":"underlined"},T(m.a,null)),z=T(h.a,{value:"color","aria-label":"color",disabled:!0},T(d.a,null),T(p.a,null)),j=T(f.a,{gutterBottom:!0},"Multiple Selection"),R=T(f.a,null,"Logically-grouped options, like Bold, Italic, and Underline, allow multiple options to be selected.");function E(){var n=a.a.useState("left"),e=n[0],t=n[1],o=a.a.useState((function(){return["bold"]})),l=o[0],i=o[1],r=B();return T(b.a,{container:!0,spacing:2},T(b.a,{item:!0,sm:12,md:6},T("div",{className:r.toggleContainer},T(v.a,{value:e,exclusive:!0,onChange:function(n,e){t(e)},"aria-label":"text alignment"},w,F,y,A)),x,G),T(b.a,{item:!0,sm:12,md:6},T("div",{className:r.toggleContainer},T(v.a,{value:l,onChange:function(n,e){i(e)},"aria-label":"text formatting"},C,I,S,z)),j,R))}},PEGU:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return R}));var o=t("mXGw"),a=t.n(o),l=t("yZEQ"),i=t("WLtd"),r=t("XpU0"),s=t("NbUR"),u=t("pa6t"),g=t("rXVv"),c=t("hYlH"),m=t("xi/j"),d=t("YmQZ"),p=t("39hq"),f=t("tu/a"),b=t("J0AO"),h=t("FAXT"),v=t("VPks"),T=t("eou5"),B=t("THuk"),w=a.a.createElement,F=Object(l.a)((function(n){return Object(i.a)({paper:{display:"flex",border:"1px solid ".concat(n.palette.divider),flexWrap:"wrap"},divider:{alignSelf:"stretch",height:"auto",margin:n.spacing(1,.5)}})})),y=Object(r.default)((function(n){return{grouped:{margin:n.spacing(.5),border:"none",padding:n.spacing(0,1),"&:not(:first-child)":{borderRadius:n.shape.borderRadius},"&:first-child":{borderRadius:n.shape.borderRadius}}}}))(B.a),A=w(T.a,{value:"left","aria-label":"left aligned"},w(s.a,null)),x=w(T.a,{value:"center","aria-label":"centered"},w(u.a,null)),G=w(T.a,{value:"right","aria-label":"right aligned"},w(g.a,null)),C=w(T.a,{value:"justify","aria-label":"justified",disabled:!0},w(c.a,null)),I=w(T.a,{value:"bold","aria-label":"bold"},w(m.a,null)),S=w(T.a,{value:"italic","aria-label":"italic"},w(d.a,null)),z=w(T.a,{value:"underlined","aria-label":"underlined"},w(p.a,null)),j=w(T.a,{value:"color","aria-label":"color",disabled:!0},w(f.a,null),w(b.a,null));function R(){var n=a.a.useState("left"),e=n[0],t=n[1],o=a.a.useState((function(){return["italic"]})),l=o[0],i=o[1],r=F();return w("div",null,w(v.a,{elevation:0,className:r.paper},w(y,{size:"small",value:e,exclusive:!0,onChange:function(n,e){t(e)},"aria-label":"text alignment"},A,x,G,C),w(h.a,{orientation:"vertical",className:r.divider}),w(y,{size:"small",value:l,onChange:function(n,e){i(e)},"aria-label":"text formatting"},I,S,z,j)))}},QJXJ:function(n,e){n.exports='---\ntitle: Componente React para Bot\xf5es de Altern\xe2ncia\ncomponents: ToggleButton, ToggleButtonGroup\n---\n\n# Bot\xf5es de altern\xe2ncia\n\n<p class="description">Os bot\xf5es de altern\xe2ncia podem ser usados para agrupar op\xe7\xf5es relacionadas.</p>\n\nPara enfatizar grupos de [bot\xf5es de altern\xe2ncia](https://material.io/design/components/buttons.html#toggle-button) relacionados, o grupo deve ter um container em comum.\n\nO `ToggleButtonGroup` controlar\xe1 o estado selecionado de seus bot\xf5es filhos quando receber sua propriedade `value`.\n\n{{"demo": "pages/components/toggle-button/ToggleButtons.js"}}\n\n## Tamanhos\n\nGosta de bot\xf5es maiores ou menores? Use a propriedade `size`.\n\n{{"demo": "pages/components/toggle-button/ToggleButtonSizes.js"}}\n\n## Enforce value set\n\nIf you want to enforce at least one button to be active, you can adapt your handleChange function.\n\n```jsx\nconst handleFormat = (event, newFormats) => {\n  if (newFormats.length) {\n    setFormats(newFormats);\n  }\n};\n\nconst handleAlignment = (event, newAlignment) => {\n  if (newAlignment !== null) {\n    setAlignment(newAlignment);\n  }\n};\n```\n\n{{"demo": "pages/components/toggle-button/ToggleButtonNotEmpty.js"}}\n\n## Standalone toggle button\n\n{{"demo": "pages/components/toggle-button/StandaloneToggleButton.js"}}\n\n## Customized toggle button\n\nAqui est\xe1 um exemplo de customiza\xe7\xe3o do componente. Voc\xea pode aprender mais sobre isso na [p\xe1gina de documenta\xe7\xe3o de sobrescritas](/customization/components/).\n\n{{"demo": "pages/components/toggle-button/CustomizedDividers.js", "bg": true}}\n\n## Acessibilidade\n\nToggleButtonGroup has `role="group"`. You should provide an accessible label with `aria-label="label"`, `aria-labelledby="id"` or `<label>`.\n\nToggleButton sets `aria-pressed="<bool>"` according to the button state. You should label each button with `aria-label`.'},ScAB:function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M20 18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2H0v2h24v-2h-4zM4 6h16v10H4V6z"}),"Laptop")},Shd2:function(n,e){n.exports="import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined';\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport Divider from '@material-ui/core/Divider';\nimport Paper from '@material-ui/core/Paper';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    display: 'flex',\n    border: `1px solid ${theme.palette.divider}`,\n    flexWrap: 'wrap',\n  },\n  divider: {\n    alignSelf: 'stretch',\n    height: 'auto',\n    margin: theme.spacing(1, 0.5),\n  },\n}));\n\nconst StyledToggleButtonGroup = withStyles(theme => ({\n  grouped: {\n    margin: theme.spacing(0.5),\n    border: 'none',\n    padding: theme.spacing(0, 1),\n    '&:not(:first-child)': {\n      borderRadius: theme.shape.borderRadius,\n    },\n    '&:first-child': {\n      borderRadius: theme.shape.borderRadius,\n    },\n  },\n}))(ToggleButtonGroup);\n\nexport default function CustomizedDividers() {\n  const [alignment, setAlignment] = React.useState('left');\n  const [formats, setFormats] = React.useState(() => ['italic']);\n\n  const handleFormat = (event, newFormats) => {\n    setFormats(newFormats);\n  };\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Paper elevation={0} className={classes.paper}>\n        <StyledToggleButtonGroup\n          size=\"small\"\n          value={alignment}\n          exclusive\n          onChange={handleAlignment}\n          aria-label=\"text alignment\"\n        >\n          <ToggleButton value=\"left\" aria-label=\"left aligned\">\n            <FormatAlignLeftIcon />\n          </ToggleButton>\n          <ToggleButton value=\"center\" aria-label=\"centered\">\n            <FormatAlignCenterIcon />\n          </ToggleButton>\n          <ToggleButton value=\"right\" aria-label=\"right aligned\">\n            <FormatAlignRightIcon />\n          </ToggleButton>\n          <ToggleButton value=\"justify\" aria-label=\"justified\" disabled>\n            <FormatAlignJustifyIcon />\n          </ToggleButton>\n        </StyledToggleButtonGroup>\n        <Divider orientation=\"vertical\" className={classes.divider} />\n        <StyledToggleButtonGroup\n          size=\"small\"\n          value={formats}\n          onChange={handleFormat}\n          aria-label=\"text formatting\"\n        >\n          <ToggleButton value=\"bold\" aria-label=\"bold\">\n            <FormatBoldIcon />\n          </ToggleButton>\n          <ToggleButton value=\"italic\" aria-label=\"italic\">\n            <FormatItalicIcon />\n          </ToggleButton>\n          <ToggleButton value=\"underlined\" aria-label=\"underlined\">\n            <FormatUnderlinedIcon />\n          </ToggleButton>\n          <ToggleButton value=\"color\" aria-label=\"color\" disabled>\n            <FormatColorFillIcon />\n            <ArrowDropDownIcon />\n          </ToggleButton>\n        </StyledToggleButtonGroup>\n      </Paper>\n    </div>\n  );\n}\n"},TEbH:function(n,e){n.exports="import React from 'react';\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\nimport Grid from '@material-ui/core/Grid';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nexport default function ToggleButtonSizes() {\n  const [alignment, setAlignment] = React.useState('left');\n\n  const handleChange = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  const children = [\n    <ToggleButton key={1} value=\"left\">\n      <FormatAlignLeftIcon />\n    </ToggleButton>,\n    <ToggleButton key={2} value=\"center\">\n      <FormatAlignCenterIcon />\n    </ToggleButton>,\n    <ToggleButton key={3} value=\"right\">\n      <FormatAlignRightIcon />\n    </ToggleButton>,\n    <ToggleButton key={4} value=\"justify\" disabled>\n      <FormatAlignJustifyIcon />\n    </ToggleButton>,\n  ];\n\n  return (\n    <Grid container spacing={2} direction=\"column\" alignItems=\"center\">\n      <Grid item>\n        <ToggleButtonGroup size=\"small\" value={alignment} exclusive onChange={handleChange}>\n          {children}\n        </ToggleButtonGroup>\n      </Grid>\n      <Grid item>\n        <ToggleButtonGroup size=\"medium\" value={alignment} exclusive onChange={handleChange}>\n          {children}\n        </ToggleButtonGroup>\n      </Grid>\n      <Grid item>\n        <ToggleButtonGroup size=\"large\" value={alignment} exclusive onChange={handleChange}>\n          {children}\n        </ToggleButtonGroup>\n      </Grid>\n    </Grid>\n  );\n}\n"},UQQe:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return u}));var o=t("mXGw"),a=t.n(o),l=t("XSg6"),i=t("eou5"),r=a.a.createElement,s=r(l.a,null);function u(){var n=a.a.useState(!1),e=n[0],t=n[1];return r(i.a,{value:"check",selected:e,onChange:function(){t(!e)}},s)}},WLtd:function(n,e,t){"use strict";function o(n){return n}t.d(e,"a",(function(){return o}))},XPlc:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return E}));var o=t("mXGw"),a=t.n(o),l=t("yZEQ"),i=t("NbUR"),r=t("pa6t"),s=t("rXVv"),u=t("hYlH"),g=t("xi/j"),c=t("YmQZ"),m=t("39hq"),d=t("tu/a"),p=t("J0AO"),f=t("Oy88"),b=t("pQ8Y"),h=t("eou5"),v=t("THuk"),T=a.a.createElement,B=Object(l.a)((function(n){return{toggleContainer:{margin:n.spacing(2,0)}}})),w=T(h.a,{value:"left","aria-label":"left aligned"},T(i.a,null)),F=T(h.a,{value:"center","aria-label":"centered"},T(r.a,null)),y=T(h.a,{value:"right","aria-label":"right aligned"},T(s.a,null)),A=T(h.a,{value:"justify","aria-label":"justified",disabled:!0},T(u.a,null)),x=T(f.a,{gutterBottom:!0},"Exclusive Selection"),G=T(f.a,null,"Text justification toggle buttons present options for left, right, center, full, and justified text with only one item available for selection at a time. Selecting one option deselects any other."),C=T(h.a,{value:"bold","aria-label":"bold"},T(g.a,null)),I=T(h.a,{value:"italic","aria-label":"italic"},T(c.a,null)),S=T(h.a,{value:"underlined","aria-label":"underlined"},T(m.a,null)),z=T(h.a,{value:"color","aria-label":"color",disabled:!0},T(d.a,null),T(p.a,null)),j=T(f.a,{gutterBottom:!0},"Multiple Selection"),R=T(f.a,null,"Logically-grouped options, like Bold, Italic, and Underline, allow multiple options to be selected.");function E(){var n=a.a.useState("left"),e=n[0],t=n[1],o=a.a.useState((function(){return["bold"]})),l=o[0],i=o[1],r=B();return T(b.a,{container:!0,spacing:2},T(b.a,{item:!0,sm:12,md:6},T("div",{className:r.toggleContainer},T(v.a,{value:e,exclusive:!0,onChange:function(n,e){t(e)},"aria-label":"text alignment"},w,F,y,A)),x,G),T(b.a,{item:!0,sm:12,md:6},T("div",{className:r.toggleContainer},T(v.a,{value:l,onChange:function(n,e){i(e)},"aria-label":"text formatting"},C,I,S,z)),j,R))}},XSg6:function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"}),"Check")},YiLH:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return u}));var o=t("mXGw"),a=t.n(o),l=t("XSg6"),i=t("eou5"),r=a.a.createElement,s=r(l.a,null);function u(){var n=a.a.useState(!1),e=n[0],t=n[1];return r(i.a,{value:"check",selected:e,onChange:function(){t(!e)}},s)}},YmQZ:function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z"}),"FormatItalic")},aRtR:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return x}));var o=t("mXGw"),a=t.n(o),l=t("yZEQ"),i=t("NbUR"),r=t("pa6t"),s=t("rXVv"),u=t("hYlH"),g=t("ScAB"),c=t("dkt1"),m=t("y6lT"),d=t("pQ8Y"),p=t("eou5"),f=t("THuk"),b=a.a.createElement,h=Object(l.a)((function(n){return{toggleContainer:{margin:n.spacing(2,0)}}})),v=b(p.a,{value:"left","aria-label":"left aligned"},b(i.a,null)),T=b(p.a,{value:"center","aria-label":"centered"},b(r.a,null)),B=b(p.a,{value:"right","aria-label":"right aligned"},b(s.a,null)),w=b(p.a,{value:"justify","aria-label":"justified",disabled:!0},b(u.a,null)),F=b(p.a,{value:"laptop","aria-label":"laptop"},b(g.a,null)),y=b(p.a,{value:"tv","aria-label":"tv"},b(c.a,null)),A=b(p.a,{value:"phone","aria-label":"phone"},b(m.a,null));function x(){var n=a.a.useState("left"),e=n[0],t=n[1],o=a.a.useState((function(){return["phone"]})),l=o[0],i=o[1],r=h();return b(d.a,{container:!0,spacing:2},b(d.a,{item:!0,sm:12,md:6},b("div",{className:r.toggleContainer},b(f.a,{value:e,exclusive:!0,onChange:function(n,e){null!==e&&t(e)},"aria-label":"text alignment"},v,T,B,w))),b(d.a,{item:!0,sm:12,md:6},b("div",{className:r.toggleContainer},b(f.a,{value:l,onChange:function(n,e){e.length&&i(e)},"aria-label":"device"},F,y,A))))}},blrr:function(n,e){n.exports='import React from \'react\';\nimport { makeStyles } from \'@material-ui/core/styles\';\nimport FormatAlignLeftIcon from \'@material-ui/icons/FormatAlignLeft\';\nimport FormatAlignCenterIcon from \'@material-ui/icons/FormatAlignCenter\';\nimport FormatAlignRightIcon from \'@material-ui/icons/FormatAlignRight\';\nimport FormatAlignJustifyIcon from \'@material-ui/icons/FormatAlignJustify\';\nimport LaptopIcon from \'@material-ui/icons/Laptop\';\nimport TvIcon from \'@material-ui/icons/Tv\';\nimport PhoneAndroidIcon from \'@material-ui/icons/PhoneAndroid\';\nimport Grid from \'@material-ui/core/Grid\';\nimport ToggleButton from \'@material-ui/lab/ToggleButton\';\nimport ToggleButtonGroup from \'@material-ui/lab/ToggleButtonGroup\';\n\nconst useStyles = makeStyles(theme => ({\n  toggleContainer: {\n    margin: theme.spacing(2, 0),\n  },\n}));\n\nexport default function ToggleButtonNotEmpty() {\n  const [alignment, setAlignment] = React.useState(\'left\');\n  const [formats, setFormats] = React.useState(() => [\'phone\']);\n\n  const handleFormat = (event, newFormats) => {\n    if (newFormats.length) {\n      setFormats(newFormats);\n    }\n  };\n\n  const handleAlignment = (event, newAlignment) => {\n    if (newAlignment !== null) {\n      setAlignment(newAlignment);\n    }\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item sm={12} md={6}>\n        <div className={classes.toggleContainer}>\n          <ToggleButtonGroup\n            value={alignment}\n            exclusive\n            onChange={handleAlignment}\n            aria-label="text alignment"\n          >\n            <ToggleButton value="left" aria-label="left aligned">\n              <FormatAlignLeftIcon />\n            </ToggleButton>\n            <ToggleButton value="center" aria-label="centered">\n              <FormatAlignCenterIcon />\n            </ToggleButton>\n            <ToggleButton value="right" aria-label="right aligned">\n              <FormatAlignRightIcon />\n            </ToggleButton>\n            <ToggleButton value="justify" aria-label="justified" disabled>\n              <FormatAlignJustifyIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n      </Grid>\n      <Grid item sm={12} md={6}>\n        <div className={classes.toggleContainer}>\n          <ToggleButtonGroup value={formats} onChange={handleFormat} aria-label="device">\n            <ToggleButton value="laptop" aria-label="laptop">\n              <LaptopIcon />\n            </ToggleButton>\n            <ToggleButton value="tv" aria-label="tv">\n              <TvIcon />\n            </ToggleButton>\n            <ToggleButton value="phone" aria-label="phone">\n              <PhoneAndroidIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n'},dkt1:function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M21 3H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.1-.9-2-2-2zm0 14H3V5h18v12z"}),"Tv")},fnJA:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/toggle-button",function(){return t("kHxQ")}])},fyWk:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return j}));var o=t("mXGw"),a=t.n(o),l=t("yZEQ"),i=t("XpU0"),r=t("NbUR"),s=t("pa6t"),u=t("rXVv"),g=t("hYlH"),c=t("xi/j"),m=t("YmQZ"),d=t("39hq"),p=t("tu/a"),f=t("J0AO"),b=t("FAXT"),h=t("VPks"),v=t("eou5"),T=t("THuk"),B=a.a.createElement,w=Object(l.a)((function(n){return{paper:{display:"flex",border:"1px solid ".concat(n.palette.divider),flexWrap:"wrap"},divider:{alignSelf:"stretch",height:"auto",margin:n.spacing(1,.5)}}})),F=Object(i.default)((function(n){return{grouped:{margin:n.spacing(.5),border:"none",padding:n.spacing(0,1),"&:not(:first-child)":{borderRadius:n.shape.borderRadius},"&:first-child":{borderRadius:n.shape.borderRadius}}}}))(T.a),y=B(v.a,{value:"left","aria-label":"left aligned"},B(r.a,null)),A=B(v.a,{value:"center","aria-label":"centered"},B(s.a,null)),x=B(v.a,{value:"right","aria-label":"right aligned"},B(u.a,null)),G=B(v.a,{value:"justify","aria-label":"justified",disabled:!0},B(g.a,null)),C=B(v.a,{value:"bold","aria-label":"bold"},B(c.a,null)),I=B(v.a,{value:"italic","aria-label":"italic"},B(m.a,null)),S=B(v.a,{value:"underlined","aria-label":"underlined"},B(d.a,null)),z=B(v.a,{value:"color","aria-label":"color",disabled:!0},B(p.a,null),B(f.a,null));function j(){var n=a.a.useState("left"),e=n[0],t=n[1],o=a.a.useState((function(){return["italic"]})),l=o[0],i=o[1],r=w();return B("div",null,B(h.a,{elevation:0,className:r.paper},B(F,{size:"small",value:e,exclusive:!0,onChange:function(n,e){t(e)},"aria-label":"text alignment"},y,A,x,G),B(b.a,{orientation:"vertical",className:r.divider}),B(F,{size:"small",value:l,onChange:function(n,e){i(e)},"aria-label":"text formatting"},C,I,S,z)))}},gZYQ:function(n,e){n.exports='---\ntitle: crwdns92410:0crwdne92410:0\ncomponents: crwdns92412:0crwdne92412:0\n---\n\n# crwdns92414:0crwdne92414:0\n\n<p class="description">crwdns92416:0crwdne92416:0</p>\n\ncrwdns92418:0crwdne92418:0\n\ncrwdns100540:0crwdne100540:0\n\ncrwdns92422:0crwdne92422:0\n\n## crwdns92424:0crwdne92424:0\n\ncrwdns92426:0crwdne92426:0 crwdns92428:0crwdne92428:0\n\ncrwdns92430:0crwdne92430:0\n\n## crwdns109373:0crwdne109373:0\n\ncrwdns109375:0crwdne109375:0\n\n```jsx\ncrwdns109377:0crwdne109377:0\n```\n\ncrwdns109379:0crwdne109379:0\n\n## crwdns109381:0crwdne109381:0\n\ncrwdns109383:0crwdne109383:0\n\n## crwdns109385:0crwdne109385:0\n\ncrwdns109387:0crwdne109387:0 crwdns109389:0crwdne109389:0\n\ncrwdns109391:0crwdne109391:0\n\n## crwdns109393:0crwdne109393:0\n\ncrwdns109395:0crwdne109395:0 crwdns109397:0crwdne109397:0\n\ncrwdns109399:0crwdne109399:0 crwdns109401:0crwdne109401:0'},hYlH:function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M3 21h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18V7H3v2zm0-6v2h18V3H3z"}),"FormatAlignJustify")},iJ6Y:function(n,e){n.exports="import React from 'react';\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\nimport Grid from '@material-ui/core/Grid';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nexport default function ToggleButtonSizes() {\n  const [alignment, setAlignment] = React.useState('left');\n\n  const handleChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {\n    setAlignment(newAlignment);\n  };\n\n  const children = [\n    <ToggleButton key={1} value=\"left\">\n      <FormatAlignLeftIcon />\n    </ToggleButton>,\n    <ToggleButton key={2} value=\"center\">\n      <FormatAlignCenterIcon />\n    </ToggleButton>,\n    <ToggleButton key={3} value=\"right\">\n      <FormatAlignRightIcon />\n    </ToggleButton>,\n    <ToggleButton key={4} value=\"justify\" disabled>\n      <FormatAlignJustifyIcon />\n    </ToggleButton>,\n  ];\n\n  return (\n    <Grid container spacing={2} direction=\"column\" alignItems=\"center\">\n      <Grid item>\n        <ToggleButtonGroup size=\"small\" value={alignment} exclusive onChange={handleChange}>\n          {children}\n        </ToggleButtonGroup>\n      </Grid>\n      <Grid item>\n        <ToggleButtonGroup size=\"medium\" value={alignment} exclusive onChange={handleChange}>\n          {children}\n        </ToggleButtonGroup>\n      </Grid>\n      <Grid item>\n        <ToggleButtonGroup size=\"large\" value={alignment} exclusive onChange={handleChange}>\n          {children}\n        </ToggleButtonGroup>\n      </Grid>\n    </Grid>\n  );\n}\n"},kHxQ:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return g}));var o=t("mXGw"),a=t.n(o),l=t("e+1t"),i=a.a.createElement,r=t("qvzi"),s=t("HEeb"),u=i(l.a,{req:r,reqSource:s,reqPrefix:"pages/components/toggle-button"});function g(){return u}},lHrC:function(n,e){n.exports='---\ntitle: Toggle Button React component\ncomponents: ToggleButton, ToggleButtonGroup\n---\n\n# Toggle Buttons\n\n<p class="description">Los botones de alternancia se pueden utilizar para agrupar opciones relacionadas.</p>\n\nPara enfatizar los grupos de botones Toggle relacionados, un grupo debe compartir un contenedor com\xfan.\n\nEl `ToggleButtonGroup` controlar\xe1 el estado seleccionado de sus botones hijos cuando se le d\xe9 su propio `valor` prop.\n\n{{"demo": "pages/components/toggle-button/ToggleButtons.js"}}\n\n## Tama\xf1os\n\nBotones m\xe1s grandes o m\xe1s peque\xf1os? Usa la propiedad `size`.\n\n{{"demo": "pages/components/toggle-button/ToggleButtonSizes.js"}}\n\n## Enforce value set\n\nIf you want to enforce at least one button to be active, you can adapt your handleChange function.\n\n```jsx\nconst handleFormat = (event, newFormats) => {\n  if (newFormats.length) {\n    setFormats(newFormats);\n  }\n};\n\nconst handleAlignment = (event, newAlignment) => {\n  if (newAlignment !== null) {\n    setAlignment(newAlignment);\n  }\n};\n```\n\n{{"demo": "pages/components/toggle-button/ToggleButtonNotEmpty.js"}}\n\n## Standalone toggle button\n\n{{"demo": "pages/components/toggle-button/StandaloneToggleButton.js"}}\n\n## Customized toggle button\n\nHere is an example of customizing the component. You can learn more about this in the [overrides documentation page](/customization/components/).\n\n{{"demo": "pages/components/toggle-button/CustomizedDividers.js", "bg": true}}\n\n## Accesibilidad\n\nToggleButtonGroup has `role="group"`. You should provide an accessible label with `aria-label="label"`, `aria-labelledby="id"` or `<label>`.\n\nToggleButton sets `aria-pressed="<bool>"` according to the button state. You should label each button with `aria-label`.'},mKiA:function(n,e){n.exports='---\ntitle: Schalter React Komponente\ncomponents: ToggleButton, ToggleButtonGroup\n---\n\n# Schalter (Toggle Buttons)\n\n<p class="description">Schalter k\xf6nnen verwendet werden, um verwandte Optionen zu gruppieren.</p>\n\nUm Gruppen von verwandten [Schaltern](https://material.io/design/components/buttons.html#toggle-button), hervorzuheben, sollte eine Gruppe einen gemeinsamen Container verwenden.\n\nThe `ToggleButtonGroup` will control the selected state of its child buttons when given its own `value` prop.\n\n{{"demo": "pages/components/toggle-button/ToggleButtons.js"}}\n\n## Gr\xf6\xdfen\n\nFancy larger or smaller buttons? Verwende die Eigenschaft `size`.\n\n{{"demo": "pages/components/toggle-button/ToggleButtonSizes.js"}}\n\n## Enforce value set\n\nIf you want to enforce at least one button to be active, you can adapt your handleChange function.\n\n```jsx\nconst handleFormat = (event, newFormats) => {\n  if (newFormats.length) {\n    setFormats(newFormats);\n  }\n};\n\nconst handleAlignment = (event, newAlignment) => {\n  if (newAlignment !== null) {\n    setAlignment(newAlignment);\n  }\n};\n```\n\n{{"demo": "pages/components/toggle-button/ToggleButtonNotEmpty.js"}}\n\n## Standalone toggle button\n\n{{"demo": "pages/components/toggle-button/StandaloneToggleButton.js"}}\n\n## Customized toggle button\n\nHier ist ein Beispiel zum Anpassen der Komponente. Mehr dazu erfahren Sie auf der [\xdcberschreibungsdokumentationsseite](/customization/components/).\n\n{{"demo": "pages/components/toggle-button/CustomizedDividers.js", "bg": true}}\n\n## Barrierefreiheit\n\nToggleButtonGroup has `role="group"`. You should provide an accessible label with `aria-label="label"`, `aria-labelledby="id"` or `<label>`.\n\nToggleButton sets `aria-pressed="<bool>"` according to the button state. You should label each button with `aria-label`.'},mWc7:function(n,e){n.exports='---\ntitle: \u5207\u6362\u6309\u94aeReact\u7ec4\u4ef6\ncomponents: ToggleButton, ToggleButtonGroup\n---\n\n# Toggle Button \u5207\u6362\u6309\u94ae\n\n<p class="description">Toggle Buttons \u53ef\u7528\u4e8e\u5bf9\u76f8\u5173\u9009\u9879\u8fdb\u884c\u5206\u7ec4\u3002</p>\n\n\u4e3a\u4e86\u5f3a\u8c03\u7ec4\u5408\u4e4b\u95f4\u7684\u5173\u8054\uff0c\u6bcf\u4e00\u7ec4 [Toggle buttons](https://material.io/design/components/buttons.html#toggle-button) \u5e94\u8be5\u5171\u4eab\u4e00\u4e2a\u5bb9\u5668\u3002\n\nThe `ToggleButtonGroup` will control the selected state of its child buttons when given its own `value` prop.\n\n{{"demo": "pages/components/toggle-button/ToggleButtons.js"}}\n\n## \u5c3a\u5bf8\n\n\u60f3\u8981\u66f4\u5927\u6216\u66f4\u5c0f\u7684\u6309\u94ae\uff1f \u4f60\u53ef\u4ee5\u4f7f\u7528 `size` \u5c5e\u6027\u3002\n\n{{"demo": "pages/components/toggle-button/ToggleButtonSizes.js"}}\n\n## Enforce value set\n\nIf you want to enforce at least one button to be active, you can adapt your handleChange function.\n\n```jsx\nconst handleFormat = (event, newFormats) => {\n  if (newFormats.length) {\n    setFormats(newFormats);\n  }\n};\n\nconst handleAlignment = (event, newAlignment) => {\n  if (newAlignment !== null) {\n    setAlignment(newAlignment);\n  }\n};\n```\n\n{{"demo": "pages/components/toggle-button/ToggleButtonNotEmpty.js"}}\n\n## Standalone toggle button\n\n{{"demo": "pages/components/toggle-button/StandaloneToggleButton.js"}}\n\n## Customized toggle button\n\n\u4ee5\u4e0b\u662f\u81ea\u5b9a\u4e49\u7ec4\u4ef6\u7684\u4e00\u4e2a\u793a\u4f8b\u3002 \u60a8\u53ef\u4ee5\u5728[\u91cd\u5199\u6587\u6863\u9875](/customization/components/)\u4e2d\u4e86\u89e3\u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\u3002\n\n{{"demo": "pages/components/toggle-button/CustomizedDividers.js", "bg": true}}\n\n## \u53ef\u8bbf\u95ee\u6027\n\nToggleButtonGroup has `role="group"`. You should provide an accessible label with `aria-label="label"`, `aria-labelledby="id"` or `<label>`.\n\nToggleButton sets `aria-pressed="<bool>"` according to the button state. You should label each button with `aria-label`.'},pQ8Y:function(n,e,t){"use strict";var o=t("2Fjn"),a=t("bZJ2"),l=t("yLsn"),i=t.n(l),r=t("z3IF"),s=t("mXGw"),u=t("PDtE"),g=t("XpU0"),c=s.createElement,m=[0,1,2,3,4,5,6,7,8,9,10],d=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function p(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,t=i()(n);return"".concat(t/e).concat(String(n).replace(String(t),"")||"px")}var f=s.forwardRef((function(n,e){var t=n.alignContent,a=void 0===t?"stretch":t,l=n.alignItems,i=void 0===l?"stretch":l,s=n.classes,g=n.className,m=n.component,d=void 0===m?"div":m,p=n.container,f=void 0!==p&&p,b=n.direction,h=void 0===b?"row":b,v=n.item,T=void 0!==v&&v,B=n.justify,w=void 0===B?"flex-start":B,F=n.lg,y=void 0!==F&&F,A=n.md,x=void 0!==A&&A,G=n.sm,C=void 0!==G&&G,I=n.spacing,S=void 0===I?0:I,z=n.wrap,j=void 0===z?"wrap":z,R=n.xl,E=void 0!==R&&R,k=n.xs,H=void 0!==k&&k,N=n.zeroMinWidth,L=void 0!==N&&N,D=Object(o.a)(n,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),M=Object(u.a)(s.root,g,f&&[s.container,0!==S&&s["spacing-xs-".concat(String(S))]],T&&s.item,L&&s.zeroMinWidth,"row"!==h&&s["direction-xs-".concat(String(h))],"wrap"!==j&&s["wrap-xs-".concat(String(j))],"stretch"!==i&&s["align-items-xs-".concat(String(i))],"stretch"!==a&&s["align-content-xs-".concat(String(a))],"flex-start"!==w&&s["justify-xs-".concat(String(w))],!1!==H&&s["grid-xs-".concat(String(H))],!1!==C&&s["grid-sm-".concat(String(C))],!1!==x&&s["grid-md-".concat(String(x))],!1!==y&&s["grid-lg-".concat(String(y))],!1!==E&&s["grid-xl-".concat(String(E))]);return c(d,Object(r.a)({className:M,ref:e},D))})),b=Object(g.default)((function(n){return Object(a.a)({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(n,e){var t={};return m.forEach((function(o){var a=n.spacing(o);0!==a&&(t["spacing-".concat(e,"-").concat(o)]={margin:"-".concat(p(a,2)),width:"calc(100% + ".concat(p(a),")"),"& > $item":{padding:p(a,2)}})})),t}(n,"xs"),{},n.breakpoints.keys.reduce((function(e,t){return function(n,e,t){var o={};d.forEach((function(n){var e="grid-".concat(t,"-").concat(n);if(!0!==n)if("auto"!==n){var a="".concat(Math.round(n/12*1e8)/1e6,"%");o[e]={flexBasis:a,flexGrow:0,maxWidth:a}}else o[e]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else o[e]={flexBasis:0,flexGrow:1,maxWidth:"100%"}})),"xs"===t?Object(r.a)(n,o):n[e.breakpoints.up(t)]=o}(e,n,t),e}),{}))}),{name:"MuiGrid"})(f);e.a=b},pa6t:function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M7 15v2h10v-2H7zm-4 6h18v-2H3v2zm0-8h18v-2H3v2zm4-6v2h10V7H7zM3 3v2h18V3H3z"}),"FormatAlignCenter")},qvzi:function(n,e,t){var o={"./CustomizedDividers.js":"fyWk","./CustomizedDividers.tsx":"PEGU","./StandaloneToggleButton.js":"YiLH","./StandaloneToggleButton.tsx":"UQQe","./ToggleButtonNotEmpty.js":"JAbg","./ToggleButtonNotEmpty.tsx":"aRtR","./ToggleButtonSizes.js":"/LkE","./ToggleButtonSizes.tsx":"vPKl","./ToggleButtons.js":"PCDN","./ToggleButtons.tsx":"XPlc","./toggle-button-aa.md":"gZYQ","./toggle-button-de.md":"mKiA","./toggle-button-es.md":"lHrC","./toggle-button-fr.md":"8GMO","./toggle-button-ja.md":"vbVh","./toggle-button-pt.md":"QJXJ","./toggle-button-ru.md":"28Ad","./toggle-button-zh.md":"mWc7","./toggle-button.md":"yIYq"};function a(n){var e=l(n);return t(e)}function l(n){if(!t.o(o,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return o[n]}a.keys=function(){return Object.keys(o)},a.resolve=l,n.exports=a,a.id="qvzi"},rXVv:function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z"}),"FormatAlignRight")},sXBx:function(n,e){n.exports='import React from \'react\';\nimport { makeStyles } from \'@material-ui/core/styles\';\nimport FormatAlignLeftIcon from \'@material-ui/icons/FormatAlignLeft\';\nimport FormatAlignCenterIcon from \'@material-ui/icons/FormatAlignCenter\';\nimport FormatAlignRightIcon from \'@material-ui/icons/FormatAlignRight\';\nimport FormatAlignJustifyIcon from \'@material-ui/icons/FormatAlignJustify\';\nimport LaptopIcon from \'@material-ui/icons/Laptop\';\nimport TvIcon from \'@material-ui/icons/Tv\';\nimport PhoneAndroidIcon from \'@material-ui/icons/PhoneAndroid\';\nimport Grid from \'@material-ui/core/Grid\';\nimport ToggleButton from \'@material-ui/lab/ToggleButton\';\nimport ToggleButtonGroup from \'@material-ui/lab/ToggleButtonGroup\';\n\nconst useStyles = makeStyles(theme => ({\n  toggleContainer: {\n    margin: theme.spacing(2, 0),\n  },\n}));\n\nexport default function ToggleButtonNotEmpty() {\n  const [alignment, setAlignment] = React.useState(\'left\');\n  const [formats, setFormats] = React.useState(() => [\'phone\']);\n\n  const handleFormat = (event: React.MouseEvent<HTMLElement>, newFormats: string[]) => {\n    if (newFormats.length) {\n      setFormats(newFormats);\n    }\n  };\n\n  const handleAlignment = (event: React.MouseEvent<HTMLElement>, newAlignment: string | null) => {\n    if (newAlignment !== null) {\n      setAlignment(newAlignment);\n    }\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item sm={12} md={6}>\n        <div className={classes.toggleContainer}>\n          <ToggleButtonGroup\n            value={alignment}\n            exclusive\n            onChange={handleAlignment}\n            aria-label="text alignment"\n          >\n            <ToggleButton value="left" aria-label="left aligned">\n              <FormatAlignLeftIcon />\n            </ToggleButton>\n            <ToggleButton value="center" aria-label="centered">\n              <FormatAlignCenterIcon />\n            </ToggleButton>\n            <ToggleButton value="right" aria-label="right aligned">\n              <FormatAlignRightIcon />\n            </ToggleButton>\n            <ToggleButton value="justify" aria-label="justified" disabled>\n              <FormatAlignJustifyIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n      </Grid>\n      <Grid item sm={12} md={6}>\n        <div className={classes.toggleContainer}>\n          <ToggleButtonGroup value={formats} onChange={handleFormat} aria-label="device">\n            <ToggleButton value="laptop" aria-label="laptop">\n              <LaptopIcon />\n            </ToggleButton>\n            <ToggleButton value="tv" aria-label="tv">\n              <TvIcon />\n            </ToggleButton>\n            <ToggleButton value="phone" aria-label="phone">\n              <PhoneAndroidIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n'},"tu/a":function(n,e,t){"use strict";var o=t("mXGw"),a=t.n(o),l=t("0Zz2"),i=a.a.createElement;e.a=Object(l.a)(i(a.a.Fragment,null,i("path",{d:"M16.56 8.94L7.62 0 6.21 1.41l2.38 2.38-5.15 5.15c-.59.59-.59 1.54 0 2.12l5.5 5.5c.29.29.68.44 1.06.44s.77-.15 1.06-.44l5.5-5.5c.59-.58.59-1.53 0-2.12zM5.21 10L10 5.21 14.79 10H5.21zM19 11.5s-2 2.17-2 3.5c0 1.1.9 2 2 2s2-.9 2-2c0-1.33-2-3.5-2-3.5z"}),i("path",{fillOpacity:".36",d:"M0 20h24v4H0z"})),"FormatColorFill")},vPKl:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return h}));var o=t("mXGw"),a=t.n(o),l=t("NbUR"),i=t("pa6t"),r=t("rXVv"),s=t("hYlH"),u=t("pQ8Y"),g=t("eou5"),c=t("THuk"),m=a.a.createElement,d=m(g.a,{key:1,value:"left"},m(l.a,null)),p=m(g.a,{key:2,value:"center"},m(i.a,null)),f=m(g.a,{key:3,value:"right"},m(r.a,null)),b=m(g.a,{key:4,value:"justify",disabled:!0},m(s.a,null));function h(){var n=a.a.useState("left"),e=n[0],t=n[1],o=function(n,e){t(e)},l=[d,p,f,b];return m(u.a,{container:!0,spacing:2,direction:"column",alignItems:"center"},m(u.a,{item:!0},m(c.a,{size:"small",value:e,exclusive:!0,onChange:o},l)),m(u.a,{item:!0},m(c.a,{size:"medium",value:e,exclusive:!0,onChange:o},l)),m(u.a,{item:!0},m(c.a,{size:"large",value:e,exclusive:!0,onChange:o},l)))}},vbVh:function(n,e){n.exports='---\ntitle: Toggle Button React component\ncomponents: ToggleButton, ToggleButtonGroup\n---\n\n# \u30c8\u30b0\u30eb\u30dc\u30bf\u30f3\n\n<p class="description">\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\u95a2\u9023\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3067\u304d\u307e\u3059\u3002</p>\n\n\u95a2\u9023\u3059\u308b [Toggle buttons](https://material.io/design/components/buttons.html#toggle-button)\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u5f37\u8abf\u3059\u308b\u306b\u306f\u3001\u6b21\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002 \u30b0\u30eb\u30fc\u30d7\u306f\u5171\u901a\u306e\u30b3\u30f3\u30c6\u30ca\u30fc\u3092\u5171\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n`ToggleButtonGroup` \u306f\u3001 \u304c\u72ec\u81ea\u306e `\u5024` prop\u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306b\u3001\u5b50\u30dc\u30bf\u30f3\u306e\u9078\u629e\u72b6\u614b\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\n\n{{"demo": "pages/components/toggle-button/ToggleButtons.js"}}\n\n## \u30b5\u30a4\u30ba\n\n\u5927\u304d\u306a\u30dc\u30bf\u30f3\u3068\u5c0f\u3055\u306a\u30dc\u30bf\u30f3\u304c\u3042\u308a\u307e\u3059\u304b? `size`\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n{{"demo": "pages/components/toggle-button/ToggleButtonSizes.js"}}\n\n## Enforce value set\n\nIf you want to enforce at least one button to be active, you can adapt your handleChange function.\n\n```jsx\nconst handleFormat = (event, newFormats) => {\n  if (newFormats.length) {\n    setFormats(newFormats);\n  }\n};\n\nconst handleAlignment = (event, newAlignment) => {\n  if (newAlignment !== null) {\n    setAlignment(newAlignment);\n  }\n};\n```\n\n{{"demo": "pages/components/toggle-button/ToggleButtonNotEmpty.js"}}\n\n## Standalone toggle button\n\n{{"demo": "pages/components/toggle-button/StandaloneToggleButton.js"}}\n\n## Customized toggle button\n\n\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u4f8b\u3092\u6b21\u306b\u793a\u3057\u307e\u3059\u3002 \u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001 [\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30da\u30fc\u30b8](/customization/components/)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n{{"demo": "pages/components/toggle-button/CustomizedDividers.js", "bg": true}}\n\n## \u30a2\u30af\u30bb\u30b7\u30d3\u30ea\u30c6\u30a3\n\nToggleButtonGroup has `role="group"`. You should provide an accessible label with `aria-label="label"`, `aria-labelledby="id"` or `<label>`.\n\nToggleButton sets `aria-pressed="<bool>"` according to the button state. You should label each button with `aria-label`.'},"xi/j":function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z"}),"FormatBold")},y6lT:function(n,e,t){"use strict";var o=t("mXGw"),a=t("0Zz2"),l=o.createElement;e.a=Object(a.a)(l("path",{d:"M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3zm-2 20h-4v-1h4v1zm3.25-3H6.75V4h10.5v14z"}),"PhoneAndroid")},yIYq:function(n,e){n.exports='---\ntitle: Toggle Button React component\ncomponents: ToggleButton, ToggleButtonGroup\n---\n\n# Toggle Buttons\n\n<p class="description">Toggle buttons can be used to group related options.</p>\n\nTo emphasize groups of related [Toggle buttons](https://material.io/design/components/buttons.html#toggle-button),\na group should share a common container.\n\nThe `ToggleButtonGroup` will control the selected state of its child buttons when\ngiven its own `value` prop.\n\n{{"demo": "pages/components/toggle-button/ToggleButtons.js"}}\n\n## Sizes\n\nFancy larger or smaller buttons? Use the `size` property.\n\n{{"demo": "pages/components/toggle-button/ToggleButtonSizes.js"}}\n\n## Enforce value set\n\nIf you want to enforce at least one button to be active, you can adapt your handleChange\nfunction.\n\n```jsx\nconst handleFormat = (event, newFormats) => {\n  if (newFormats.length) {\n    setFormats(newFormats);\n  }\n};\n\nconst handleAlignment = (event, newAlignment) => {\n  if (newAlignment !== null) {\n    setAlignment(newAlignment);\n  }\n};\n```\n\n{{"demo": "pages/components/toggle-button/ToggleButtonNotEmpty.js"}}\n\n## Standalone toggle button\n\n{{"demo": "pages/components/toggle-button/StandaloneToggleButton.js"}}\n\n## Customized toggle button\n\nHere is an example of customizing the component. You can learn more about this in the\n[overrides documentation page](/customization/components/).\n\n{{"demo": "pages/components/toggle-button/CustomizedDividers.js", "bg": true}}\n\n## Accessibility\n\nToggleButtonGroup has `role="group"`. You should provide an accessible label with `aria-label="label"`, `aria-labelledby="id"` or `<label>`.\n\nToggleButton sets `aria-pressed="<bool>"` according to the button state. You should label each button with `aria-label`.\n'}},[["fnJA",0,1]]]);