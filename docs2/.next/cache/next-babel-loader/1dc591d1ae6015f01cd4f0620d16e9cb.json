{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { ServerStyleSheets } from \"../../packages/material-ui-styles/src\";\nimport Document, { Head, Main, NextScript } from 'next/document';\nimport { Router as Router2 } from 'next/router';\nimport { LANGUAGES_SSR } from \"../src/modules/constants\";\nimport { pathnameToLanguage } from \"../src/modules/utils/helpers\";\nimport { themeColor } from \"../src/modules/components/ThemeContext\"; // You can find a benchmark of the available CSS minifiers under\n// https://github.com/GoalSmashers/css-minification-benchmark\n// We have found that clean-css is faster than cssnano but the output is larger.\n// Waiting for https://github.com/cssinjs/jss/issues/279\n// 4% slower but 12% smaller output than doing it in a single step.\n//\n// It's using .browserslistrc\n\nlet prefixer;\nlet cleanCSS;\n\nif (process.env.NODE_ENV === 'production') {\n  /* eslint-disable global-require */\n  const postcss = require('postcss');\n\n  const autoprefixer = require('autoprefixer');\n\n  const CleanCSS = require('clean-css');\n  /* eslint-enable global-require */\n\n\n  prefixer = postcss([autoprefixer]);\n  cleanCSS = new CleanCSS();\n}\n\nconst GOOGLE_ID = process.env.NODE_ENV === 'production' ? 'UA-106598593-2' : 'UA-106598593-3';\n\nvar _ref = __jsx(\"link\", {\n  rel: \"manifest\",\n  href: \"/static/manifest.json\"\n});\n\nvar _ref2 = __jsx(\"meta\", {\n  name: \"theme-color\",\n  content: themeColor\n});\n\nvar _ref3 = __jsx(\"link\", {\n  rel: \"shortcut icon\",\n  href: \"/static/favicon.ico\"\n});\n\nvar _ref4 = __jsx(\"link\", {\n  rel: \"apple-touch-icon\",\n  sizes: \"180x180\",\n  href: \"/static/icons/180x180.png\"\n});\n\nvar _ref5 = __jsx(\"link\", {\n  href: \"https://fonts.gstatic.com\",\n  rel: \"preconnect\",\n  crossOrigin: \"anonymous\"\n});\n\nvar _ref6 = __jsx(\"style\", {\n  id: \"material-icon-font\"\n});\n\nvar _ref7 = __jsx(\"style\", {\n  id: \"font-awesome-css\"\n});\n\nvar _ref8 = __jsx(\"style\", {\n  id: \"app-search\"\n});\n\nvar _ref9 = __jsx(\"style\", {\n  id: \"prismjs\"\n});\n\nvar _ref10 = __jsx(\"style\", {\n  id: \"insertion-point-jss\"\n});\n\nvar _ref11 = __jsx(Main, null);\n\nvar _ref12 = __jsx(NextScript, null);\n\nexport default class MyDocument extends Document {\n  render() {\n    const {\n      canonical,\n      userLanguage\n    } = this.props;\n    return __jsx(\"html\", {\n      lang: userLanguage\n    }, __jsx(Head, null, _ref, _ref2, _ref3, _ref4, __jsx(\"link\", {\n      rel: \"canonical\",\n      href: `https://material-ui.com${Router2._rewriteUrlForNextExport(`${userLanguage === 'en' ? '' : `/${userLanguage}`}${canonical}`)}`\n    }), __jsx(\"link\", {\n      rel: \"alternate\",\n      href: `https://material-ui.com${Router2._rewriteUrlForNextExport(canonical)}`,\n      hrefLang: \"x-default\"\n    }), LANGUAGES_SSR.map(userLanguage2 => __jsx(\"link\", {\n      key: userLanguage2,\n      rel: \"alternate\",\n      href: `https://material-ui.com${Router2._rewriteUrlForNextExport(`${userLanguage2 === 'en' ? '' : `/${userLanguage2}`}${canonical}`)}`,\n      hrefLang: userLanguage2\n    })), _ref5, _ref6, _ref7, _ref8, _ref9, _ref10), __jsx(\"body\", null, _ref11, __jsx(\"script\", {\n      // eslint-disable-next-line react/no-danger\n      dangerouslySetInnerHTML: {\n        __html: `\n                window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;\n                window.ga('create','${GOOGLE_ID}','auto');\n              `\n      }\n    }), _ref12));\n  }\n\n}\n\nMyDocument.getInitialProps = async ctx => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. page.getInitialProps\n  // 2. document.getInitialProps\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the server with error:\n  // 2. document.getInitialProps\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. page.getInitialProps\n  // 3. page.render\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () => originalRenderPage({\n    enhanceApp: App => props => sheets.collect(__jsx(App, props))\n  });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  let css = sheets.toString(); // It might be undefined, e.g. after an error.\n\n  if (css && process.env.NODE_ENV === 'production') {\n    const result1 = await prefixer.process(css, {\n      from: undefined\n    });\n    css = result1.css;\n    css = cleanCSS.minify(css).styles;\n  }\n\n  return _objectSpread({}, initialProps, {\n    canonical: pathnameToLanguage(ctx.req.url).canonical,\n    userLanguage: ctx.query.userLanguage || 'en',\n    styles: [...React.Children.toArray(initialProps.styles), __jsx(\"style\", {\n      id: \"jss-server-side\",\n      key: \"jss-server-side\" // eslint-disable-next-line react/no-danger\n      ,\n      dangerouslySetInnerHTML: {\n        __html: css\n      }\n    })]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}