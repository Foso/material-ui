{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport clsx from 'clsx';\nimport { deepmerge, elementAcceptingRef } from \"../../../material-ui-utils/src\";\nimport { fade } from \"../styles/colorManipulator\";\nimport withStyles from \"../styles/withStyles\";\nimport capitalize from \"../utils/capitalize\";\nimport Grow from \"../Grow\";\nimport Popper from \"../Popper\";\nimport useForkRef from \"../utils/useForkRef\";\nimport setRef from \"../utils/setRef\";\nimport { useIsFocusVisible } from \"../utils/focusVisible\";\nimport useControlled from \"../utils/useControlled\";\nimport useTheme from \"../styles/useTheme\";\n\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\n\nfunction arrowGenerator() {\n  return {\n    '&[x-placement*=\"bottom\"] $arrow': {\n      flip: false,\n      top: 0,\n      left: 0,\n      marginTop: '-0.95em',\n      marginLeft: 4,\n      marginRight: 4,\n      width: '2em',\n      height: '1em',\n      '&::before': {\n        flip: false,\n        borderWidth: '0 1em 1em 1em',\n        borderColor: 'transparent transparent currentcolor transparent'\n      }\n    },\n    '&[x-placement*=\"top\"] $arrow': {\n      flip: false,\n      bottom: 0,\n      left: 0,\n      marginBottom: '-0.95em',\n      marginLeft: 4,\n      marginRight: 4,\n      width: '2em',\n      height: '1em',\n      '&::before': {\n        flip: false,\n        borderWidth: '1em 1em 0 1em',\n        borderColor: 'currentcolor transparent transparent transparent'\n      }\n    },\n    '&[x-placement*=\"right\"] $arrow': {\n      flip: false,\n      left: 0,\n      marginLeft: '-0.95em',\n      marginTop: 4,\n      marginBottom: 4,\n      height: '2em',\n      width: '1em',\n      '&::before': {\n        flip: false,\n        borderWidth: '1em 1em 1em 0',\n        borderColor: 'transparent currentcolor transparent transparent'\n      }\n    },\n    '&[x-placement*=\"left\"] $arrow': {\n      flip: false,\n      right: 0,\n      marginRight: '-0.95em',\n      marginTop: 4,\n      marginBottom: 4,\n      height: '2em',\n      width: '1em',\n      '&::before': {\n        flip: false,\n        borderWidth: '1em 0 1em 1em',\n        borderColor: 'transparent transparent transparent currentcolor'\n      }\n    }\n  };\n}\n\nexport const styles = theme => ({\n  /* Styles applied to the Popper component. */\n  popper: {\n    zIndex: theme.zIndex.tooltip,\n    pointerEvents: 'none',\n    flip: false // disable jss-rtl plugin\n\n  },\n\n  /* Styles applied to the Popper component if `interactive={true}`. */\n  popperInteractive: {\n    pointerEvents: 'auto'\n  },\n\n  /* Styles applied to the Popper component if `arrow={true}`. */\n  popperArrow: arrowGenerator(),\n\n  /* Styles applied to the tooltip (label wrapper) element. */\n  tooltip: {\n    backgroundColor: fade(theme.palette.grey[700], 0.9),\n    borderRadius: theme.shape.borderRadius,\n    color: theme.palette.common.white,\n    fontFamily: theme.typography.fontFamily,\n    padding: '4px 8px',\n    fontSize: theme.typography.pxToRem(10),\n    lineHeight: `${round(14 / 10)}em`,\n    maxWidth: 300,\n    wordWrap: 'break-word',\n    fontWeight: theme.typography.fontWeightMedium\n  },\n\n  /* Styles applied to the tooltip (label wrapper) element if `arrow={true}`. */\n  tooltipArrow: {\n    position: 'relative',\n    margin: '0'\n  },\n\n  /* Styles applied to the arrow element. */\n  arrow: {\n    position: 'absolute',\n    fontSize: 6,\n    color: fade(theme.palette.grey[700], 0.9),\n    '&::before': {\n      content: '\"\"',\n      margin: 'auto',\n      display: 'block',\n      width: 0,\n      height: 0,\n      borderStyle: 'solid'\n    }\n  },\n\n  /* Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch. */\n  touch: {\n    padding: '8px 16px',\n    fontSize: theme.typography.pxToRem(14),\n    lineHeight: `${round(16 / 14)}em`,\n    fontWeight: theme.typography.fontWeightRegular\n  },\n\n  /* Styles applied to the tooltip (label wrapper) element if `placement` contains \"left\". */\n  tooltipPlacementLeft: {\n    transformOrigin: 'right center',\n    margin: '0 24px ',\n    [theme.breakpoints.up('sm')]: {\n      margin: '0 14px'\n    }\n  },\n\n  /* Styles applied to the tooltip (label wrapper) element if `placement` contains \"right\". */\n  tooltipPlacementRight: {\n    transformOrigin: 'left center',\n    margin: '0 24px',\n    [theme.breakpoints.up('sm')]: {\n      margin: '0 14px'\n    }\n  },\n\n  /* Styles applied to the tooltip (label wrapper) element if `placement` contains \"top\". */\n  tooltipPlacementTop: {\n    transformOrigin: 'center bottom',\n    margin: '24px 0',\n    [theme.breakpoints.up('sm')]: {\n      margin: '14px 0'\n    }\n  },\n\n  /* Styles applied to the tooltip (label wrapper) element if `placement` contains \"bottom\". */\n  tooltipPlacementBottom: {\n    transformOrigin: 'center top',\n    margin: '24px 0',\n    [theme.breakpoints.up('sm')]: {\n      margin: '14px 0'\n    }\n  }\n});\nlet hystersisOpen = false;\nlet hystersisTimer = null;\nexport function testReset() {\n  hystersisOpen = false;\n  clearTimeout(hystersisTimer);\n}\nconst Tooltip = React.forwardRef(function Tooltip(props, ref) {\n  const {\n    arrow = false,\n    children,\n    classes,\n    disableFocusListener = false,\n    disableHoverListener = false,\n    disableTouchListener = false,\n    enterDelay = 100,\n    enterNextDelay = 0,\n    enterTouchDelay = 700,\n    id: idProp,\n    interactive = false,\n    leaveDelay = 0,\n    leaveTouchDelay = 1500,\n    onClose,\n    onOpen,\n    open: openProp,\n    placement = 'bottom',\n    PopperProps,\n    title,\n    TransitionComponent = Grow,\n    TransitionProps\n  } = props,\n        other = _objectWithoutProperties(props, [\"arrow\", \"children\", \"classes\", \"disableFocusListener\", \"disableHoverListener\", \"disableTouchListener\", \"enterDelay\", \"enterNextDelay\", \"enterTouchDelay\", \"id\", \"interactive\", \"leaveDelay\", \"leaveTouchDelay\", \"onClose\", \"onOpen\", \"open\", \"placement\", \"PopperProps\", \"title\", \"TransitionComponent\", \"TransitionProps\"]);\n\n  const theme = useTheme();\n  const [childNode, setChildNode] = React.useState();\n  const [arrowRef, setArrowRef] = React.useState(null);\n  const ignoreNonTouchEvents = React.useRef(false);\n  const closeTimer = React.useRef();\n  const enterTimer = React.useRef();\n  const leaveTimer = React.useRef();\n  const touchTimer = React.useRef();\n  const [openState, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: 'Tooltip'\n  });\n  let open = openState;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const {\n      current: isControlled\n    } = React.useRef(openProp !== undefined); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n    React.useEffect(() => {\n      if (childNode && childNode.disabled && !isControlled && title !== '' && childNode.tagName.toLowerCase() === 'button') {\n        console.error(['Material-UI: you are providing a disabled `button` child to the Tooltip component.', 'A disabled element does not fire events.', \"Tooltip needs to listen to the child element's events to display the title.\", '', 'Add a simple wrapper element, such as a `span`.'].join('\\n'));\n      }\n    }, [title, childNode, isControlled]);\n  }\n\n  const [defaultId, setDefaultId] = React.useState();\n  const id = idProp || defaultId;\n  React.useEffect(() => {\n    if (!open || defaultId) {\n      return;\n    } // Fallback to this default id when possible.\n    // Use the random value for client-side rendering only.\n    // We can't use it server-side.\n\n\n    setDefaultId(`mui-tooltip-${Math.round(Math.random() * 1e5)}`);\n  }, [open, defaultId]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(closeTimer.current);\n      clearTimeout(enterTimer.current);\n      clearTimeout(leaveTimer.current);\n      clearTimeout(touchTimer.current);\n    };\n  }, []);\n\n  const handleOpen = event => {\n    clearTimeout(hystersisTimer);\n    hystersisOpen = true; // The mouseover event will trigger for every nested element in the tooltip.\n    // We can skip rerendering when the tooltip is already open.\n    // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.\n\n    setOpenState(true);\n\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n\n  const handleEnter = event => {\n    const childrenProps = children.props;\n\n    if (event.type === 'mouseover' && childrenProps.onMouseOver && event.currentTarget === childNode) {\n      childrenProps.onMouseOver(event);\n    }\n\n    if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {\n      return;\n    } // Remove the title ahead of time.\n    // We don't want to wait for the next render commit.\n    // We would risk displaying two tooltips at the same time (native + this one).\n\n\n    if (childNode) {\n      childNode.removeAttribute('title');\n    }\n\n    clearTimeout(enterTimer.current);\n    clearTimeout(leaveTimer.current);\n\n    if (enterDelay || hystersisOpen && enterNextDelay) {\n      event.persist();\n      enterTimer.current = setTimeout(() => {\n        handleOpen(event);\n      }, hystersisOpen ? enterNextDelay : enterDelay);\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  const {\n    isFocusVisible,\n    onBlurVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [childIsFocusVisible, setChildIsFocusVisible] = React.useState(false);\n\n  const handleBlur = () => {\n    if (childIsFocusVisible) {\n      setChildIsFocusVisible(false);\n      onBlurVisible();\n    }\n  };\n\n  const handleFocus = event => {\n    // Workaround for https://github.com/facebook/react/issues/7769\n    // The autoFocus of React might trigger the event before the componentDidMount.\n    // We need to account for this eventuality.\n    if (!childNode) {\n      setChildNode(event.currentTarget);\n    }\n\n    if (isFocusVisible(event)) {\n      setChildIsFocusVisible(true);\n      handleEnter(event);\n    }\n\n    const childrenProps = children.props;\n\n    if (childrenProps.onFocus && event.currentTarget === childNode) {\n      childrenProps.onFocus(event);\n    }\n  };\n\n  const handleClose = event => {\n    clearTimeout(hystersisTimer);\n    hystersisTimer = setTimeout(() => {\n      hystersisOpen = false;\n    }, 800 + leaveDelay);\n    setOpenState(false);\n\n    if (onClose) {\n      onClose(event);\n    }\n\n    clearTimeout(closeTimer.current);\n    closeTimer.current = setTimeout(() => {\n      ignoreNonTouchEvents.current = false;\n    }, theme.transitions.duration.shortest);\n  };\n\n  const handleLeave = event => {\n    const childrenProps = children.props;\n\n    if (event.type === 'blur') {\n      if (childrenProps.onBlur && event.currentTarget === childNode) {\n        childrenProps.onBlur(event);\n      }\n\n      handleBlur(event);\n    }\n\n    if (event.type === 'mouseleave' && childrenProps.onMouseLeave && event.currentTarget === childNode) {\n      childrenProps.onMouseLeave(event);\n    }\n\n    clearTimeout(enterTimer.current);\n    clearTimeout(leaveTimer.current);\n    event.persist();\n    leaveTimer.current = setTimeout(() => {\n      handleClose(event);\n    }, leaveDelay);\n  };\n\n  const handleTouchStart = event => {\n    ignoreNonTouchEvents.current = true;\n    const childrenProps = children.props;\n\n    if (childrenProps.onTouchStart) {\n      childrenProps.onTouchStart(event);\n    }\n\n    clearTimeout(leaveTimer.current);\n    clearTimeout(closeTimer.current);\n    clearTimeout(touchTimer.current);\n    event.persist();\n    touchTimer.current = setTimeout(() => {\n      handleEnter(event);\n    }, enterTouchDelay);\n  };\n\n  const handleTouchEnd = event => {\n    if (children.props.onTouchEnd) {\n      children.props.onTouchEnd(event);\n    }\n\n    clearTimeout(touchTimer.current);\n    clearTimeout(leaveTimer.current);\n    event.persist();\n    leaveTimer.current = setTimeout(() => {\n      handleClose(event);\n    }, leaveTouchDelay);\n  };\n\n  const handleUseRef = useForkRef(setChildNode, ref);\n  const handleFocusRef = useForkRef(focusVisibleRef, handleUseRef); // can be removed once we drop support for non ref forwarding class components\n\n  const handleOwnRef = React.useCallback(instance => {\n    // #StrictMode ready\n    setRef(handleFocusRef, ReactDOM.findDOMNode(instance));\n  }, [handleFocusRef]);\n  const handleRef = useForkRef(children.ref, handleOwnRef); // There is no point in displaying an empty tooltip.\n\n  if (title === '') {\n    open = false;\n  } // For accessibility and SEO concerns, we render the title to the DOM node when\n  // the tooltip is hidden. However, we have made a tradeoff when\n  // `disableHoverListener` is set. This title logic is disabled.\n  // It's allowing us to keep the implementation size minimal.\n  // We are open to change the tradeoff.\n\n\n  const shouldShowNativeTitle = !open && !disableHoverListener;\n\n  const childrenProps = _objectSpread({\n    'aria-describedby': open ? id : null,\n    title: shouldShowNativeTitle && typeof title === 'string' ? title : null\n  }, other, {}, children.props, {\n    className: clsx(other.className, children.props.className)\n  });\n\n  if (!disableTouchListener) {\n    childrenProps.onTouchStart = handleTouchStart;\n    childrenProps.onTouchEnd = handleTouchEnd;\n  }\n\n  if (!disableHoverListener) {\n    childrenProps.onMouseOver = handleEnter;\n    childrenProps.onMouseLeave = handleLeave;\n  }\n\n  if (!disableFocusListener) {\n    childrenProps.onFocus = handleFocus;\n    childrenProps.onBlur = handleLeave;\n  }\n\n  const interactiveWrapperListeners = interactive ? {\n    onMouseOver: childrenProps.onMouseOver,\n    onMouseLeave: childrenProps.onMouseLeave,\n    onFocus: childrenProps.onFocus,\n    onBlur: childrenProps.onBlur\n  } : {};\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (children.props.title) {\n      console.error(['Material-UI: you have provided a `title` prop to the child of <Tooltip />.', `Remove this title prop \\`${children.props.title}\\` or the Tooltip component.`].join('\\n'));\n    }\n  }\n\n  const mergedPopperProps = React.useMemo(() => {\n    return deepmerge({\n      popperOptions: {\n        modifiers: {\n          arrow: {\n            enabled: Boolean(arrowRef),\n            element: arrowRef\n          }\n        }\n      }\n    }, PopperProps);\n  }, [arrowRef, PopperProps]);\n  return __jsx(React.Fragment, null, React.cloneElement(children, _objectSpread({\n    ref: handleRef\n  }, childrenProps)), __jsx(Popper, _extends({\n    className: clsx(classes.popper, interactive && classes.popperInteractive, arrow && classes.popperArrow),\n    placement: placement,\n    anchorEl: childNode,\n    open: childNode ? open : false,\n    id: childrenProps['aria-describedby'],\n    transition: true\n  }, interactiveWrapperListeners, mergedPopperProps), ({\n    placement: placementInner,\n    TransitionProps: TransitionPropsInner\n  }) => __jsx(TransitionComponent, _extends({\n    timeout: theme.transitions.duration.shorter\n  }, TransitionPropsInner, TransitionProps), __jsx(\"div\", {\n    className: clsx(classes.tooltip, classes[`tooltipPlacement${capitalize(placementInner.split('-')[0])}`], ignoreNonTouchEvents.current && classes.touch, arrow && classes.tooltipArrow)\n  }, title, arrow ? __jsx(\"span\", {\n    className: classes.arrow,\n    ref: setArrowRef\n  }) : null))));\n});\nexport default withStyles(styles, {\n  name: 'MuiTooltip'\n})(Tooltip);","map":null,"metadata":{},"sourceType":"module"}