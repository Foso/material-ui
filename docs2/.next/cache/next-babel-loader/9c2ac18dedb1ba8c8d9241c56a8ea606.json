{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { chainPropTypes } from \"../../../material-ui-utils/src\";\nimport withStyles from \"../styles/withStyles\";\nimport ButtonBase from \"../ButtonBase\";\nimport isMuiElement from \"../utils/isMuiElement\";\nimport useForkRef from \"../utils/useForkRef\";\nimport ListContext from \"../List/ListContext\";\nimport * as ReactDOM from 'react-dom';\nexport const styles = theme => ({\n  /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */\n  root: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    position: 'relative',\n    textDecoration: 'none',\n    width: '100%',\n    boxSizing: 'border-box',\n    textAlign: 'left',\n    paddingTop: 8,\n    paddingBottom: 8,\n    '&$focusVisible': {\n      backgroundColor: theme.palette.action.selected\n    },\n    '&$selected, &$selected:hover': {\n      backgroundColor: theme.palette.action.selected\n    },\n    '&$disabled': {\n      opacity: 0.5\n    }\n  },\n\n  /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */\n  container: {\n    position: 'relative'\n  },\n\n  /* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */\n  focusVisible: {},\n\n  /* Styles applied to the `component` element if dense. */\n  dense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  },\n\n  /* Styles applied to the `component` element if `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    alignItems: 'flex-start'\n  },\n\n  /* Pseudo-class applied to the inner `component` element if `disabled={true}`. */\n  disabled: {},\n\n  /* Styles applied to the inner `component` element if `divider={true}`. */\n  divider: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    backgroundClip: 'padding-box'\n  },\n\n  /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n  gutters: {\n    paddingLeft: 16,\n    paddingRight: 16\n  },\n\n  /* Styles applied to the inner `component` element if `button={true}`. */\n  button: {\n    transition: theme.transitions.create('background-color', {\n      duration: theme.transitions.duration.shortest\n    }),\n    '&:hover': {\n      textDecoration: 'none',\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  },\n\n  /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */\n  secondaryAction: {\n    // Add some space to avoid collision as `ListItemSecondaryAction`\n    // is absolutely positioned.\n    paddingRight: 48\n  },\n\n  /* Pseudo-class applied to the root element if `selected={true}`. */\n  selected: {}\n});\nconst useEnhancedEffect = true ? React.useEffect : React.useLayoutEffect;\n/**\n * Uses an additional container component if `ListItemSecondaryAction` is the last child.\n */\n\nconst ListItem = React.forwardRef(function ListItem(props, ref) {\n  const {\n    alignItems = 'center',\n    autoFocus = false,\n    button = false,\n    children: childrenProp,\n    classes,\n    className,\n    component: componentProp,\n    ContainerComponent = 'li',\n    ContainerProps: {\n      className: ContainerClassName\n    } = {},\n    dense = false,\n    disabled = false,\n    disableGutters = false,\n    divider = false,\n    focusVisibleClassName,\n    selected = false\n  } = props,\n        ContainerProps = _objectWithoutProperties(props.ContainerProps, [\"className\"]),\n        other = _objectWithoutProperties(props, [\"alignItems\", \"autoFocus\", \"button\", \"children\", \"classes\", \"className\", \"component\", \"ContainerComponent\", \"ContainerProps\", \"dense\", \"disabled\", \"disableGutters\", \"divider\", \"focusVisibleClassName\", \"selected\"]);\n\n  const context = React.useContext(ListContext);\n  const childContext = {\n    dense: dense || context.dense || false,\n    alignItems\n  };\n  const listItemRef = React.useRef(null);\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      if (listItemRef.current) {\n        listItemRef.current.focus();\n      } else if (process.env.NODE_ENV !== 'production') {\n        console.error('Material-UI: unable to set focus to a ListItem whose component has not been rendered.');\n      }\n    }\n  }, [autoFocus]);\n  const children = React.Children.toArray(childrenProp);\n  const hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);\n  const handleOwnRef = React.useCallback(instance => {\n    // #StrictMode ready\n    listItemRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  const handleRef = useForkRef(handleOwnRef, ref);\n\n  const componentProps = _objectSpread({\n    className: clsx(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== \"center\" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),\n    disabled\n  }, other);\n\n  let Component = componentProp || 'li';\n\n  if (button) {\n    componentProps.component = componentProp || 'div';\n    componentProps.focusVisibleClassName = clsx(classes.focusVisible, focusVisibleClassName);\n    Component = ButtonBase;\n  }\n\n  if (hasSecondaryAction) {\n    // Use div by default.\n    Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.\n\n    if (ContainerComponent === 'li') {\n      if (Component === 'li') {\n        Component = 'div';\n      } else if (componentProps.component === 'li') {\n        componentProps.component = 'div';\n      }\n    }\n\n    return __jsx(ListContext.Provider, {\n      value: childContext\n    }, __jsx(ContainerComponent, _extends({\n      className: clsx(classes.container, ContainerClassName),\n      ref: handleRef\n    }, ContainerProps), __jsx(Component, componentProps, children), children.pop()));\n  }\n\n  return __jsx(ListContext.Provider, {\n    value: childContext\n  }, __jsx(Component, _extends({\n    ref: handleRef\n  }, componentProps), children));\n});\nexport default withStyles(styles, {\n  name: 'MuiListItem'\n})(ListItem);","map":null,"metadata":{},"sourceType":"module"}