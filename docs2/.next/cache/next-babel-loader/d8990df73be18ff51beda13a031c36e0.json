{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    overflowY: 'auto',\n    listStyle: 'none',\n    padding: 0,\n    WebkitOverflowScrolling: 'touch' // Add iOS momentum scrolling.\n\n  }\n};\nconst GridList = React.forwardRef(function GridList(props, ref) {\n  const {\n    cellHeight = 180,\n    children,\n    classes,\n    className,\n    cols = 2,\n    component: Component = 'ul',\n    spacing = 4,\n    style\n  } = props,\n        other = _objectWithoutProperties(props, [\"cellHeight\", \"children\", \"classes\", \"className\", \"cols\", \"component\", \"spacing\", \"style\"]);\n\n  return __jsx(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref,\n    style: _objectSpread({\n      margin: -spacing / 2\n    }, style)\n  }, other), React.Children.map(children, child => {\n    if (!React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: the GridList component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    const childCols = child.props.cols || 1;\n    const childRows = child.props.rows || 1;\n    return React.cloneElement(child, {\n      style: _extends({\n        width: `${100 / cols * childCols}%`,\n        height: cellHeight === 'auto' ? 'auto' : cellHeight * childRows + spacing,\n        padding: spacing / 2\n      }, child.props.style)\n    });\n  }));\n});\nexport default withStyles(styles, {\n  name: 'MuiGridList'\n})(GridList);","map":null,"metadata":{},"sourceType":"module"}