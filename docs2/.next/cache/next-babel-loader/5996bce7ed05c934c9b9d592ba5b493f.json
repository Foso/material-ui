{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport isValueSelected from \"./isValueSelected\";\nimport { withStyles } from \"../../../material-ui/src/styles\";\nimport { capitalize } from \"../../../material-ui/src/utils\";\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      borderRadius: theme.shape.borderRadius,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the children. */\n    grouped: {\n      padding: '0px 11px 0px 12px',\n      '&:not(:first-child)': {\n        marginLeft: -1,\n        borderLeft: '1px solid transparent',\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0\n      },\n      '&:not(:last-child)': {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0\n      }\n    },\n\n    /* Styles applied to the children if `size=\"small\"`. */\n    groupedSizeSmall: {\n      padding: '0px 7px 0px 8px'\n    },\n\n    /* Styles applied to the children if `size=\"large\"`. */\n    groupedSizeLarge: {\n      padding: '0px 15px 0px 16px'\n    }\n  };\n};\nvar ToggleButtonGroup = React.forwardRef(function ToggleButton(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$exclusive = props.exclusive,\n      exclusive = _props$exclusive === void 0 ? false : _props$exclusive,\n      onChange = props.onChange,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"exclusive\", \"onChange\", \"size\", \"value\"]);\n\n  var handleChange = function handleChange(event, buttonValue) {\n    if (!onChange) {\n      return;\n    }\n\n    var index = value && value.indexOf(buttonValue);\n    var newValue;\n\n    if (value && index >= 0) {\n      newValue = _toConsumableArray(value);\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? [].concat(_toConsumableArray(value), [buttonValue]) : [buttonValue];\n    }\n\n    onChange(event, newValue);\n  };\n\n  var handleExclusiveChange = function handleExclusiveChange(event, buttonValue) {\n    if (!onChange) {\n      return;\n    }\n\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n\n  return __jsx(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: \"group\"\n  }, other), React.Children.map(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: the ToggleButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    var _child$props = child.props,\n        buttonSelected = _child$props.selected,\n        buttonValue = _child$props.value;\n    var selected = buttonSelected === undefined ? isValueSelected(buttonValue, value) : buttonSelected;\n    return React.cloneElement(child, {\n      className: clsx(classes.grouped, child.props.className, size !== 'medium' && classes[\"groupedSize\".concat(capitalize(size))]),\n      selected: selected,\n      onChange: exclusive ? handleExclusiveChange : handleChange,\n      size: size\n    });\n  }));\n});\nexport default withStyles(styles, {\n  name: 'MuiToggleButtonGroup'\n})(ToggleButtonGroup);","map":null,"metadata":{},"sourceType":"module"}