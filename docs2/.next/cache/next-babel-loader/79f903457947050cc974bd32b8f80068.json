{"ast":null,"code":"var headerRegExp = /---[\\r\\n]([\\s\\S]*)[\\r\\n]---/;\nvar titleRegExp = /# (.*)[\\r\\n]/;\nvar descriptionRegExp = /<p class=\"description\">(.*)<\\/p>[\\r\\n]/;\nvar headerKeyValueRegExp = /(.*): (.*)/g;\nvar emptyRegExp = /^\\s*$/;\nexport function getHeaders(markdown) {\n  var header = markdown.match(headerRegExp);\n\n  if (!header) {\n    return {\n      components: []\n    };\n  }\n\n  header = header[1];\n  var regexMatches;\n  var headers = {}; // eslint-disable-next-line no-cond-assign\n\n  while ((regexMatches = headerKeyValueRegExp.exec(header)) !== null) {\n    headers[regexMatches[1]] = regexMatches[2];\n  }\n\n  if (headers.components) {\n    headers.components = headers.components.split(',').map(function (x) {\n      return x.trim();\n    }).sort();\n  } else {\n    headers.components = [];\n  }\n\n  return headers;\n}\nexport var demoRegexp = /^\"demo\": \"(.*)\"/;\nexport function getContents(markdown) {\n  return markdown.replace(headerRegExp, '') // Remove header information\n  .split(/^{{(\"demo\":[^}]*)}}$/gm) // Split markdown into an array, separating demos\n  .filter(function (content) {\n    return !emptyRegExp.test(content);\n  }); // Remove empty lines\n}\nexport function getTitle(markdown) {\n  var matches = markdown.match(titleRegExp);\n\n  if (!matches || !matches[1]) {\n    throw new Error('Missing title in the page');\n  }\n\n  return matches[1];\n}\nexport function getDescription(markdown) {\n  var matches = markdown.match(descriptionRegExp);\n\n  if (!matches || !matches[1]) {\n    throw new Error('Missing description in the page');\n  }\n\n  return matches[1];\n}","map":null,"metadata":{},"sourceType":"module"}