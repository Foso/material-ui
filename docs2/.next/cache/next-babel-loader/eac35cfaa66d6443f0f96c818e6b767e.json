{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { getDisplayName } from \"../../../material-ui-utils/src\";\nimport { getThemeProps } from \"../../../material-ui-styles/src\";\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport useTheme from \"../styles/useTheme\";\nimport { keys as breakpointKeys } from \"../styles/createBreakpoints\";\nimport useMediaQuery from \"../useMediaQuery\"; // By default, returns true if screen width is the same or greater than the given breakpoint.\n\nexport const isWidthUp = (breakpoint, width, inclusive = true) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\n  }\n\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\n}; // By default, returns true if screen width is the same or less than the given breakpoint.\n\nexport const isWidthDown = (breakpoint, width, inclusive = true) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\n  }\n\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\n};\nconst useEnhancedEffect = true ? React.useEffect : React.useLayoutEffect;\n\nconst withWidth = (options = {}) => Component => {\n  const {\n    withTheme: withThemeOption = false,\n    noSSR = false,\n    initialWidth: initialWidthOption\n  } = options;\n\n  function WithWidth(props) {\n    const contextTheme = useTheme();\n    const theme = props.theme || contextTheme;\n\n    const _getThemeProps = getThemeProps({\n      theme,\n      name: 'MuiWithWidth',\n      props: _objectSpread({}, props)\n    }),\n          {\n      initialWidth,\n      width\n    } = _getThemeProps,\n          other = _objectWithoutProperties(_getThemeProps, [\"initialWidth\", \"width\"]);\n\n    const [mountedState, setMountedState] = React.useState(false);\n    useEnhancedEffect(() => {\n      setMountedState(true);\n    }, []);\n    /**\n     * innerWidth |xs      sm      md      lg      xl\n     *            |-------|-------|-------|-------|------>\n     * width      |  xs   |  sm   |  md   |  lg   |  xl\n     */\n\n    const keys = [...theme.breakpoints.keys].reverse();\n    const widthComputed = keys.reduce((output, key) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key));\n      return !output && matches ? key : output;\n    }, null);\n\n    const more = _objectSpread({\n      width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption\n    }, withThemeOption ? {\n      theme\n    } : {}, {}, other); // When rendering the component on the server,\n    // we have no idea about the client browser screen width.\n    // In order to prevent blinks and help the reconciliation of the React tree\n    // we are not rendering the child component.\n    //\n    // An alternative is to use the `initialWidth` property.\n\n\n    if (more.width === undefined) {\n      return null;\n    }\n\n    return __jsx(Component, more);\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;\n  }\n\n  hoistNonReactStatics(WithWidth, Component);\n  return WithWidth;\n};\n\nexport default withWidth;","map":null,"metadata":{},"sourceType":"module"}