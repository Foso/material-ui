{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport Paper from \"../Paper\";\nimport StepConnector from \"../StepConnector\";\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    padding: 24\n  },\n\n  /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n  horizontal: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    flexDirection: 'column'\n  },\n\n  /* Styles applied to the root element if `alternativeLabel={true}`. */\n  alternativeLabel: {\n    alignItems: 'flex-start'\n  }\n};\n\nconst defaultConnector = __jsx(StepConnector, null);\n\nconst Stepper = React.forwardRef(function Stepper(props, ref) {\n  const {\n    activeStep = 0,\n    alternativeLabel = false,\n    children,\n    classes,\n    className,\n    connector: connectorProp = defaultConnector,\n    nonLinear = false,\n    orientation = 'horizontal'\n  } = props,\n        other = _objectWithoutProperties(props, [\"activeStep\", \"alternativeLabel\", \"children\", \"classes\", \"className\", \"connector\", \"nonLinear\", \"orientation\"]);\n\n  const connector = React.isValidElement(connectorProp) ? React.cloneElement(connectorProp, {\n    orientation\n  }) : null;\n  const childrenArray = React.Children.toArray(children);\n  const steps = childrenArray.map((step, index) => {\n    const controlProps = {\n      alternativeLabel,\n      connector: connectorProp,\n      last: index + 1 === childrenArray.length,\n      orientation\n    };\n    const state = {\n      index,\n      active: false,\n      completed: false,\n      disabled: false\n    };\n\n    if (activeStep === index) {\n      state.active = true;\n    } else if (!nonLinear && activeStep > index) {\n      state.completed = true;\n    } else if (!nonLinear && activeStep < index) {\n      state.disabled = true;\n    }\n\n    return [!alternativeLabel && connector && index !== 0 && React.cloneElement(connector, _objectSpread({\n      key: index\n    }, state)), React.cloneElement(step, _objectSpread({}, controlProps, {}, state, {}, step.props))];\n  });\n  return __jsx(Paper, _extends({\n    square: true,\n    elevation: 0,\n    className: clsx(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel),\n    ref: ref\n  }, other), steps);\n});\nexport default withStyles(styles, {\n  name: 'MuiStepper'\n})(Stepper);","map":null,"metadata":{},"sourceType":"module"}