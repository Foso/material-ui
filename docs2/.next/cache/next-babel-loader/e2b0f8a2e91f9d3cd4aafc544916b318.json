{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport LZString from 'lz-string';\nimport clsx from 'clsx';\nimport copy from 'clipboard-copy';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withStyles, fade } from \"../../../../packages/material-ui/src/styles\";\nimport IconButton from \"../../../../packages/material-ui/src/IconButton\";\nimport useMediaQuery from \"../../../../packages/material-ui/src/useMediaQuery\";\nimport Collapse from \"../../../../packages/material-ui/src/Collapse\";\nimport NoSsr from \"../../../../packages/material-ui/src/NoSsr\";\nimport EditIcon from \"../../../../packages/material-ui-icons/src/Edit\";\nimport CodeIcon from \"../../../../packages/material-ui-icons/src/Code\";\nimport FileCopyIcon from \"../../../../packages/material-ui-icons/src/FileCopy\";\nimport Snackbar from \"../../../../packages/material-ui/src/Snackbar\";\nimport Menu from \"../../../../packages/material-ui/src/Menu\";\nimport MenuItem from \"../../../../packages/material-ui/src/MenuItem\";\nimport MoreVertIcon from \"../../../../packages/material-ui-icons/src/MoreVert\";\nimport Tooltip from \"../../../../packages/material-ui/src/Tooltip\";\nimport MarkdownElement from \"./MarkdownElement\";\nimport DemoSandboxed from \"./DemoSandboxed\";\nimport DemoLanguages from \"./DemoLanguages\";\nimport getDemoConfig from \"../utils/getDemoConfig\";\nimport getJsxPreview from \"../utils/getJsxPreview\";\nimport { getCookie } from \"../utils/helpers\";\nimport { ACTION_TYPES, CODE_VARIANTS } from \"../constants\";\n\nfunction compress(object) {\n  return LZString.compressToBase64(_JSON$stringify(object)).replace(/\\+/g, '-') // Convert '+' to '-'\n  .replace(/\\//g, '_') // Convert '/' to '_'\n  .replace(/=+$/, ''); // Remove ending '='\n}\n\nfunction addHiddenInput(form, name, value) {\n  const input = document.createElement('input');\n  input.type = 'hidden';\n  input.name = name;\n  input.value = value;\n  form.appendChild(input);\n}\n\nconst styles = theme => ({\n  root: {\n    marginBottom: 40,\n    marginLeft: -theme.spacing(2),\n    marginRight: -theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      padding: theme.spacing(0, 1),\n      marginLeft: 0,\n      marginRight: 0\n    }\n  },\n  demo: {\n    position: 'relative',\n    outline: 0,\n    margin: 'auto',\n    display: 'flex',\n    justifyContent: 'center',\n    [theme.breakpoints.up('sm')]: {\n      borderRadius: theme.shape.borderRadius\n    }\n  },\n\n  /* Isolate the demo with an outline. */\n  demoBgOutlined: {\n    padding: theme.spacing(3),\n    border: `1px solid ${fade(theme.palette.action.active, 0.12)}`,\n    borderLeftWidth: 0,\n    borderRightWidth: 0,\n    [theme.breakpoints.up('sm')]: {\n      borderLeftWidth: 1,\n      borderRightWidth: 1\n    }\n  },\n\n  /* Prepare the background to display an inner elevation. */\n  demoBgTrue: {\n    padding: theme.spacing(3),\n    backgroundColor: theme.palette.background.level2\n  },\n\n  /* Make no difference between the demo and the markdown. */\n  demoBgInline: {\n    // Maintain alignment with the markdown text\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(3)\n    }\n  },\n  demoHiddenHeader: {\n    paddingTop: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      paddingTop: theme.spacing(3)\n    }\n  },\n  header: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'flex',\n      flip: false,\n      top: 0,\n      right: theme.spacing(1),\n      height: theme.spacing(6)\n    },\n    justifyContent: 'space-between'\n  },\n  headerButtons: {\n    margin: '2px 0'\n  },\n  code: {\n    display: 'none',\n    padding: 0,\n    marginBottom: theme.spacing(1),\n    marginRight: 0,\n    [theme.breakpoints.up('sm')]: {\n      display: 'block'\n    },\n    '& pre': {\n      overflow: 'auto',\n      lineHeight: 1.5,\n      margin: '0px !important',\n      maxHeight: 1000\n    }\n  },\n  tooltip: {\n    zIndex: theme.zIndex.appBar - 1\n  },\n  anchorLink: {\n    marginTop: -64,\n    // height of toolbar\n    position: 'absolute'\n  }\n});\n\nfunction getDemoName(location) {\n  return location.replace(/(.+?)(\\w+)\\.\\w+$$/, '$2');\n}\n\nfunction getDemoData(codeVariant, demo, githubLocation) {\n  if (codeVariant === CODE_VARIANTS.TS && demo.rawTS) {\n    return {\n      codeVariant: CODE_VARIANTS.TS,\n      githubLocation: githubLocation.replace(/\\.js$/, '.tsx'),\n      raw: demo.rawTS,\n      Component: demo.tsx,\n      sourceLanguage: 'tsx'\n    };\n  }\n\n  return {\n    codeVariant: CODE_VARIANTS.JS,\n    githubLocation,\n    raw: demo.raw,\n    Component: demo.js,\n    sourceLanguage: 'jsx'\n  };\n}\n\nvar _ref = __jsx(CodeIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = __jsx(EditIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref3 = __jsx(FileCopyIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref4 = __jsx(MoreVertIcon, {\n  fontSize: \"small\"\n});\n\nfunction Demo(props) {\n  const {\n    classes,\n    demo,\n    demoOptions,\n    githubLocation\n  } = props;\n  const dispatch = useDispatch();\n  const t = useSelector(state => state.options.t);\n  const codeVariant = useSelector(state => state.options.codeVariant);\n  const demoData = getDemoData(codeVariant, demo, githubLocation);\n  const [sourceHintSeen, setSourceHintSeen] = React.useState(false);\n  React.useEffect(() => {\n    setSourceHintSeen(getCookie('sourceHintSeen'));\n  }, []);\n  const [demoHovered, setDemoHovered] = React.useState(false);\n\n  const handleDemoHover = event => {\n    setDemoHovered(event.type === 'mouseenter');\n  };\n\n  const [snackbarOpen, setSnackbarOpen] = React.useState(false);\n  const [snackbarMessage, setSnackbarMessage] = React.useState(undefined);\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  const handleCodeLanguageClick = (event, clickedCodeVariant) => {\n    if (codeVariant !== clickedCodeVariant) {\n      dispatch({\n        type: ACTION_TYPES.OPTIONS_CHANGE,\n        payload: {\n          codeVariant: clickedCodeVariant\n        }\n      });\n    }\n  };\n\n  const handleCodeSandboxClick = () => {\n    const demoConfig = getDemoConfig(demoData);\n    const parameters = compress({\n      files: _objectSpread({\n        'package.json': {\n          content: {\n            title: demoConfig.title,\n            description: demoConfig.description,\n            dependencies: demoConfig.dependencies,\n            devDependencies: _objectSpread({\n              'react-scripts': 'latest'\n            }, demoConfig.devDependencies),\n            main: demoConfig.main,\n            scripts: demoConfig.scripts\n          }\n        }\n      }, _Object$keys(demoConfig.files).reduce((files, name) => {\n        files[name] = {\n          content: demoConfig.files[name]\n        };\n        return files;\n      }, {}))\n    });\n    const form = document.createElement('form');\n    form.method = 'POST';\n    form.target = '_blank';\n    form.action = 'https://codeSandbox.io/api/v1/sandboxes/define';\n    addHiddenInput(form, 'parameters', parameters);\n    document.body.appendChild(form);\n    form.submit();\n    document.body.removeChild(form);\n  };\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleMoreClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMoreClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleCopyClick = async () => {\n    try {\n      await copy(demoData.raw);\n      setSnackbarMessage(t('copiedSource'));\n      setSnackbarOpen(true);\n    } finally {\n      handleMoreClose();\n    }\n  };\n\n  const handleStackBlitzClick = () => {\n    const demoConfig = getDemoConfig(demoData);\n    const form = document.createElement('form');\n    form.method = 'POST';\n    form.target = '_blank';\n    form.action = 'https://stackblitz.com/run';\n    addHiddenInput(form, 'project[template]', 'javascript');\n    addHiddenInput(form, 'project[title]', demoConfig.title);\n    addHiddenInput(form, 'project[description]', demoConfig.description);\n    addHiddenInput(form, 'project[dependencies]', _JSON$stringify(demoConfig.dependencies));\n    addHiddenInput(form, 'project[devDependencies]', _JSON$stringify(demoConfig.devDependencies));\n\n    _Object$keys(demoConfig.files).forEach(key => {\n      const value = demoConfig.files[key];\n      addHiddenInput(form, `project[files][${key}]`, value);\n    });\n\n    document.body.appendChild(form);\n    form.submit();\n    document.body.removeChild(form);\n    handleMoreClose();\n  };\n\n  const showSourceHint = demoHovered && !sourceHintSeen;\n  const DemoComponent = demoData.Component;\n  const demoName = getDemoName(demoData.githubLocation);\n  const demoSandboxedStyle = React.useMemo(() => ({\n    maxWidth: demoOptions.maxWidth,\n    height: demoOptions.height\n  }), [demoOptions.height, demoOptions.maxWidth]);\n\n  if (demoOptions.bg == null) {\n    demoOptions.bg = 'outlined';\n  }\n\n  if (demoOptions.iframe) {\n    demoOptions.bg = true;\n  }\n\n  const createHandleCodeSourceLink = anchor => async () => {\n    try {\n      await copy(`${window.location.href.split('#')[0]}#${anchor}`);\n      setSnackbarMessage(t('copiedSourceLink'));\n      setSnackbarOpen(true);\n    } finally {\n      handleMoreClose();\n    }\n  };\n\n  const [codeOpen, setCodeOpen] = React.useState(demoOptions.defaultCodeOpen || false);\n  React.useEffect(() => {\n    const navigatedDemoName = getDemoName(window.location.hash);\n\n    if (demoName === navigatedDemoName) {\n      setCodeOpen(true);\n    }\n  }, [demoName]);\n\n  const handleCodeOpenClick = () => {\n    document.cookie = `sourceHintSeen=true;path=/;max-age=31536000`;\n    setCodeOpen(open => !open);\n    setSourceHintSeen(setSourceHintSeen(true));\n  };\n\n  const match = useMediaQuery(theme => theme.breakpoints.up('sm'));\n  const jsx = getJsxPreview(demoData.raw || '');\n  const showPreview = !demoOptions.hideHeader && demoOptions.defaultCodeOpen !== false && jsx !== demoData.raw && jsx.split(/\\n/).length <= 17;\n  let showCodeLabel;\n\n  if (codeOpen) {\n    showCodeLabel = showPreview ? t('hideFullSource') : t('hideSource');\n  } else {\n    showCodeLabel = showPreview ? t('showFullSource') : t('showSource');\n  }\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: clsx(classes.demo, {\n      'outlined': classes.demoBgOutlined,\n      'inline': classes.demoBgInline\n    }[demoOptions.bg], demoOptions.hideHeader && classes.demoHiddenHeader, demoOptions.bg === true && classes.demoBgTrue),\n    tabIndex: -1,\n    onMouseEnter: handleDemoHover,\n    onMouseLeave: handleDemoHover\n  }, __jsx(DemoSandboxed, {\n    style: demoSandboxedStyle,\n    component: DemoComponent,\n    iframe: demoOptions.iframe,\n    name: demoName\n  })), __jsx(\"div\", {\n    className: classes.anchorLink,\n    id: `${demoName}.js`\n  }), __jsx(\"div\", {\n    className: classes.anchorLink,\n    id: `${demoName}.tsx`\n  }), demoOptions.hideHeader ? null : __jsx(\"div\", {\n    className: classes.header\n  }, __jsx(NoSsr, null, __jsx(DemoLanguages, {\n    demo: demo,\n    codeOpen: codeOpen,\n    codeVariant: codeVariant,\n    gaEventLabel: demoOptions.demo,\n    onLanguageClick: handleCodeLanguageClick\n  }), __jsx(\"div\", {\n    className: classes.headerButtons\n  }, __jsx(Tooltip, {\n    classes: {\n      popper: classes.tooltip\n    },\n    key: showSourceHint,\n    open: showSourceHint && match ? true : undefined,\n    PopperProps: {\n      disablePortal: true\n    },\n    title: showCodeLabel,\n    placement: \"top\"\n  }, __jsx(IconButton, {\n    \"aria-label\": showCodeLabel,\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"expand\",\n    onClick: handleCodeOpenClick,\n    color: demoHovered ? 'primary' : 'default'\n  }, _ref)), demoOptions.hideEditButton ? null : __jsx(Tooltip, {\n    classes: {\n      popper: classes.tooltip\n    },\n    title: t('codesandbox'),\n    placement: \"top\"\n  }, __jsx(IconButton, {\n    \"aria-label\": t('codesandbox'),\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"codesandbox\",\n    onClick: handleCodeSandboxClick\n  }, _ref2)), __jsx(Tooltip, {\n    classes: {\n      popper: classes.tooltip\n    },\n    title: t('copySource'),\n    placement: \"top\"\n  }, __jsx(IconButton, {\n    \"aria-label\": t('copySource'),\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"copy\",\n    onClick: handleCopyClick\n  }, _ref3)), __jsx(IconButton, {\n    onClick: handleMoreClick,\n    \"aria-owns\": anchorEl ? 'demo-menu-more' : undefined,\n    \"aria-haspopup\": \"true\",\n    \"aria-label\": t('seeMore')\n  }, _ref4), __jsx(Menu, {\n    id: \"demo-menu-more\",\n    anchorEl: anchorEl,\n    open: Boolean(anchorEl),\n    onClose: handleMoreClose,\n    getContentAnchorEl: null,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    }\n  }, __jsx(MenuItem, {\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"github\",\n    component: \"a\",\n    href: demoData.githubLocation,\n    target: \"_blank\",\n    rel: \"noopener nofollow\",\n    onClick: handleMoreClose\n  }, t('viewGitHub')), demoOptions.hideEditButton ? null : __jsx(MenuItem, {\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"stackblitz\",\n    onClick: handleStackBlitzClick\n  }, t('stackblitz')), __jsx(MenuItem, {\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"copy-js-source-link\",\n    onClick: createHandleCodeSourceLink(`${demoName}.js`)\n  }, t('copySourceLinkJS')), __jsx(MenuItem, {\n    \"data-ga-event-category\": \"demo\",\n    \"data-ga-event-label\": demoOptions.demo,\n    \"data-ga-event-action\": \"copy-ts-source-link\",\n    onClick: createHandleCodeSourceLink(`${demoName}.tsx`)\n  }, t('copySourceLinkTS')))))), __jsx(Collapse, {\n    in: codeOpen || showPreview,\n    unmountOnExit: true\n  }, __jsx(MarkdownElement, {\n    className: classes.code,\n    text: `\\`\\`\\`${demoData.sourceLanguage}\\n${codeOpen ? demoData.raw : jsx}\\n\\`\\`\\``\n  })), __jsx(Snackbar, {\n    open: snackbarOpen,\n    autoHideDuration: 3000,\n    onClose: handleSnackbarClose,\n    message: snackbarMessage\n  }));\n}\n\nexport default withStyles(styles)(Demo);","map":null,"metadata":{},"sourceType":"module"}