{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport Person from \"../internal/svg-icons/Person\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexShrink: 0,\n    width: 40,\n    height: 40,\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(20),\n    lineHeight: 1,\n    borderRadius: '50%',\n    overflow: 'hidden',\n    userSelect: 'none'\n  },\n\n  /* Styles applied to the root element if not `src` or `srcSet`. */\n  colorDefault: {\n    color: theme.palette.background.default,\n    backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n  },\n\n  /* Styles applied to the root element if `variant=\"circle\"`. */\n  circle: {},\n\n  /* Styles applied to the root element if `variant=\"rounded\"`. */\n  rounded: {\n    borderRadius: theme.shape.borderRadius\n  },\n\n  /* Styles applied to the root element if `variant=\"square\"`. */\n  square: {\n    borderRadius: 0\n  },\n\n  /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n  img: {\n    width: '100%',\n    height: '100%',\n    textAlign: 'center',\n    // Handle non-square image. The property isn't supported by IE 11.\n    objectFit: 'cover',\n    // Hide alt text.\n    color: 'transparent',\n    // Hide the image broken icon, only works on Chrome.\n    textIndent: 10000\n  },\n\n  /* Styles applied to the fallback icon */\n  fallback: {\n    width: '75%',\n    height: '75%'\n  }\n});\n\nfunction useLoaded({\n  src,\n  srcSet\n}) {\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    if (!src && !srcSet) {\n      return undefined;\n    }\n\n    setLoaded(false);\n    let active = true;\n    const image = new Image();\n    image.src = src;\n    image.srcSet = srcSet;\n\n    image.onload = () => {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('loaded');\n    };\n\n    image.onerror = () => {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('error');\n    };\n\n    return () => {\n      active = false;\n    };\n  }, [src, srcSet]);\n  return loaded;\n}\n\nconst Avatar = React.forwardRef(function Avatar(props, ref) {\n  const {\n    alt,\n    children: childrenProp,\n    classes,\n    className,\n    component: Component = 'div',\n    imgProps,\n    sizes,\n    src,\n    srcSet,\n    variant = 'circle'\n  } = props,\n        other = _objectWithoutProperties(props, [\"alt\", \"children\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\", \"variant\"]);\n\n  let children = null; // Use a hook instead of onError on the img element to support server-side rendering.\n\n  const loaded = useLoaded({\n    src,\n    srcSet\n  });\n  const hasImg = src || srcSet;\n  const hasImgNotFailing = hasImg && loaded !== 'error';\n\n  if (hasImgNotFailing) {\n    children = __jsx(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps));\n  } else if (childrenProp != null) {\n    children = childrenProp;\n  } else if (hasImg && alt) {\n    children = alt[0];\n  } else {\n    children = __jsx(Person, {\n      className: classes.fallback\n    });\n  }\n\n  return __jsx(Component, _extends({\n    className: clsx(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),\n    ref: ref\n  }, other), children);\n});\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);","map":null,"metadata":{},"sourceType":"module"}