{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport Button from \"../../../../../packages/material-ui/src/Button\";\nimport Snackbar from \"../../../../../packages/material-ui/src/Snackbar\";\nimport IconButton from \"../../../../../packages/material-ui/src/IconButton\";\nimport CloseIcon from \"../../../../../packages/material-ui-icons/src/Close\";\nconst useStyles = makeStyles(theme => ({\n  close: {\n    padding: theme.spacing(0.5)\n  }\n}));\n\nvar _ref = __jsx(CloseIcon, null);\n\nexport default function ConsecutiveSnackbars() {\n  const queueRef = React.useRef([]);\n  const [open, setOpen] = React.useState(false);\n  const [messageInfo, setMessageInfo] = React.useState(undefined);\n\n  const processQueue = () => {\n    if (queueRef.current.length > 0) {\n      setMessageInfo(queueRef.current.shift());\n      setOpen(true);\n    }\n  };\n\n  const handleClick = message => () => {\n    queueRef.current.push({\n      message,\n      key: new Date().getTime()\n    });\n\n    if (open) {\n      // immediately begin dismissing current message\n      // to start showing new one\n      setOpen(false);\n    } else {\n      processQueue();\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleExited = () => {\n    processQueue();\n  };\n\n  const classes = useStyles();\n  return __jsx(\"div\", null, __jsx(Button, {\n    onClick: handleClick('Message A')\n  }, \"Show message A\"), __jsx(Button, {\n    onClick: handleClick('Message B')\n  }, \"Show message B\"), __jsx(Snackbar, {\n    key: messageInfo ? messageInfo.key : undefined,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    open: open,\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    onExited: handleExited,\n    message: messageInfo ? messageInfo.message : undefined,\n    action: __jsx(React.Fragment, null, __jsx(Button, {\n      color: \"secondary\",\n      size: \"small\",\n      onClick: handleClose\n    }, \"UNDO\"), __jsx(IconButton, {\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      className: classes.close,\n      onClick: handleClose\n    }, _ref))\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}