{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport capitalize from \"../utils/capitalize\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0\n  },\n\n  /* Styles applied to the root element if `variant=\"body2\"`. */\n  body2: theme.typography.body2,\n\n  /* Styles applied to the root element if `variant=\"body1\"`. */\n  body1: theme.typography.body1,\n\n  /* Styles applied to the root element if `variant=\"caption\"`. */\n  caption: theme.typography.caption,\n\n  /* Styles applied to the root element if `variant=\"button\"`. */\n  button: theme.typography.button,\n\n  /* Styles applied to the root element if `variant=\"h1\"`. */\n  h1: theme.typography.h1,\n\n  /* Styles applied to the root element if `variant=\"h2\"`. */\n  h2: theme.typography.h2,\n\n  /* Styles applied to the root element if `variant=\"h3\"`. */\n  h3: theme.typography.h3,\n\n  /* Styles applied to the root element if `variant=\"h4\"`. */\n  h4: theme.typography.h4,\n\n  /* Styles applied to the root element if `variant=\"h5\"`. */\n  h5: theme.typography.h5,\n\n  /* Styles applied to the root element if `variant=\"h6\"`. */\n  h6: theme.typography.h6,\n\n  /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n  subtitle1: theme.typography.subtitle1,\n\n  /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n  subtitle2: theme.typography.subtitle2,\n\n  /* Styles applied to the root element if `variant=\"overline\"`. */\n  overline: theme.typography.overline,\n\n  /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n  srOnly: {\n    position: 'absolute',\n    height: 1,\n    width: 1,\n    overflow: 'hidden'\n  },\n\n  /* Styles applied to the root element if `align=\"left\"`. */\n  alignLeft: {\n    textAlign: 'left'\n  },\n\n  /* Styles applied to the root element if `align=\"center\"`. */\n  alignCenter: {\n    textAlign: 'center'\n  },\n\n  /* Styles applied to the root element if `align=\"right\"`. */\n  alignRight: {\n    textAlign: 'right'\n  },\n\n  /* Styles applied to the root element if `align=\"justify\"`. */\n  alignJustify: {\n    textAlign: 'justify'\n  },\n\n  /* Styles applied to the root element if `nowrap={true}`. */\n  noWrap: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `gutterBottom={true}`. */\n  gutterBottom: {\n    marginBottom: '0.35em'\n  },\n\n  /* Styles applied to the root element if `paragraph={true}`. */\n  paragraph: {\n    marginBottom: 16\n  },\n\n  /* Styles applied to the root element if `color=\"inherit\"`. */\n  colorInherit: {\n    color: 'inherit'\n  },\n\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main\n  },\n\n  /* Styles applied to the root element if `color=\"textPrimary\"`. */\n  colorTextPrimary: {\n    color: theme.palette.text.primary\n  },\n\n  /* Styles applied to the root element if `color=\"textSecondary\"`. */\n  colorTextSecondary: {\n    color: theme.palette.text.secondary\n  },\n\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    color: theme.palette.error.main\n  },\n\n  /* Styles applied to the root element if `display=\"inline\"`. */\n  displayInline: {\n    display: 'inline'\n  },\n\n  /* Styles applied to the root element if `display=\"block\"`. */\n  displayBlock: {\n    display: 'block'\n  }\n});\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nconst Typography = React.forwardRef(function Typography(props, ref) {\n  const {\n    align = 'inherit',\n    classes,\n    className,\n    color = 'initial',\n    component,\n    display = 'initial',\n    gutterBottom = false,\n    noWrap = false,\n    paragraph = false,\n    variant = 'body1',\n    variantMapping = defaultVariantMapping\n  } = props,\n        other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return __jsx(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[`color${capitalize(color)}`], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[`align${capitalize(align)}`], display !== 'initial' && classes[`display${capitalize(display)}`]),\n    ref: ref\n  }, other));\n});\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","map":null,"metadata":{},"sourceType":"module"}