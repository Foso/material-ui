{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { ThemeProvider as MuiThemeProvider, createMuiTheme, darken } from \"../../../../packages/material-ui/src/styles\";\nimport { useSelector } from 'react-redux';\nimport useMediaQuery from \"../../../../packages/material-ui/src/useMediaQuery\";\nimport { enUS, zhCN, faIR, ruRU, ptBR, esES, frFR, deDE, jaJP } from \"../../../../packages/material-ui/src/locale\";\nimport { blue, pink } from \"../../../../packages/material-ui/src/colors\";\nimport { getCookie } from \"../utils/helpers\";\nimport { darkTheme, setPrismTheme } from \"./prism\";\nconst languageMap = {\n  en: enUS,\n  zh: zhCN,\n  fa: faIR,\n  ru: ruRU,\n  pt: ptBR,\n  es: esES,\n  fr: frFR,\n  de: deDE,\n  ja: jaJP\n};\nexport const themeColor = blue[700];\nconst themeInitialOptions = {\n  dense: false,\n  direction: 'ltr',\n  paletteColors: {},\n  spacing: 8 // spacing unit\n\n};\nconst highDensity = {\n  props: {\n    MuiButton: {\n      size: 'small'\n    },\n    MuiFilledInput: {\n      margin: 'dense'\n    },\n    MuiFormControl: {\n      margin: 'dense'\n    },\n    MuiFormHelperText: {\n      margin: 'dense'\n    },\n    MuiIconButton: {\n      size: 'small'\n    },\n    MuiInputBase: {\n      margin: 'dense'\n    },\n    MuiInputLabel: {\n      margin: 'dense'\n    },\n    MuiListItem: {\n      dense: true\n    },\n    MuiOutlinedInput: {\n      margin: 'dense'\n    },\n    MuiFab: {\n      size: 'small'\n    },\n    MuiTable: {\n      size: 'small'\n    },\n    MuiTextField: {\n      margin: 'dense'\n    },\n    MuiToolbar: {\n      variant: 'dense'\n    }\n  },\n  overrides: {\n    MuiIconButton: {\n      sizeSmall: {\n        // minimal touch target hit spacing\n        marginLeft: 4,\n        marginRight: 4,\n        padding: 12\n      }\n    }\n  }\n};\nexport const DispatchContext = React.createContext(() => {\n  throw new Error('Forgot to wrap component in `ThemeProvider`');\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  DispatchContext.displayName = 'ThemeDispatchContext';\n}\n\nconst useEnhancedEffect = true ? React.useEffect : React.useLayoutEffect;\nexport function ThemeProvider(props) {\n  const {\n    children\n  } = props;\n  const [themeOptions, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'SET_SPACING':\n        return _objectSpread({}, state, {\n          spacing: action.payload\n        });\n\n      case 'INCREASE_SPACING':\n        {\n          return _objectSpread({}, state, {\n            spacing: state.spacing + 1\n          });\n        }\n\n      case 'DECREASE_SPACING':\n        {\n          return _objectSpread({}, state, {\n            spacing: state.spacing - 1\n          });\n        }\n\n      case 'SET_DENSE':\n        return _objectSpread({}, state, {\n          dense: action.payload\n        });\n\n      case 'RESET_DENSITY':\n        return _objectSpread({}, state, {\n          dense: themeInitialOptions.dense,\n          spacing: themeInitialOptions.spacing\n        });\n\n      case 'RESET_COLORS':\n        return _objectSpread({}, state, {\n          paletteColors: themeInitialOptions.paletteColors\n        });\n\n      case 'CHANGE':\n        return _objectSpread({}, state, {\n          paletteType: action.payload.paletteType || state.paletteType,\n          direction: action.payload.direction || state.direction,\n          paletteColors: action.payload.paletteColors || state.paletteColors\n        });\n\n      default:\n        throw new Error(`Unrecognized type ${action.type}`);\n    }\n  }, themeInitialOptions);\n  const userLanguage = useSelector(state => state.options.userLanguage);\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const preferredType = prefersDarkMode ? 'dark' : 'light';\n  const {\n    dense,\n    direction,\n    paletteColors,\n    paletteType = preferredType,\n    spacing\n  } = themeOptions;\n  React.useEffect(() => {\n    setPrismTheme(darkTheme);\n  }, []);\n  React.useEffect(() => {\n    if (process.browser) {\n      const nextPaletteColors = JSON.parse(getCookie('paletteColors') || 'null');\n      const nextPaletteType = getCookie('paletteType');\n      dispatch({\n        type: 'CHANGE',\n        payload: {\n          paletteColors: nextPaletteColors,\n          paletteType: nextPaletteType\n        }\n      });\n    }\n  }, []); // persist paletteType\n\n  React.useEffect(() => {\n    document.cookie = `paletteType=${paletteType};path=/;max-age=31536000`;\n  }, [paletteType]);\n  useEnhancedEffect(() => {\n    document.body.dir = direction;\n  }, [direction]);\n  const theme = React.useMemo(() => {\n    const nextTheme = createMuiTheme({\n      direction,\n      nprogress: {\n        color: paletteType === 'light' ? '#000' : '#fff'\n      },\n      palette: _objectSpread({\n        primary: {\n          main: paletteType === 'light' ? blue[700] : blue[200]\n        },\n        secondary: {\n          main: paletteType === 'light' ? darken(pink.A400, 0.1) : pink[200]\n        },\n        type: paletteType,\n        background: {\n          default: paletteType === 'light' ? '#fff' : '#121212'\n        }\n      }, paletteColors),\n      spacing\n    }, dense ? highDensity : null, languageMap[userLanguage]);\n    nextTheme.palette.background.level2 = paletteType === 'light' ? nextTheme.palette.grey[100] : '#333';\n    nextTheme.palette.background.level1 = paletteType === 'light' ? '#fff' : nextTheme.palette.grey[900];\n    return nextTheme;\n  }, [dense, direction, paletteColors, paletteType, spacing, userLanguage]);\n  React.useEffect(() => {\n    // Expose the theme as a global variable so people can play with it.\n    if (process.browser) {\n      window.theme = theme;\n    }\n  }, [theme]);\n  return __jsx(MuiThemeProvider, {\n    theme: theme\n  }, __jsx(DispatchContext.Provider, {\n    value: dispatch\n  }, children));\n}\n/**\n * @returns {(nextOptions: Partial<typeof themeInitialOptions>) => void}\n */\n\nexport function useChangeTheme() {\n  const dispatch = React.useContext(DispatchContext);\n  return React.useCallback(options => dispatch({\n    type: 'CHANGE',\n    payload: options\n  }), [dispatch]);\n}","map":null,"metadata":{},"sourceType":"module"}