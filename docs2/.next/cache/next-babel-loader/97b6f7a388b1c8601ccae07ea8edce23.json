{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-danger, react-hooks/exhaustive-deps */\nimport fetch from 'cross-fetch';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from \"../../../../packages/material-ui/src/styles\";\nimport NotificationsIcon from \"../../../../packages/material-ui-icons/src/Notifications\";\nimport Tooltip from \"../../../../packages/material-ui/src/Tooltip\";\nimport IconButton from \"../../../../packages/material-ui/src/IconButton\";\nimport Badge from \"../../../../packages/material-ui/src/Badge\";\nimport Popper from \"../../../../packages/material-ui/src/Popper\";\nimport Grow from \"../../../../packages/material-ui/src/Grow\";\nimport Paper from \"../../../../packages/material-ui/src/Paper\";\nimport ClickAwayListener from \"../../../../packages/material-ui/src/ClickAwayListener\";\nimport List from \"../../../../packages/material-ui/src/List\";\nimport ListItem from \"../../../../packages/material-ui/src/ListItem\";\nimport ListItemText from \"../../../../packages/material-ui/src/ListItemText\";\nimport Divider from \"../../../../packages/material-ui/src/Divider\";\nimport sleep from \"../../../../modules/waterfall/sleep\";\nimport { getCookie } from \"../utils/helpers\";\nimport notifications from \"../../../notifications.json\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    transformOrigin: 'top right'\n  },\n  list: {\n    maxWidth: theme.spacing(40),\n    maxHeight: theme.spacing(40),\n    overflow: 'auto'\n  },\n  listItem: {\n    display: 'flex',\n    flexDirection: 'column'\n  }\n}));\n\nfunction getLastSeenNotification() {\n  const seen = getCookie('lastSeenNotification');\n  return seen === '' ? 0 : _parseInt(seen, 10);\n}\n\nlet messages = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  messages = notifications;\n}\n\nasync function getMessages() {\n  try {\n    if (!messages) {\n      await sleep(1500); // Soften the pressure on the main thread.\n\n      const result = await fetch('https://raw.githubusercontent.com/Foso/material-ui/master/docs/notifications.json');\n      messages = await result.json();\n    }\n  } catch (err) {// Swallow the exceptions.\n  }\n\n  messages = messages || [];\n}\n\nvar _ref = __jsx(NotificationsIcon, null);\n\nvar _ref2 = __jsx(Divider, {\n  variant: \"middle\"\n});\n\nexport default function Notifications() {\n  const classes = useStyles();\n  const [messageList, setMessageList] = React.useState([]);\n  const [unseenNotificationsCount, setUnseenNotificationsCount] = React.useState(0);\n  const [open, setOpen] = React.useState(false);\n  const [tooltipOpen, setTooltipOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const t = useSelector(state => state.options.t);\n  const userLanguage = useSelector(state => state.options.userLanguage);\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen);\n    setTooltipOpen(false);\n    setUnseenNotificationsCount(0);\n    document.cookie = `lastSeenNotification=${messageList[0].id};path=/;max-age=31536000`;\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleTooltipOpen = () => {\n    setTooltipOpen(!open);\n  };\n\n  const handleTooltipClose = () => {\n    setTooltipOpen(false);\n  };\n\n  const handleMessage = () => {\n    const lastSeen = getLastSeenNotification();\n    const userMessages = messages.filter(message => {\n      if (message.userLanguage && message.userLanguage !== userLanguage && message.userLanguage !== navigator.language.substring(0, 2)) {\n        return false;\n      }\n\n      return true;\n    });\n    const unseenCount = userMessages.reduce((count, message) => message.id > lastSeen ? count + 1 : count, 0);\n\n    if (unseenCount > 0) {\n      setUnseenNotificationsCount(unseenCount);\n    }\n\n    setMessageList(userMessages.reverse());\n  };\n\n  React.useEffect(() => {\n    let active = true; // Prevent search engines from indexing the notification.\n\n    if (/glebot/.test(navigator.userAgent)) {\n      return undefined;\n    }\n\n    (async () => {\n      await getMessages();\n\n      if (active) {\n        handleMessage();\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Tooltip, {\n    open: tooltipOpen,\n    onOpen: handleTooltipOpen,\n    onClose: handleTooltipClose,\n    title: t('toggleNotifications'),\n    enterDelay: 300\n  }, __jsx(IconButton, {\n    color: \"inherit\",\n    ref: anchorRef,\n    \"aria-controls\": open ? 'notifications-popup' : undefined,\n    \"aria-haspopup\": \"true\",\n    \"aria-label\": t('toggleNotifications'),\n    onClick: handleToggle,\n    \"data-ga-event-category\": \"AppBar\",\n    \"data-ga-event-action\": \"toggleNotifications\"\n  }, __jsx(Badge, {\n    color: \"secondary\",\n    badgeContent: unseenNotificationsCount\n  }, _ref))), __jsx(Popper, {\n    id: \"notifications-popup\",\n    anchorEl: anchorRef.current,\n    open: open,\n    placement: \"bottom-end\",\n    transition: true,\n    disablePortal: true,\n    role: undefined\n  }, ({\n    TransitionProps\n  }) => __jsx(ClickAwayListener, {\n    onClickAway: handleClose\n  }, __jsx(Grow, _extends({\n    in: open\n  }, TransitionProps), __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(List, {\n    className: classes.list\n  }, messageList.map((message, index) => __jsx(React.Fragment, {\n    key: message.id\n  }, __jsx(ListItem, {\n    alignItems: \"flex-start\",\n    className: classes.listItem\n  }, message.date && __jsx(ListItemText, {\n    secondary: new Date(message.date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    })\n  }), __jsx(ListItemText, {\n    primary: message.title,\n    secondary: __jsx(\"span\", {\n      id: \"notification-message\",\n      dangerouslySetInnerHTML: {\n        __html: message.text\n      }\n    }),\n    secondaryTypographyProps: {\n      color: 'textPrimary'\n    }\n  })), index < messageList.length - 1 ? _ref2 : null))))))));\n}","map":null,"metadata":{},"sourceType":"module"}