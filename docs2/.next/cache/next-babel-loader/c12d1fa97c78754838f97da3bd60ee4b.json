{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport PopperJS from 'popper.js';\nimport { chainPropTypes, refType } from \"../../../material-ui-utils/src\";\nimport { useTheme } from \"../../../material-ui-styles/src\";\nimport Portal from \"../Portal\";\nimport createChainedFunction from \"../utils/createChainedFunction\";\nimport setRef from \"../utils/setRef\";\nimport useForkRef from \"../utils/useForkRef\";\nimport ownerWindow from \"../utils/ownerWindow\";\n\nfunction flipPlacement(placement, theme) {\n  const direction = theme && theme.direction || 'ltr';\n\n  if (direction === 'ltr') {\n    return placement;\n  }\n\n  switch (placement) {\n    case 'bottom-end':\n      return 'bottom-start';\n\n    case 'bottom-start':\n      return 'bottom-end';\n\n    case 'top-end':\n      return 'top-start';\n\n    case 'top-start':\n      return 'top-end';\n\n    default:\n      return placement;\n  }\n}\n\nfunction getAnchorEl(anchorEl) {\n  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;\n}\n\nconst useEnhancedEffect = false ? React.useLayoutEffect : React.useEffect;\nconst defaultPopperOptions = {};\n/**\n * Poppers rely on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.\n */\n\nconst Popper = React.forwardRef(function Popper(props, ref) {\n  const {\n    anchorEl,\n    children,\n    container,\n    disablePortal = false,\n    keepMounted = false,\n    modifiers,\n    open,\n    placement: initialPlacement = 'bottom',\n    popperOptions = defaultPopperOptions,\n    popperRef: popperRefProp,\n    transition = false\n  } = props,\n        other = _objectWithoutProperties(props, [\"anchorEl\", \"children\", \"container\", \"disablePortal\", \"keepMounted\", \"modifiers\", \"open\", \"placement\", \"popperOptions\", \"popperRef\", \"transition\"]);\n\n  const tooltipRef = React.useRef(null);\n  const ownRef = useForkRef(tooltipRef, ref);\n  const popperRef = React.useRef(null);\n  const handlePopperRef = useForkRef(popperRef, popperRefProp);\n  const handlePopperRefRef = React.useRef(handlePopperRef);\n  useEnhancedEffect(() => {\n    handlePopperRefRef.current = handlePopperRef;\n  }, [handlePopperRef]);\n  React.useImperativeHandle(popperRefProp, () => popperRef.current, []);\n  const [exited, setExited] = React.useState(true);\n  const theme = useTheme();\n  const rtlPlacement = flipPlacement(initialPlacement, theme);\n  /**\n   * placement initialized from prop but can change during lifetime if modifiers.flip.\n   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior\n   */\n\n  const [placement, setPlacement] = React.useState(rtlPlacement);\n  React.useEffect(() => {\n    if (popperRef.current) {\n      popperRef.current.update();\n    }\n  });\n  const handleOpen = React.useCallback(() => {\n    if (!tooltipRef.current || !anchorEl || !open) {\n      return;\n    }\n\n    if (popperRef.current) {\n      popperRef.current.destroy();\n      handlePopperRefRef.current(null);\n    }\n\n    const handlePopperUpdate = data => {\n      setPlacement(data.placement);\n    };\n\n    const resolvedAnchorEl = getAnchorEl(anchorEl);\n\n    if (process.env.NODE_ENV !== 'production') {\n      const containerWindow = ownerWindow(resolvedAnchorEl);\n\n      if (resolvedAnchorEl instanceof containerWindow.Element) {\n        const box = resolvedAnchorEl.getBoundingClientRect();\n\n        if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {\n          console.warn(['Material-UI: the `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', \"Make sure the element is present in the document or that it's not display none.\"].join('\\n'));\n        }\n      }\n    }\n\n    const popper = new PopperJS(getAnchorEl(anchorEl), tooltipRef.current, _objectSpread({\n      placement: rtlPlacement\n    }, popperOptions, {\n      modifiers: _objectSpread({}, disablePortal ? {} : {\n        // It's using scrollParent by default, we can use the viewport when using a portal.\n        preventOverflow: {\n          boundariesElement: 'window'\n        }\n      }, {}, modifiers, {}, popperOptions.modifiers),\n      // We could have been using a custom modifier like react-popper is doing.\n      // But it seems this is the best public API for this use case.\n      onCreate: createChainedFunction(handlePopperUpdate, popperOptions.onCreate),\n      onUpdate: createChainedFunction(handlePopperUpdate, popperOptions.onUpdate)\n    }));\n    handlePopperRefRef.current(popper);\n  }, [anchorEl, disablePortal, modifiers, open, rtlPlacement, popperOptions]);\n  const handleRef = React.useCallback(node => {\n    setRef(ownRef, node);\n    handleOpen();\n  }, [ownRef, handleOpen]);\n\n  const handleEnter = () => {\n    setExited(false);\n  };\n\n  const handleClose = () => {\n    if (!popperRef.current) {\n      return;\n    }\n\n    popperRef.current.destroy();\n    handlePopperRefRef.current(null);\n  };\n\n  const handleExited = () => {\n    setExited(true);\n    handleClose();\n  };\n\n  React.useEffect(() => {\n    // Let's update the popper position.\n    handleOpen();\n  }, [handleOpen]);\n  React.useEffect(() => {\n    return () => {\n      handleClose();\n    };\n  }, []);\n  React.useEffect(() => {\n    if (!open && !transition) {\n      // Otherwise handleExited will call this.\n      handleClose();\n    }\n  }, [open, transition]);\n\n  if (!keepMounted && !open && (!transition || exited)) {\n    return null;\n  }\n\n  const childProps = {\n    placement\n  };\n\n  if (transition) {\n    childProps.TransitionProps = {\n      in: open,\n      onEnter: handleEnter,\n      onExited: handleExited\n    };\n  }\n\n  return __jsx(Portal, {\n    disablePortal: disablePortal,\n    container: container\n  }, __jsx(\"div\", _extends({\n    ref: handleRef,\n    role: \"tooltip\"\n  }, other, {\n    style: _objectSpread({\n      // Prevents scroll issue, waiting for Popper.js to add this style once initiated.\n      position: 'fixed',\n      // Fix Popper.js display issue\n      top: 0,\n      left: 0\n    }, other.style)\n  }), typeof children === 'function' ? children(childProps) : children));\n});\nexport default Popper;","map":null,"metadata":{},"sourceType":"module"}