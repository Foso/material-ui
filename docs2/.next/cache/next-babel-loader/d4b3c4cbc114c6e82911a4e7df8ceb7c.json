{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { Transition } from 'react-transition-group';\nimport { duration } from \"../styles/transitions\";\nimport useTheme from \"../styles/useTheme\";\nimport { reflow, getTransitionProps } from \"../transitions/utils\";\nimport useForkRef from \"../utils/useForkRef\";\nconst styles = {\n  entering: {\n    transform: 'none'\n  },\n  entered: {\n    transform: 'none'\n  }\n};\nconst defaultTimeout = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\n/**\n * The Zoom transition can be used for the floating variant of the\n * [Button](/components/buttons/#floating-action-buttons) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nconst Zoom = React.forwardRef(function Zoom(props, ref) {\n  const {\n    children,\n    in: inProp,\n    onEnter,\n    onExit,\n    style,\n    timeout = defaultTimeout\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"in\", \"onEnter\", \"onExit\", \"style\", \"timeout\"]);\n\n  const theme = useTheme();\n  const handleRef = useForkRef(children.ref, ref);\n\n  const handleEnter = (node, isAppearing) => {\n    reflow(node); // So the animation always start from the start.\n\n    const transitionProps = getTransitionProps({\n      style,\n      timeout\n    }, {\n      mode: 'enter'\n    });\n    node.style.webkitTransition = theme.transitions.create('transform', transitionProps);\n    node.style.transition = theme.transitions.create('transform', transitionProps);\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  const handleExit = node => {\n    const transitionProps = getTransitionProps({\n      style,\n      timeout\n    }, {\n      mode: 'exit'\n    });\n    node.style.webkitTransition = theme.transitions.create('transform', transitionProps);\n    node.style.transition = theme.transitions.create('transform', transitionProps);\n\n    if (onExit) {\n      onExit(node);\n    }\n  };\n\n  return __jsx(Transition, _extends({\n    appear: true,\n    in: inProp,\n    onEnter: handleEnter,\n    onExit: handleExit,\n    timeout: timeout\n  }, other), (state, childProps) => {\n    return React.cloneElement(children, _objectSpread({\n      style: _objectSpread({\n        transform: 'scale(0)',\n        visibility: state === 'exited' && !inProp ? 'hidden' : undefined\n      }, styles[state], {}, style, {}, children.props.style),\n      ref: handleRef\n    }, childProps));\n  });\n});\nexport default Zoom;","map":null,"metadata":{},"sourceType":"module"}