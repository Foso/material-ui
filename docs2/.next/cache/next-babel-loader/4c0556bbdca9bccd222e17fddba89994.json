{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport isValueSelected from \"./isValueSelected\";\nimport { withStyles } from \"../../../material-ui/src/styles\";\nimport { capitalize } from \"../../../material-ui/src/utils\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: theme.shape.borderRadius,\n    display: 'inline-flex'\n  },\n\n  /* Styles applied to the children. */\n  grouped: {\n    padding: '0px 11px 0px 12px',\n    '&:not(:first-child)': {\n      marginLeft: -1,\n      borderLeft: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    },\n    '&:not(:last-child)': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }\n  },\n\n  /* Styles applied to the children if `size=\"small\"`. */\n  groupedSizeSmall: {\n    padding: '0px 7px 0px 8px'\n  },\n\n  /* Styles applied to the children if `size=\"large\"`. */\n  groupedSizeLarge: {\n    padding: '0px 15px 0px 16px'\n  }\n});\nconst ToggleButtonGroup = React.forwardRef(function ToggleButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    exclusive = false,\n    onChange,\n    size = 'medium',\n    value\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"exclusive\", \"onChange\", \"size\", \"value\"]);\n\n  const handleChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n\n    const index = value && value.indexOf(buttonValue);\n    let newValue;\n\n    if (value && index >= 0) {\n      newValue = [...value];\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? [...value, buttonValue] : [buttonValue];\n    }\n\n    onChange(event, newValue);\n  };\n\n  const handleExclusiveChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n\n  return __jsx(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: \"group\"\n  }, other), React.Children.map(children, child => {\n    if (!React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: the ToggleButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    const {\n      selected: buttonSelected,\n      value: buttonValue\n    } = child.props;\n    const selected = buttonSelected === undefined ? isValueSelected(buttonValue, value) : buttonSelected;\n    return React.cloneElement(child, {\n      className: clsx(classes.grouped, child.props.className, size !== 'medium' && classes[`groupedSize${capitalize(size)}`]),\n      selected,\n      onChange: exclusive ? handleExclusiveChange : handleChange,\n      size\n    });\n  }));\n});\nexport default withStyles(styles, {\n  name: 'MuiToggleButtonGroup'\n})(ToggleButtonGroup);","map":null,"metadata":{},"sourceType":"module"}