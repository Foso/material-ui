{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { Transition } from 'react-transition-group';\nimport useTheme from \"../styles/useTheme\";\nimport { reflow, getTransitionProps } from \"../transitions/utils\";\nimport useForkRef from \"../utils/useForkRef\";\n\nfunction getScale(value) {\n  return `scale(${value}, ${value ** 2})`;\n}\n\nconst styles = {\n  entering: {\n    opacity: 1,\n    transform: getScale(1)\n  },\n  entered: {\n    opacity: 1,\n    transform: 'none'\n  }\n};\n/**\n * The Grow transition is used by the [Tooltip](/components/tooltips/) and\n * [Popover](/components/popover/) components.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nconst Grow = React.forwardRef(function Grow(props, ref) {\n  const {\n    children,\n    in: inProp,\n    onEnter,\n    onExit,\n    style,\n    timeout = 'auto'\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"in\", \"onEnter\", \"onExit\", \"style\", \"timeout\"]);\n\n  const timer = React.useRef();\n  const autoTimeout = React.useRef();\n  const handleRef = useForkRef(children.ref, ref);\n  const theme = useTheme();\n\n  const handleEnter = (node, isAppearing) => {\n    reflow(node); // So the animation always start from the start.\n\n    const {\n      duration: transitionDuration,\n      delay\n    } = getTransitionProps({\n      style,\n      timeout\n    }, {\n      mode: 'enter'\n    });\n    let duration;\n\n    if (timeout === 'auto') {\n      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);\n      autoTimeout.current = duration;\n    } else {\n      duration = transitionDuration;\n    }\n\n    node.style.transition = [theme.transitions.create('opacity', {\n      duration,\n      delay\n    }), theme.transitions.create('transform', {\n      duration: duration * 0.666,\n      delay\n    })].join(',');\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  const handleExit = node => {\n    const {\n      duration: transitionDuration,\n      delay\n    } = getTransitionProps({\n      style,\n      timeout\n    }, {\n      mode: 'exit'\n    });\n    let duration;\n\n    if (timeout === 'auto') {\n      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);\n      autoTimeout.current = duration;\n    } else {\n      duration = transitionDuration;\n    }\n\n    node.style.transition = [theme.transitions.create('opacity', {\n      duration,\n      delay\n    }), theme.transitions.create('transform', {\n      duration: duration * 0.666,\n      delay: delay || duration * 0.333\n    })].join(',');\n    node.style.opacity = '0';\n    node.style.transform = getScale(0.75);\n\n    if (onExit) {\n      onExit(node);\n    }\n  };\n\n  const addEndListener = (_, next) => {\n    if (timeout === 'auto') {\n      timer.current = setTimeout(next, autoTimeout.current || 0);\n    }\n  };\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timer.current);\n    };\n  }, []);\n  return __jsx(Transition, _extends({\n    appear: true,\n    in: inProp,\n    onEnter: handleEnter,\n    onExit: handleExit,\n    addEndListener: addEndListener,\n    timeout: timeout === 'auto' ? null : timeout\n  }, other), (state, childProps) => {\n    return React.cloneElement(children, _objectSpread({\n      style: _objectSpread({\n        opacity: 0,\n        transform: getScale(0.75),\n        visibility: state === 'exited' && !inProp ? 'hidden' : undefined\n      }, styles[state], {}, style, {}, children.props.style),\n      ref: handleRef\n    }, childProps));\n  });\n});\nGrow.muiSupportAuto = true;\nexport default Grow;","map":null,"metadata":{},"sourceType":"module"}