{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { chainPropTypes } from \"../../../material-ui-utils/src\";\nimport clsx from 'clsx';\nimport withStyles from \"../styles/withStyles\";\nimport InputBase from \"../InputBase\";\nimport MenuItem from \"../MenuItem\";\nimport Select from \"../Select\";\nimport TableCell from \"../TableCell\";\nimport Toolbar from \"../Toolbar\";\nimport Typography from \"../Typography\";\nimport TablePaginationActions from \"./TablePaginationActions\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: theme.palette.text.primary,\n    fontSize: theme.typography.pxToRem(14),\n    overflow: 'auto',\n    // Increase the specificity to override TableCell.\n    '&:last-child': {\n      padding: 0\n    }\n  },\n\n  /* Styles applied to the Toolbar component. */\n  toolbar: {\n    minHeight: 52,\n    paddingRight: 2\n  },\n\n  /* Styles applied to the spacer element. */\n  spacer: {\n    flex: '1 1 100%'\n  },\n\n  /* Styles applied to the caption Typography components if `variant=\"caption\"`. */\n  caption: {\n    flexShrink: 0\n  },\n\n  /* Styles applied to the Select component root element. */\n  selectRoot: {\n    // `.selectRoot` should be merged with `.input` in v5.\n    marginRight: 32,\n    marginLeft: 8\n  },\n\n  /* Styles applied to the Select component `select` class. */\n  select: {\n    paddingLeft: 8,\n    paddingRight: 24,\n    textAlign: 'right',\n    textAlignLast: 'right' // Align <select> on Chrome.\n\n  },\n  // TODO v5: remove\n\n  /* Styles applied to the Select component `icon` class. */\n  selectIcon: {},\n\n  /* Styles applied to the `InputBase` component. */\n  input: {\n    color: 'inherit',\n    fontSize: 'inherit',\n    flexShrink: 0\n  },\n\n  /* Styles applied to the MenuItem component. */\n  menuItem: {},\n\n  /* Styles applied to the internal `TablePaginationActions` component. */\n  actions: {\n    flexShrink: 0,\n    marginLeft: 20\n  }\n});\n\nconst defaultLabelDisplayedRows = ({\n  from,\n  to,\n  count\n}) => `${from}-${to === -1 ? count : to} of ${count !== -1 ? count : `more than ${to}`}`;\n\nconst defaultRowsPerPageOptions = [10, 25, 50, 100];\n/**\n * A `TableCell` based component for placing inside `TableFooter` for pagination.\n */\n\nconst TablePagination = React.forwardRef(function TablePagination(props, ref) {\n  const {\n    ActionsComponent = TablePaginationActions,\n    backIconButtonProps,\n    backIconButtonText = 'Previous page',\n    classes,\n    className,\n    colSpan: colSpanProp,\n    component: Component = TableCell,\n    count,\n    labelDisplayedRows = defaultLabelDisplayedRows,\n    labelRowsPerPage = 'Rows per page:',\n    nextIconButtonProps,\n    nextIconButtonText = 'Next page',\n    onChangePage,\n    onChangeRowsPerPage,\n    page,\n    rowsPerPage,\n    rowsPerPageOptions = defaultRowsPerPageOptions,\n    SelectProps = {}\n  } = props,\n        other = _objectWithoutProperties(props, [\"ActionsComponent\", \"backIconButtonProps\", \"backIconButtonText\", \"classes\", \"className\", \"colSpan\", \"component\", \"count\", \"labelDisplayedRows\", \"labelRowsPerPage\", \"nextIconButtonProps\", \"nextIconButtonText\", \"onChangePage\", \"onChangeRowsPerPage\", \"page\", \"rowsPerPage\", \"rowsPerPageOptions\", \"SelectProps\"]);\n\n  let colSpan;\n\n  if (Component === TableCell || Component === 'td') {\n    colSpan = colSpanProp || 1000; // col-span over everything\n  }\n\n  const MenuItemComponent = SelectProps.native ? 'option' : MenuItem;\n  return __jsx(Component, _extends({\n    className: clsx(classes.root, className),\n    colSpan: colSpan,\n    ref: ref\n  }, other), __jsx(Toolbar, {\n    className: classes.toolbar\n  }, __jsx(\"div\", {\n    className: classes.spacer\n  }), rowsPerPageOptions.length > 1 && __jsx(Typography, {\n    color: \"inherit\",\n    variant: \"body2\",\n    className: classes.caption\n  }, labelRowsPerPage), rowsPerPageOptions.length > 1 && __jsx(Select, _extends({\n    classes: {\n      select: classes.select,\n      icon: classes.selectIcon\n    },\n    input: __jsx(InputBase, {\n      className: clsx(classes.input, classes.selectRoot)\n    }),\n    value: rowsPerPage,\n    onChange: onChangeRowsPerPage\n  }, SelectProps), rowsPerPageOptions.map(rowsPerPageOption => __jsx(MenuItemComponent, {\n    className: classes.menuItem,\n    key: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption,\n    value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption\n  }, rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))), __jsx(Typography, {\n    color: \"inherit\",\n    variant: \"body2\",\n    className: classes.caption\n  }, labelDisplayedRows({\n    from: count === 0 ? 0 : page * rowsPerPage + 1,\n    to: count !== -1 ? Math.min(count, (page + 1) * rowsPerPage) : (page + 1) * rowsPerPage,\n    count,\n    page\n  })), __jsx(ActionsComponent, {\n    className: classes.actions,\n    backIconButtonProps: _objectSpread({\n      title: backIconButtonText,\n      'aria-label': backIconButtonText\n    }, backIconButtonProps),\n    count: count,\n    nextIconButtonProps: _objectSpread({\n      title: nextIconButtonText,\n      'aria-label': nextIconButtonText\n    }, nextIconButtonProps),\n    onChangePage: onChangePage,\n    page: page,\n    rowsPerPage: rowsPerPage\n  })));\n});\nexport default withStyles(styles, {\n  name: 'MuiTablePagination'\n})(TablePagination);","map":null,"metadata":{},"sourceType":"module"}