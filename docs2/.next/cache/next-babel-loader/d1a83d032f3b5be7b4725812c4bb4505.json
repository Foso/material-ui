{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport TextField from \"../../../../../packages/material-ui/src/TextField\";\nimport Autocomplete from \"../../../../../packages/material-ui-lab/src/Autocomplete\";\nimport useMediaQuery from \"../../../../../packages/material-ui/src/useMediaQuery\";\nimport ListSubheader from \"../../../../../packages/material-ui/src/ListSubheader\";\nimport { useTheme, makeStyles } from \"../../../../../packages/material-ui/src/styles\";\nimport { VariableSizeList } from 'react-window';\nimport { Typography } from \"../../../../../packages/material-ui/src\";\nconst LISTBOX_PADDING = 8; // px\n\nfunction renderRow(props) {\n  const {\n    data,\n    index,\n    style\n  } = props;\n  return React.cloneElement(data[index], {\n    style: _objectSpread({}, style, {\n      top: style.top + LISTBOX_PADDING\n    })\n  });\n}\n\nconst OuterElementContext = React.createContext({});\nconst OuterElementType = React.forwardRef((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return __jsx(\"div\", _extends({\n    ref: ref\n  }, props, outerProps));\n}); // Adapter for react-window\n\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\n  const {\n    children\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\"]);\n\n  const itemData = React.Children.toArray(children);\n  const theme = useTheme();\n  const smUp = useMediaQuery(theme.breakpoints.up('sm'), {\n    noSsr: true\n  });\n  const itemCount = itemData.length;\n  const itemSize = smUp ? 36 : 48;\n\n  const getChildSize = child => {\n    if (React.isValidElement(child) && child.type === ListSubheader) {\n      return 48;\n    }\n\n    return itemSize;\n  };\n\n  const getHeight = () => {\n    if (itemCount > 8) {\n      return 8 * itemSize;\n    }\n\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n  };\n\n  return __jsx(\"div\", {\n    ref: ref\n  }, __jsx(OuterElementContext.Provider, {\n    value: other\n  }, __jsx(VariableSizeList, {\n    itemData: itemData,\n    height: getHeight() + 2 * LISTBOX_PADDING,\n    width: \"100%\",\n    key: itemCount,\n    outerElementType: OuterElementType,\n    innerElementType: \"ul\",\n    itemSize: index => getChildSize(itemData[index]),\n    overscanCount: 5,\n    itemCount: itemCount\n  }, renderRow)));\n});\n\nfunction random(length) {\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n\n  for (let i = 0; i < length; i += 1) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n\n  return result;\n}\n\nconst useStyles = makeStyles({\n  listbox: {\n    '& ul': {\n      padding: 0,\n      margin: 0\n    }\n  }\n});\n\nconst OPTIONS = _Array$from(new Array(10000)).map(() => random(10 + Math.ceil(Math.random() * 20))).sort((a, b) => a.toUpperCase().localeCompare(b.toUpperCase()));\n\nconst renderGroup = params => [__jsx(ListSubheader, {\n  key: params.key,\n  component: \"div\"\n}, params.key), params.children];\n\nexport default function Virtualize() {\n  const classes = useStyles();\n  return __jsx(Autocomplete, {\n    id: \"virtualize-demo\",\n    style: {\n      width: 300\n    },\n    disableListWrap: true,\n    classes: classes,\n    ListboxComponent: ListboxComponent,\n    renderGroup: renderGroup,\n    options: OPTIONS,\n    groupBy: option => option[0].toUpperCase(),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      variant: \"outlined\",\n      label: \"10,000 options\"\n    })),\n    renderOption: option => __jsx(Typography, {\n      noWrap: true\n    }, option)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}