{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { refType } from \"../../../material-ui-utils/src\";\nimport SwitchBase from \"../internal/SwitchBase\";\nimport CheckBoxOutlineBlankIcon from \"../internal/svg-icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"../internal/svg-icons/CheckBox\";\nimport { fade } from \"../styles/colorManipulator\";\nimport IndeterminateCheckBoxIcon from \"../internal/svg-icons/IndeterminateCheckBox\";\nimport capitalize from \"../utils/capitalize\";\nimport withStyles from \"../styles/withStyles\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: theme.palette.text.secondary\n  },\n\n  /* Pseudo-class applied to the root element if `checked={true}`. */\n  checked: {},\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n  indeterminate: {},\n\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    '&$checked': {\n      color: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled\n    }\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    '&$checked': {\n      color: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled\n    }\n  }\n});\n\nconst defaultCheckedIcon = __jsx(CheckBoxIcon, null);\n\nconst defaultIcon = __jsx(CheckBoxOutlineBlankIcon, null);\n\nconst defaultIndeterminateIcon = __jsx(IndeterminateCheckBoxIcon, null);\n\nconst Checkbox = React.forwardRef(function Checkbox(props, ref) {\n  const {\n    checkedIcon = defaultCheckedIcon,\n    classes,\n    color = 'secondary',\n    icon = defaultIcon,\n    indeterminate = false,\n    indeterminateIcon = defaultIndeterminateIcon,\n    inputProps,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  return __jsx(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[`color${capitalize(color)}`], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _objectSpread({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: React.cloneElement(indeterminate ? indeterminateIcon : icon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    checkedIcon: React.cloneElement(indeterminate ? indeterminateIcon : checkedIcon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    ref: ref\n  }, other));\n});\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);","map":null,"metadata":{},"sourceType":"module"}