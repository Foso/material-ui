{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from \"../../../material-ui/src/styles\";\nimport usePagination from \"./usePagination\";\nimport PaginationItem from \"../PaginationItem\";\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the ul element. */\n  ul: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  }\n};\n\nfunction defaultGetAriaLabel(type, page, selected) {\n  if (type === 'page') {\n    return `${selected ? '' : 'Go to '}page ${page}`;\n  }\n\n  return `Go to ${type} page`;\n}\n\nconst Pagination = React.forwardRef(function Pagination(props, ref) {\n  const {\n    boundaryCount,\n    children,\n    classes,\n    className,\n    color = 'standard',\n    count,\n    defaultPage,\n    disabled,\n    getItemAriaLabel: getAriaLabel = defaultGetAriaLabel,\n    hideNextButton,\n    hidePrevButton,\n    onChange,\n    page,\n    renderItem = item => __jsx(PaginationItem, item),\n    shape = 'round',\n    showFirstButton,\n    showLastButton,\n    siblingCount,\n    size = 'medium',\n    variant = 'text'\n  } = props,\n        other = _objectWithoutProperties(props, [\"boundaryCount\", \"children\", \"classes\", \"className\", \"color\", \"count\", \"defaultPage\", \"disabled\", \"getItemAriaLabel\", \"hideNextButton\", \"hidePrevButton\", \"onChange\", \"page\", \"renderItem\", \"shape\", \"showFirstButton\", \"showLastButton\", \"siblingCount\", \"size\", \"variant\"]);\n\n  const {\n    items\n  } = usePagination(_objectSpread({}, props, {\n    componentName: 'Pagination'\n  }));\n  return __jsx(\"nav\", _extends({\n    \"aria-label\": \"pagination navigation\",\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), __jsx(\"ul\", {\n    className: classes.ul\n  }, children || items.map((item, index) => __jsx(\"li\", {\n    key: index\n  }, renderItem(_objectSpread({}, item, {\n    color,\n    'aria-label': getAriaLabel(item.type, item.page, item.selected),\n    shape,\n    size,\n    variant\n  }))))));\n}); // @default tags synced with default values from usePagination\n\nexport default withStyles(styles, {\n  name: 'MuiPagination'\n})(Pagination);","map":null,"metadata":{},"sourceType":"module"}