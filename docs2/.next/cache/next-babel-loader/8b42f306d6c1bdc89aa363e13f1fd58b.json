{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport optionsReducer from \"./optionsReducer\"; // Get the Redux DevTools extension and fallback to a no-op function\n\nlet devtools = x => x;\n\nif (process.env.NODE_ENV !== 'production' && process.browser && window.__REDUX_DEVTOOLS_EXTENSION__) {\n  devtools = window.__REDUX_DEVTOOLS_EXTENSION__();\n}\n\nfunction create(initialState) {\n  let middleware = [];\n\n  if (process.env.NODE_ENV !== 'production' && process.browser && !window.__REDUX_DEVTOOLS_EXTENSION__ && // redux-logger needs this feature\n  Object.hasOwnProperty('assign')) {\n    // eslint-disable-next-line global-require\n    const createLogger = require('redux-logger').createLogger;\n\n    middleware = [...middleware, createLogger()];\n  }\n\n  return createStore(combineReducers({\n    options: optionsReducer\n  }), initialState, // Hydrate the store with server-side data\n  compose(applyMiddleware(...middleware), devtools));\n}\n\nexport default function initRedux(initialState) {\n  // Make sure to create a new store for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState);\n  } // Reuse store on the client-side\n\n\n  if (!global.__INIT_REDUX_STORE__) {\n    global.__INIT_REDUX_STORE__ = create(initialState);\n  }\n\n  return global.__INIT_REDUX_STORE__;\n}","map":null,"metadata":{},"sourceType":"module"}