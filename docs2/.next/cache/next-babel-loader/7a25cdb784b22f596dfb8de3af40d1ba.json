{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { Transition } from 'react-transition-group';\nimport withStyles from \"../styles/withStyles\";\nimport { duration } from \"../styles/transitions\";\nimport { getTransitionProps } from \"../transitions/utils\";\nimport useTheme from \"../styles/useTheme\";\nexport const styles = theme => ({\n  /* Styles applied to the container element. */\n  container: {\n    height: 0,\n    overflow: 'hidden',\n    transition: theme.transitions.create('height')\n  },\n\n  /* Styles applied to the container element when the transition has entered. */\n  entered: {\n    height: 'auto',\n    overflow: 'visible'\n  },\n\n  /* Styles applied to the container element when the transition has exited and `collapsedHeight` != 0px. */\n  hidden: {\n    visibility: 'hidden'\n  },\n\n  /* Styles applied to the outer wrapper element. */\n  wrapper: {\n    // Hack to get children with a negative margin to not falsify the height computation.\n    display: 'flex'\n  },\n\n  /* Styles applied to the inner wrapper element. */\n  wrapperInner: {\n    width: '100%'\n  }\n});\n/**\n * The Collapse transition is used by the\n * [Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nconst Collapse = React.forwardRef(function Collapse(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    collapsedHeight: collapsedHeightProp = '0px',\n    component: Component = 'div',\n    in: inProp,\n    onEnter,\n    onEntered,\n    onEntering,\n    onExit,\n    onExiting,\n    style,\n    timeout = duration.standard\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"collapsedHeight\", \"component\", \"in\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExiting\", \"style\", \"timeout\"]);\n\n  const theme = useTheme();\n  const timer = React.useRef();\n  const wrapperRef = React.useRef(null);\n  const autoTransitionDuration = React.useRef();\n  const collapsedHeight = typeof collapsedHeightProp === 'number' ? `${collapsedHeightProp}px` : collapsedHeightProp;\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timer.current);\n    };\n  }, []);\n\n  const handleEnter = (node, isAppearing) => {\n    node.style.height = collapsedHeight;\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  const handleEntering = (node, isAppearing) => {\n    const wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n    const {\n      duration: transitionDuration\n    } = getTransitionProps({\n      style,\n      timeout\n    }, {\n      mode: 'enter'\n    });\n\n    if (timeout === 'auto') {\n      const duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);\n      node.style.transitionDuration = `${duration2}ms`;\n      autoTransitionDuration.current = duration2;\n    } else {\n      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;\n    }\n\n    node.style.height = `${wrapperHeight}px`;\n\n    if (onEntering) {\n      onEntering(node, isAppearing);\n    }\n  };\n\n  const handleEntered = (node, isAppearing) => {\n    node.style.height = 'auto';\n\n    if (onEntered) {\n      onEntered(node, isAppearing);\n    }\n  };\n\n  const handleExit = node => {\n    const wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n    node.style.height = `${wrapperHeight}px`;\n\n    if (onExit) {\n      onExit(node);\n    }\n  };\n\n  const handleExiting = node => {\n    const wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n    const {\n      duration: transitionDuration\n    } = getTransitionProps({\n      style,\n      timeout\n    }, {\n      mode: 'exit'\n    });\n\n    if (timeout === 'auto') {\n      const duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);\n      node.style.transitionDuration = `${duration2}ms`;\n      autoTransitionDuration.current = duration2;\n    } else {\n      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;\n    }\n\n    node.style.height = collapsedHeight;\n\n    if (onExiting) {\n      onExiting(node);\n    }\n  };\n\n  const addEndListener = (_, next) => {\n    if (timeout === 'auto') {\n      timer.current = setTimeout(next, autoTransitionDuration.current || 0);\n    }\n  };\n\n  return __jsx(Transition, _extends({\n    in: inProp,\n    onEnter: handleEnter,\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExit: handleExit,\n    onExiting: handleExiting,\n    addEndListener: addEndListener,\n    timeout: timeout === 'auto' ? null : timeout\n  }, other), (state, childProps) => __jsx(Component, _extends({\n    className: clsx(classes.container, className, {\n      'entered': classes.entered,\n      'exited': !inProp && collapsedHeight === '0px' && classes.hidden\n    }[state]),\n    style: _objectSpread({\n      minHeight: collapsedHeight\n    }, style),\n    ref: ref\n  }, childProps), __jsx(\"div\", {\n    className: classes.wrapper,\n    ref: wrapperRef\n  }, __jsx(\"div\", {\n    className: classes.wrapperInner\n  }, children))));\n});\nCollapse.muiSupportAuto = true;\nexport default withStyles(styles, {\n  name: 'MuiCollapse'\n})(Collapse);","map":null,"metadata":{},"sourceType":"module"}