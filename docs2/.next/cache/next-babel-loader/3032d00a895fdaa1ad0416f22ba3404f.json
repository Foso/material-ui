{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nvar __jsx = React.createElement;\n// @inheritedComponent ButtonBase\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { fade, withStyles } from \"../../../material-ui/src/styles\";\nimport ButtonBase from \"../../../material-ui/src/ButtonBase\";\nimport { capitalize } from \"../../../material-ui/src/utils\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: _objectSpread({}, theme.typography.button, {\n    boxSizing: 'border-box',\n    borderRadius: theme.shape.borderRadius,\n    height: 48,\n    padding: '0px 12px',\n    border: `1px solid ${fade(theme.palette.action.active, 0.12)}`,\n    color: fade(theme.palette.action.active, 0.38),\n    '&$selected': {\n      color: theme.palette.action.active,\n      backgroundColor: fade(theme.palette.action.active, 0.12),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.action.active, 0.15)\n      },\n      '& + &': {\n        borderLeft: 0,\n        marginLeft: 0\n      }\n    },\n    '&$disabled': {\n      color: fade(theme.palette.action.disabled, 0.12)\n    },\n    '&:hover': {\n      textDecoration: 'none',\n      // Reset on mouse devices\n      backgroundColor: fade(theme.palette.text.primary, 0.05),\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      },\n      '&$disabled': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }),\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Pseudo-class applied to the root element if `selected={true}`. */\n  selected: {},\n\n  /* Styles applied to the `label` wrapper element. */\n  label: {\n    width: '100%',\n    // Ensure the correct width for iOS Safari\n    display: 'inherit',\n    alignItems: 'inherit',\n    justifyContent: 'inherit'\n  },\n\n  /* Styles applied to the root element if `size=\"small\"`. */\n  sizeSmall: {\n    height: 40,\n    padding: '0px 8px',\n    fontSize: theme.typography.pxToRem(13)\n  },\n\n  /* Styles applied to the root element if `size=\"large\"`. */\n  sizeLarge: {\n    height: 56,\n    padding: '0px 16px',\n    fontSize: theme.typography.pxToRem(15)\n  }\n});\nconst ToggleButton = React.forwardRef(function ToggleButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    disabled = false,\n    disableFocusRipple = false,\n    disableRipple = false,\n    onChange,\n    onClick,\n    selected,\n    size = 'medium',\n    value\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disabled\", \"disableFocusRipple\", \"disableRipple\", \"onChange\", \"onClick\", \"selected\", \"size\", \"value\"]);\n\n  const handleChange = event => {\n    if (onClick) {\n      onClick(event, value);\n\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n    }\n\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n\n  return __jsx(ButtonBase, _extends({\n    className: clsx(classes.root, className, disabled && classes.disabled, selected && classes.selected, size !== 'medium' && classes[`size${capitalize(size)}`]),\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    ref: ref,\n    onClick: handleChange,\n    onChange: onChange,\n    value: value,\n    disableRipple: disableRipple,\n    \"aria-pressed\": selected\n  }, other), __jsx(\"span\", {\n    className: classes.label\n  }, children));\n});\nexport default withStyles(styles, {\n  name: 'MuiToggleButton'\n})(ToggleButton);","map":null,"metadata":{},"sourceType":"module"}