{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nvar __jsx = React.createElement;\n// @inheritedComponent Tooltip\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { emphasize, withStyles } from \"../../../material-ui/src/styles\";\nimport Fab from \"../../../material-ui/src/Fab\";\nimport Tooltip from \"../../../material-ui/src/Tooltip\";\nimport { capitalize } from \"../../../material-ui/src/utils\";\nexport const styles = theme => ({\n  /* Styles applied to the Fab component. */\n  fab: {\n    margin: 8,\n    color: theme.palette.text.secondary,\n    backgroundColor: theme.palette.background.paper,\n    '&:hover': {\n      backgroundColor: emphasize(theme.palette.background.paper, 0.15)\n    },\n    transition: `${theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shorter\n    })}, opacity 0.8s`,\n    opacity: 1\n  },\n\n  /* Styles applied to the Fab component if `open={false}`. */\n  fabClosed: {\n    opacity: 0,\n    transform: 'scale(0)'\n  },\n\n  /* Styles applied to the root element if `tooltipOpen={true}`. */\n  staticTooltip: {\n    position: 'relative',\n    display: 'flex',\n    '& $staticTooltipLabel': {\n      transition: theme.transitions.create(['transform', 'opacity'], {\n        duration: theme.transitions.duration.shorter\n      }),\n      opacity: 1\n    }\n  },\n\n  /* Styles applied to the root element if `tooltipOpen={true}` and `open={false}`. */\n  staticTooltipClosed: {\n    '& $staticTooltipLabel': {\n      opacity: 0,\n      transform: 'scale(0.5)'\n    }\n  },\n\n  /* Styles applied to the static tooltip label if `tooltipOpen={true}`. */\n  staticTooltipLabel: _objectSpread({\n    position: 'absolute'\n  }, theme.typography.body1, {\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: theme.shape.borderRadius,\n    boxShadow: theme.shadows[1],\n    color: theme.palette.text.secondary,\n    padding: '4px 16px'\n  }),\n\n  /* Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement=\"left\"`` */\n  tooltipPlacementLeft: {\n    alignItems: 'center',\n    '& $staticTooltipLabel': {\n      transformOrigin: '100% 50%',\n      right: '100%',\n      marginRight: 8\n    }\n  },\n\n  /* Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement=\"right\"`` */\n  tooltipPlacementRight: {\n    alignItems: 'center',\n    '& $staticTooltipLabel': {\n      transformOrigin: '0% 50%',\n      left: '100%',\n      marginLeft: 8\n    }\n  }\n});\nconst SpeedDialAction = React.forwardRef(function SpeedDialAction(props, ref) {\n  const {\n    classes,\n    className,\n    delay = 0,\n    FabProps = {},\n    icon,\n    id,\n    open,\n    TooltipClasses,\n    tooltipOpen: tooltipOpenProp = false,\n    tooltipPlacement = 'left',\n    tooltipTitle\n  } = props,\n        other = _objectWithoutProperties(props, [\"classes\", \"className\", \"delay\", \"FabProps\", \"icon\", \"id\", \"open\", \"TooltipClasses\", \"tooltipOpen\", \"tooltipPlacement\", \"tooltipTitle\"]);\n\n  const [tooltipOpen, setTooltipOpen] = React.useState(tooltipOpenProp);\n\n  const handleTooltipClose = () => {\n    setTooltipOpen(false);\n  };\n\n  const handleTooltipOpen = () => {\n    setTooltipOpen(true);\n  };\n\n  const transitionStyle = {\n    transitionDelay: `${delay}ms`\n  };\n\n  const fab = __jsx(Fab, _extends({\n    size: \"small\",\n    className: clsx(classes.fab, className, !open && classes.fabClosed),\n    tabIndex: -1,\n    role: \"menuitem\",\n    \"aria-describedby\": `${id}-label`\n  }, FabProps, {\n    style: _objectSpread({}, transitionStyle, {}, FabProps.style)\n  }), icon);\n\n  if (tooltipOpenProp) {\n    return __jsx(\"span\", _extends({\n      id: id,\n      ref: ref,\n      className: clsx(classes.staticTooltip, classes[`tooltipPlacement${capitalize(tooltipPlacement)}`], !open && classes.staticTooltipClosed)\n    }, other), __jsx(\"span\", {\n      style: transitionStyle,\n      id: `${id}-label`,\n      className: classes.staticTooltipLabel\n    }, tooltipTitle), fab);\n  }\n\n  return __jsx(Tooltip, _extends({\n    id: id,\n    ref: ref,\n    title: tooltipTitle,\n    placement: tooltipPlacement,\n    onClose: handleTooltipClose,\n    onOpen: handleTooltipOpen,\n    open: open && tooltipOpen,\n    classes: TooltipClasses\n  }, other), fab);\n});\nexport default withStyles(styles, {\n  name: 'MuiSpeedDialAction'\n})(SpeedDialAction);","map":null,"metadata":{},"sourceType":"module"}