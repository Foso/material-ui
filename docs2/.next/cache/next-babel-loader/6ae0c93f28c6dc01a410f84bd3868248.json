{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport clsx from 'clsx';\nimport { chainPropTypes, getDisplayName } from \"../../../material-ui-utils/src\";\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport makeStyles from \"../makeStyles\";\n\nfunction omit(input, fields) {\n  const output = {};\n\n  _Object$keys(input).forEach(prop => {\n    if (fields.indexOf(prop) === -1) {\n      output[prop] = input[prop];\n    }\n  });\n\n  return output;\n} // styled-components's API removes the mapping between components and styles.\n// Using components as a low-level styling construct can be simpler.\n\n\nexport default function styled(Component) {\n  const componentCreator = (style, options = {}) => {\n    const {\n      name\n    } = options,\n          stylesOptions = _objectWithoutProperties(options, [\"name\"]);\n\n    if (process.env.NODE_ENV !== 'production' && Component === undefined) {\n      throw new Error(['You are calling styled(Component)(style) with an undefined component.', 'You may have forgotten to import it.'].join('\\n'));\n    }\n\n    let classNamePrefix = name;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        // Provide a better DX outside production.\n        const displayName = getDisplayName(Component);\n\n        if (displayName !== undefined) {\n          classNamePrefix = displayName;\n        }\n      }\n    }\n\n    const stylesOrCreator = typeof style === 'function' ? theme => ({\n      root: props => style(_objectSpread({\n        theme\n      }, props))\n    }) : {\n      root: style\n    };\n    const useStyles = makeStyles(stylesOrCreator, _objectSpread({\n      Component,\n      name: name || Component.displayName,\n      classNamePrefix\n    }, stylesOptions));\n    let filterProps;\n    let propTypes = {};\n\n    if (style.filterProps) {\n      filterProps = style.filterProps;\n      delete style.filterProps;\n    }\n    /* eslint-disable react/forbid-foreign-prop-types */\n\n\n    if (style.propTypes) {\n      propTypes = style.propTypes;\n      delete style.propTypes;\n    }\n    /* eslint-enable react/forbid-foreign-prop-types */\n\n\n    const StyledComponent = React.forwardRef(function StyledComponent(props, ref) {\n      const {\n        children,\n        className: classNameProp,\n        clone,\n        component: ComponentProp\n      } = props,\n            other = _objectWithoutProperties(props, [\"children\", \"className\", \"clone\", \"component\"]);\n\n      const classes = useStyles(props);\n      const className = clsx(classes.root, classNameProp);\n      let spread = other;\n\n      if (filterProps) {\n        spread = omit(spread, filterProps);\n      }\n\n      if (clone) {\n        return React.cloneElement(children, _objectSpread({\n          className: clsx(children.props.className, className)\n        }, spread));\n      }\n\n      if (typeof children === 'function') {\n        return children(_objectSpread({\n          className\n        }, spread));\n      }\n\n      const FinalComponent = ComponentProp || Component;\n      return __jsx(FinalComponent, _extends({\n        ref: ref,\n        className: className\n      }, spread), children);\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      StyledComponent.displayName = `Styled(${classNamePrefix})`;\n    }\n\n    hoistNonReactStatics(StyledComponent, Component);\n    return StyledComponent;\n  };\n\n  return componentCreator;\n}","map":null,"metadata":{},"sourceType":"module"}