{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport kebabCase from 'lodash/kebabCase';\nimport { Router as Router2 } from 'next/router';\nimport { useSelector } from 'react-redux';\nimport Demo from \"./Demo\";\nimport { getHeaders, getContents, demoRegexp } from \"../utils/parseMarkdown\";\nimport PageContext from \"./PageContext\";\nimport MarkdownElement from \"./MarkdownElement\";\nimport { LANGUAGES_IN_PROGRESS, SOURCE_CODE_ROOT_URL } from \"../constants\";\n\nvar _ref = __jsx(\"symbol\", {\n  id: \"anchor-link-icon\",\n  viewBox: \"0 0 16 16\"\n}, __jsx(\"path\", {\n  d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n}));\n\nexport default function useMarkdownDocs(options) {\n  var locationProp = options.markdownLocation,\n      markdownProp = options.markdown,\n      req = options.req,\n      reqPrefix = options.reqPrefix,\n      reqSource = options.reqSource;\n  var userLanguage = useSelector(function (state) {\n    return state.options.userLanguage;\n  });\n  var demos;\n  var markdown = markdownProp;\n\n  if (!markdown) {\n    demos = {};\n    var markdowns = {};\n    req.keys().forEach(function (filename) {\n      if (filename.indexOf('.md') !== -1) {\n        var match = filename.match(/-([a-z]{2})\\.md$/);\n\n        if (match && LANGUAGES_IN_PROGRESS.indexOf(match[1]) !== -1) {\n          markdowns[match[1]] = req(filename);\n        } else {\n          markdowns.en = req(filename);\n        }\n      } else if (filename.indexOf('.tsx') !== -1) {\n        var demoName = \"\".concat(reqPrefix, \"/\").concat(filename.replace(/\\.\\//g, '').replace(/\\.tsx/g, '.js'));\n        demos[demoName] = _objectSpread({}, demos[demoName], {\n          tsx: req(filename).default,\n          rawTS: reqSource(filename)\n        });\n      } else {\n        var _demoName = \"\".concat(reqPrefix, \"/\").concat(filename.replace(/\\.\\//g, ''));\n\n        demos[_demoName] = _objectSpread({}, demos[_demoName], {\n          js: req(filename).default,\n          raw: reqSource(filename)\n        });\n      }\n    });\n    markdown = markdowns[userLanguage] || markdowns.en;\n  }\n\n  var contents = getContents(markdown);\n  var headers = getHeaders(markdown);\n\n  var _React$useContext = React.useContext(PageContext),\n      activePage = _React$useContext.activePage;\n\n  var location = locationProp || activePage && activePage.pathname;\n  var t = useSelector(function (state) {\n    return state.options.t;\n  });\n\n  if (location && !locationProp) {\n    var token = location.split('/');\n    token.push(token[token.length - 1]);\n    location = token.join('/');\n\n    if (headers.filename) {\n      location = headers.filename;\n    } else {\n      location = \"/docs/src/pages\".concat(location, \".md\");\n    }\n  }\n\n  if (headers.components.length > 0) {\n    var section = location.split('/')[4];\n    contents.push(\"\\n## API\\n\\n\".concat(headers.components.map(function (component) {\n      return \"- [&lt;\".concat(component, \" /&gt;](\").concat(section === 'lab' ? '/lab/api' : '/api', \"/\").concat(Router2._rewriteUrlForNextExport(kebabCase(component)), \")\");\n    }).join('\\n'), \"\\n  \"));\n  } // eslint-disable-next-line no-underscore-dangle\n\n\n  global.__MARKED_UNIQUE__ = {};\n\n  var element = __jsx(React.Fragment, null, __jsx(\"svg\", {\n    style: {\n      display: 'none'\n    },\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, _ref), contents.map(function (content, index) {\n    if (demos && demoRegexp.test(content)) {\n      var demoOptions;\n\n      try {\n        demoOptions = JSON.parse(\"{\".concat(content, \"}\"));\n      } catch (err) {\n        console.error('JSON.parse fails with: ', \"{\".concat(content, \"}\"));\n        console.error(err);\n        return null;\n      }\n\n      var name = demoOptions.demo;\n\n      if (!demos || !demos[name]) {\n        var errorMessage = [\"Missing demo: \".concat(name, \". You can use one of the following:\"), _Object$keys(demos)].join('\\n');\n\n        if (userLanguage === 'en') {\n          throw new Error(errorMessage);\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(errorMessage);\n        }\n\n        var warnIcon = __jsx(\"span\", {\n          role: \"img\",\n          \"aria-label\": t('emojiWarning')\n        }, \"\\u26A0\\uFE0F\");\n\n        return __jsx(\"div\", {\n          key: content\n        }, warnIcon, \" Missing demo `\", name, \"` \", warnIcon);\n      }\n\n      return __jsx(Demo, {\n        key: \"\".concat(content).concat(index),\n        demo: demos[name],\n        demoOptions: demoOptions,\n        githubLocation: \"\".concat(SOURCE_CODE_ROOT_URL, \"/docs/src/\").concat(name)\n      });\n    }\n\n    return __jsx(MarkdownElement, {\n      className: \"markdownElement\",\n      key: index,\n      text: content\n    });\n  }));\n\n  return {\n    contents: contents,\n    location: location,\n    element: element,\n    markdown: markdown\n  };\n}","map":null,"metadata":{},"sourceType":"module"}