{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/no-danger, react-hooks/exhaustive-deps */\nimport fetch from 'cross-fetch';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from \"../../../../packages/material-ui/src/styles\";\nimport NotificationsIcon from \"../../../../packages/material-ui-icons/src/Notifications\";\nimport Tooltip from \"../../../../packages/material-ui/src/Tooltip\";\nimport IconButton from \"../../../../packages/material-ui/src/IconButton\";\nimport Badge from \"../../../../packages/material-ui/src/Badge\";\nimport Popper from \"../../../../packages/material-ui/src/Popper\";\nimport Grow from \"../../../../packages/material-ui/src/Grow\";\nimport Paper from \"../../../../packages/material-ui/src/Paper\";\nimport ClickAwayListener from \"../../../../packages/material-ui/src/ClickAwayListener\";\nimport List from \"../../../../packages/material-ui/src/List\";\nimport ListItem from \"../../../../packages/material-ui/src/ListItem\";\nimport ListItemText from \"../../../../packages/material-ui/src/ListItemText\";\nimport Divider from \"../../../../packages/material-ui/src/Divider\";\nimport sleep from \"../../../../modules/waterfall/sleep\";\nimport { getCookie } from \"../utils/helpers\";\nimport notifications from \"../../../notifications.json\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: {\n      transformOrigin: 'top right'\n    },\n    list: {\n      maxWidth: theme.spacing(40),\n      maxHeight: theme.spacing(40),\n      overflow: 'auto'\n    },\n    listItem: {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  };\n});\n\nfunction getLastSeenNotification() {\n  var seen = getCookie('lastSeenNotification');\n  return seen === '' ? 0 : _parseInt(seen, 10);\n}\n\nvar messages = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  messages = notifications;\n}\n\nfunction getMessages() {\n  return _getMessages.apply(this, arguments);\n}\n\nfunction _getMessages() {\n  _getMessages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n\n            if (messages) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 4;\n            return sleep(1500);\n\n          case 4:\n            _context2.next = 6;\n            return fetch('https://raw.githubusercontent.com/Foso/material-ui/master/docs/notifications.json');\n\n          case 6:\n            result = _context2.sent;\n            _context2.next = 9;\n            return result.json();\n\n          case 9:\n            messages = _context2.sent;\n\n          case 10:\n            _context2.next = 14;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n\n          case 14:\n            messages = messages || [];\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 12]]);\n  }));\n  return _getMessages.apply(this, arguments);\n}\n\nvar _ref2 = __jsx(NotificationsIcon, null);\n\nvar _ref4 = __jsx(Divider, {\n  variant: \"middle\"\n});\n\nexport default function Notifications() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState([]),\n      messageList = _React$useState[0],\n      setMessageList = _React$useState[1];\n\n  var _React$useState2 = React.useState(0),\n      unseenNotificationsCount = _React$useState2[0],\n      setUnseenNotificationsCount = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      open = _React$useState3[0],\n      setOpen = _React$useState3[1];\n\n  var _React$useState4 = React.useState(false),\n      tooltipOpen = _React$useState4[0],\n      setTooltipOpen = _React$useState4[1];\n\n  var anchorRef = React.useRef(null);\n  var t = useSelector(function (state) {\n    return state.options.t;\n  });\n  var userLanguage = useSelector(function (state) {\n    return state.options.userLanguage;\n  });\n\n  var handleToggle = function handleToggle() {\n    setOpen(function (prevOpen) {\n      return !prevOpen;\n    });\n    setTooltipOpen(false);\n    setUnseenNotificationsCount(0);\n    document.cookie = \"lastSeenNotification=\".concat(messageList[0].id, \";path=/;max-age=31536000\");\n  };\n\n  var handleClose = function handleClose() {\n    setOpen(false);\n  };\n\n  var handleTooltipOpen = function handleTooltipOpen() {\n    setTooltipOpen(!open);\n  };\n\n  var handleTooltipClose = function handleTooltipClose() {\n    setTooltipOpen(false);\n  };\n\n  var handleMessage = function handleMessage() {\n    var lastSeen = getLastSeenNotification();\n    var userMessages = messages.filter(function (message) {\n      if (message.userLanguage && message.userLanguage !== userLanguage && message.userLanguage !== navigator.language.substring(0, 2)) {\n        return false;\n      }\n\n      return true;\n    });\n    var unseenCount = userMessages.reduce(function (count, message) {\n      return message.id > lastSeen ? count + 1 : count;\n    }, 0);\n\n    if (unseenCount > 0) {\n      setUnseenNotificationsCount(unseenCount);\n    }\n\n    setMessageList(userMessages.reverse());\n  };\n\n  React.useEffect(function () {\n    var active = true; // Prevent search engines from indexing the notification.\n\n    if (/glebot/.test(navigator.userAgent)) {\n      return undefined;\n    }\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getMessages();\n\n            case 2:\n              if (active) {\n                handleMessage();\n              }\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n\n    return function () {\n      active = false;\n    };\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Tooltip, {\n    open: tooltipOpen,\n    onOpen: handleTooltipOpen,\n    onClose: handleTooltipClose,\n    title: t('toggleNotifications'),\n    enterDelay: 300\n  }, __jsx(IconButton, {\n    color: \"inherit\",\n    ref: anchorRef,\n    \"aria-controls\": open ? 'notifications-popup' : undefined,\n    \"aria-haspopup\": \"true\",\n    \"aria-label\": t('toggleNotifications'),\n    onClick: handleToggle,\n    \"data-ga-event-category\": \"AppBar\",\n    \"data-ga-event-action\": \"toggleNotifications\"\n  }, __jsx(Badge, {\n    color: \"secondary\",\n    badgeContent: unseenNotificationsCount\n  }, _ref2))), __jsx(Popper, {\n    id: \"notifications-popup\",\n    anchorEl: anchorRef.current,\n    open: open,\n    placement: \"bottom-end\",\n    transition: true,\n    disablePortal: true,\n    role: undefined\n  }, function (_ref3) {\n    var TransitionProps = _ref3.TransitionProps;\n    return __jsx(ClickAwayListener, {\n      onClickAway: handleClose\n    }, __jsx(Grow, _extends({\n      in: open\n    }, TransitionProps), __jsx(Paper, {\n      className: classes.paper\n    }, __jsx(List, {\n      className: classes.list\n    }, messageList.map(function (message, index) {\n      return __jsx(React.Fragment, {\n        key: message.id\n      }, __jsx(ListItem, {\n        alignItems: \"flex-start\",\n        className: classes.listItem\n      }, message.date && __jsx(ListItemText, {\n        secondary: new Date(message.date).toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        })\n      }), __jsx(ListItemText, {\n        primary: message.title,\n        secondary: __jsx(\"span\", {\n          id: \"notification-message\",\n          dangerouslySetInnerHTML: {\n            __html: message.text\n          }\n        }),\n        secondaryTypographyProps: {\n          color: 'textPrimary'\n        }\n      })), index < messageList.length - 1 ? _ref4 : null);\n    })))));\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}