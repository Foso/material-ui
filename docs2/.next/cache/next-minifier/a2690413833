{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{TWzw:function(n,e){n.exports='---\\nfilename: /packages/material-ui/src/GridList/GridList.js\\n---\\n\\n\\x3c!--- This documentation is automatically generated, do not try to edit it. --\\x3e\\n\\n# GridList API\\n\\n<p class=\"description\">The API documentation of the GridList React component. Learn more about the props and the CSS customization points.</p>\\n\\n## Import\\n\\n```js\\nimport GridList from \\'@material-ui/core/GridList\\';\\n// or\\nimport { GridList } from \\'@material-ui/core\\';\\n```\\n\\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\\n\\n\\n\\n## Props\\n\\n| Name | Type | Default | Description |\\n|:-----|:-----|:--------|:------------|\\n| <span class=\"prop-name\">cellHeight</span> | <span class=\"prop-type\">number<br>&#124;&nbsp;\\'auto\\'</span> | <span class=\"prop-default\">180</span> | Number of px for one cell height. You can set `\\'auto\\'` if you want to let the children determine the height. |\\n| <span class=\"prop-name required\">children&nbsp;*</span> | <span class=\"prop-type\">node</span> |  | Grid Tiles that will be in Grid List. |\\n| <span class=\"prop-name\">classes</span> | <span class=\"prop-type\">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\\n| <span class=\"prop-name\">cols</span> | <span class=\"prop-type\">number</span> | <span class=\"prop-default\">2</span> | Number of columns. |\\n| <span class=\"prop-name\">component</span> | <span class=\"prop-type\">elementType</span> | <span class=\"prop-default\">\\'ul\\'</span> | The component used for the root node. Either a string to use a DOM element or a component. |\\n| <span class=\"prop-name\">spacing</span> | <span class=\"prop-type\">number</span> | <span class=\"prop-default\">4</span> | Number of px for the spacing between tiles. |\\n\\nThe `ref` is forwarded to the root element.\\n\\nAny other props supplied will be provided to the root element (native element).\\n\\n## CSS\\n\\n- Style sheet name: `MuiGridList`.\\n- Style sheet details:\\n\\n| Rule name | Global class | Description |\\n|:-----|:-------------|:------------|\\n| <span class=\"prop-name\">root</span> | <span class=\"prop-name\">.MuiGridList-root</span> | Styles applied to the root element.\\n\\nYou can override the style of the component thanks to one of these customization points:\\n\\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\\n- With a theme and an [`overrides` property](/customization/globals/#css).\\n\\nIf that\\'s not sufficient, you can check the [implementation of the component](https://github.com/Foso/material-ui/blob/master/packages/material-ui/src/GridList/GridList.js) for more detail.\\n\\n## Demos\\n\\n- [Grid List](/components/grid-list/)\\n\\n'},ZJfT:function(n,e,s){\"use strict\";s.r(e),s.d(e,\"default\",(function(){return l}));var t=s(\"mXGw\"),o=s.n(t),a=s(\"e+1t\"),i=s(\"TWzw\"),p=s.n(i),r=(0,o.a.createElement)(a.a,{markdown:p.a});function l(){return r}},jSsg:function(n,e,s){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/api-docs/grid-list\",function(){return s(\"ZJfT\")}])}},[[\"jSsg\",0,1]]]);"}