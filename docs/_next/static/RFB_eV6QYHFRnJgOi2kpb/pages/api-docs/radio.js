(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{DEpz:function(e,n){e.exports='---\nfilename: /packages/material-ui/src/Radio/Radio.js\n---\n\n\x3c!--- This documentation is automatically generated, do not try to edit it. --\x3e\n\n# Radio API\n\n<p class="description">The API documentation of the Radio React component. Learn more about the props and the CSS customization points.</p>\n\n## Import\n\n```js\nimport Radio from \'@material-ui/core/Radio\';\n// or\nimport { Radio } from \'@material-ui/core\';\n```\n\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\n\n\n\n## Props\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| <span class="prop-name">checked</span> | <span class="prop-type">bool</span> |  | If `true`, the component is checked. |\n| <span class="prop-name">checkedIcon</span> | <span class="prop-type">node</span> |  | The icon to display when the component is checked. |\n| <span class="prop-name">classes</span> | <span class="prop-type">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\n| <span class="prop-name">color</span> | <span class="prop-type">\'primary\'<br>&#124;&nbsp;\'secondary\'<br>&#124;&nbsp;\'default\'</span> | <span class="prop-default">\'secondary\'</span> | The color of the component. It supports those theme colors that make sense for this component. |\n| <span class="prop-name">disabled</span> | <span class="prop-type">bool</span> |  | If `true`, the radio will be disabled. |\n| <span class="prop-name">disableRipple</span> | <span class="prop-type">bool</span> |  | If `true`, the ripple effect will be disabled. |\n| <span class="prop-name">icon</span> | <span class="prop-type">node</span> |  | The icon to display when the component is unchecked. |\n| <span class="prop-name">id</span> | <span class="prop-type">string</span> |  | The id of the `input` element. |\n| <span class="prop-name">inputProps</span> | <span class="prop-type">object</span> |  | [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element. |\n| <span class="prop-name">inputRef</span> | <span class="prop-type">ref</span> |  | Pass a ref to the `input` element. |\n| <span class="prop-name">name</span> | <span class="prop-type">string</span> |  | Name attribute of the `input` element. |\n| <span class="prop-name">onChange</span> | <span class="prop-type">func</span> |  | Callback fired when the state is changed.<br><br>**Signature:**<br>`function(event: object) => void`<br>*event:* The event source of the callback. You can pull out the new value by accessing `event.target.value` (string). You can pull out the new checked state by accessing `event.target.checked` (boolean). |\n| <span class="prop-name">required</span> | <span class="prop-type">bool</span> |  | If `true`, the `input` element will be required. |\n| <span class="prop-name">size</span> | <span class="prop-type">\'small\'<br>&#124;&nbsp;\'medium\'</span> | <span class="prop-default">\'medium\'</span> | The size of the radio. `small` is equivalent to the dense radio styling. |\n| <span class="prop-name">type</span> | <span class="prop-type">string</span> |  | The input component prop `type`. |\n| <span class="prop-name">value</span> | <span class="prop-type">any</span> |  | The value of the component. The DOM API casts this to a string. |\n\nThe `ref` is forwarded to the root element.\n\nAny other props supplied will be provided to the root element ([IconButton](/api/icon-button/)).\n\n## CSS\n\n- Style sheet name: `MuiRadio`.\n- Style sheet details:\n\n| Rule name | Global class | Description |\n|:-----|:-------------|:------------|\n| <span class="prop-name">root</span> | <span class="prop-name">.MuiRadio-root</span> | Styles applied to the root element.\n| <span class="prop-name">checked</span> | <span class="prop-name">.Mui-checked</span> | Pseudo-class applied to the root element if `checked={true}`.\n| <span class="prop-name">disabled</span> | <span class="prop-name">.Mui-disabled</span> | Pseudo-class applied to the root element if `disabled={true}`.\n| <span class="prop-name">colorPrimary</span> | <span class="prop-name">.MuiRadio-colorPrimary</span> | Styles applied to the root element if `color="primary"`.\n| <span class="prop-name">colorSecondary</span> | <span class="prop-name">.MuiRadio-colorSecondary</span> | Styles applied to the root element if `color="secondary"`.\n\nYou can override the style of the component thanks to one of these customization points:\n\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\n- With a theme and an [`overrides` property](/customization/globals/#css).\n\nIf that\'s not sufficient, you can check the [implementation of the component](https://github.com/Foso/material-ui/blob/master/packages/material-ui/src/Radio/Radio.js) for more detail.\n\n## Inheritance\n\nThe props of the [IconButton](/api/icon-button/) component are also available.\nYou can take advantage of this behavior to [target nested components](/guides/api/#spread).\n\n## Demos\n\n- [Radio Buttons](/components/radio-buttons/)\n\n'},Tk0e:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/api-docs/radio",function(){return a("uIZK")}])},uIZK:function(e,n,a){"use strict";a.r(n),a.d(n,"default",(function(){return c}));var s=a("mXGw"),o=a.n(s),p=a("e+1t"),t=a("DEpz"),i=a.n(t),r=(0,o.a.createElement)(p.a,{markdown:i.a});function c(){return r}}},[["Tk0e",0,1]]]);